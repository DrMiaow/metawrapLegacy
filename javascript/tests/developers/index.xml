<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="index.xsl" ?>
<metawrap xmlns="http://xsd.metawrap.com/metawrap/metawrap.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xsd.metawrap.com/metawrap/metawrap.xsd http://xsd.metawrap.com/metawrap/metawrap.xsd">
	<types/>
	<actions version="V1.1" service="Admin">
		<action name="account_create" runat="server" enabled="true" object="campaign" operation="read" group="security">
			<doc>
				<short>Creates a new account.</short>
				<full />
			</doc>
			<url>/account_create/</url>
			<param name="masterkey" type="MasterKey" evidence="true">
				<doc>The master key.</doc>
			</param>
			<param name="name" type="string">
				<doc>The name of the account.</doc>
			</param>
			<param name="email" type="string">
				<doc>Users email.</doc>
			</param>
			<param name="password" type="string">
				<doc>Users password.</doc>
			</param>
			<security>
				<rule name="MustHaveMasterKey" evidence="masterkey" />
			</security>
			<response>
				<doc>We return the newly created user key.</doc>
				<param name="user" type="string">
					<doc>The returned user key.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Encrypt a simple string.
					</doc>
					<param name="masterkey">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGCOMPLETE</param>
					<param name="name">Flavour Crusader</param>
					<param name="email">james@massive.com.au</param>
					<param name="password">The Magic Words are Squeamish Ossifrage</param>
					<expect status="success">
						<param name="user" type="string">
							<doc>The returned user key.</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="account_exists" runat="server" enabled="true" object="campaign" operation="read" group="security">
			<doc>
				<short>Used to determine if an account already exists.</short>
				<full />
			</doc>
			<url>/account_exists/</url>
			<param name="masterkey" type="MasterKey" evidence="true">
				<doc>The master key.</doc>
			</param>
			<param name="name" type="string">
				<doc>The name of the account</doc>
			</param>
			<security>
				<rule name="MustHaveMasterKey" evidence="masterkey" />
			</security>
			<response>
				<doc>We return the a flag.</doc>
				<param name="exists" type="boolean">
					<doc>The returned user key.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Encrypt a simple string.
					</doc>
					<param name="masterkey">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGCOMPLETE</param>
					<param name="name">Flavour Crusader</param>
					<expect status="success">
						<param name="user" type="string">
							<doc>The returned user key.</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_encrypt" runat="server" enabled="true" object="campaign" operation="read" group="security">
			<doc>
				<short>Encrypts the provided plaintext with the Campaign's encryption key.</short>
				<full />
			</doc>
			<url>/campaign_encrypt/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application.</doc>
			</param>
			<param name="plaintext" type="string">
				<doc>The plaintext to be encrypted.</doc>
			</param>
			<security>
				<rule name="MustHaveAPIKey" evidence="key" />
			</security>
			<response>
				<doc>We return the encrypted string.</doc>
				<param name="ciphertext" type="string">
					<doc>The returned encrypted text.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Encrypt a simple string.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="plaintext">Mary Had A Little Lamb</param>
					<expect status="success">
						<param name="ciphertext" type="string">aOdtYfzofLBn2IWpwDimecVTG4D/cxW6UuErWEjTlhlNTYn3q6fZCWR7wEl6wVAvVjNxzInlr4h50GAsUy6xcg==</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_set_key" runat="server" enabled="true" object="campaign" operation="read" group="security">
			<doc>
				<short>Set's the for a campaign to a defined value.</short>
				<full />
			</doc>
			<url>/campaign_set_key/</url>
			<param name="masterkey" type="MasterKey" evidence="true">
				<doc>The master key.</doc>
			</param>
			<param name="id" type="string">
				<doc>The id of thge campaign.</doc>
			</param>
			<param name="key" type="string">
				<doc>The key for the new campaign.</doc>
			</param>
			<security>
				<rule name="MustHaveMasterKey" evidence="masterkey" />
			</security>
			<response>
				<doc>Success or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Encrypt a simple string.
					</doc>
					<param name="masterkey">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGCOMPLETE</param>
					<param name="id">E5C161D198405477EFB95EAE800AD7E4-8</param>
					<param name="key">d19c46b0-690e-4a82-ac3e-0f885fd40d4c</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="new_audio_metadata_template" runat="server" enabled="true" object="campaign" operation="read" group="admin">
			<doc>
				<short>Add a new audio metadata template target.</short>
				<full />
			</doc>
			<url>/new_audio_metadata_template/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application.</doc>
			</param>
			<param name="audio_target" type="AudioDefinition">
				<doc>The name of the audio target.</doc>
			</param>
			<param name="name" type="string">
				<doc>The template name</doc>
			</param>
			<param name="value" type="string">
				<doc>
					The template value
				</doc>
			</param>
			<security>
				<rule name="MustHaveAPIKey" evidence="key" />
			</security>
			<response>
				<doc>We return the encrypted string.</doc>
				<param name="id" type="AudioMetadataTemplateID">
					<doc>The ID of the audio metadata template.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Create a new Audio Metadata Template
					</doc>
					<param name="key">80bb71a1-131c-43c2-9bac-e27006051cd0</param>
					<param name="name">genre</param>
					<param name="value">Unearthed</param>
					<expect status="success">
						<param name="id" type="AudioMetadataTemplateID" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="new_audio_target" runat="server" enabled="true" object="campaign" operation="read" group="admin">
			<doc>
				<short>Add a new audio target.</short>
				<full />
			</doc>
			<url>/new_audio_target/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application.</doc>
			</param>
			<param name="name" type="string">
				<doc>The name of the audio target.</doc>
			</param>
			<param name="format" type="Format">
				<doc>
					The audio format
				</doc>
			</param>
			<param name="channels" type="integer">
				<doc>
					The number of audio channels
				</doc>
			</param>
			<param name="bitrate" type="integer">
				<doc>The audio bitrate in bits per second</doc>
			</param>
			<param name="samplerate" type="integer">
				<doc>The audio samplerate in Hz.</doc>
			</param>
			<param name="filenamemask" type="string" default="{id}">
				<doc>The filename mask.</doc>
			</param>
			<security>
				<rule name="MustHaveAPIKey" evidence="key" />
			</security>
			<response>
				<doc>We return the encrypted string.</doc>
				<param name="id" type="AudioDefinitionID">
					<doc>The ID of the server.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Create a new Audio Format that we want to transcode too.
					</doc>
					<param name="key">80bb71a1-131c-43c2-9bac-e27006051cd0</param>
					<param name="name">mp3_128k</param>
					<param name="format">mp3</param>
					<param name="channels">2</param>
					<param name="bitrate">128000</param>
					<param name="samplerate">44100</param>
					<param name="filenamemask">{id}</param>
					<expect status="success">
						<param name="id" type="ServerID" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="new_campaign" runat="server" enabled="true" object="campaign" operation="read" group="admin">
			<doc>
				<short>Creates the campaign with the supplied key.</short>
				<full />
			</doc>
			<url>/new_campaign/</url>
			<param name="masterkey" type="MasterKey" evidence="true">
				<doc>The master key.</doc>
			</param>
			<param name="key" type="string" optional="true">
				<doc>The API key for the campaign. If this is not supplied, one will be created for you.</doc>
			</param>
			<param name="name" type="string">
				<doc>The name of the campaign.</doc>
			</param>
			<param name="description" type="string" optional="true">
				<doc>The description of the campaign.</doc>
			</param>
			<param name="url" type="string" optional="true">
				<doc>
					The url for the campaign website. We will use the domain of this as the basis for all the other public urls.
					If this is not supplied, then we will use the http://%THUMBWHEREBASEDOMAIN%/%campaign.name% as the base.
				</doc>
			</param>
			<param name="email" type="string" optional="true">
				<doc>Email that the campaign can send notifications to.</doc>
			</param>
			<security>
				<rule name="MustHaveMasterKey" evidence="masterkey" />
			</security>
			<response>
				<doc>We return the encrypted string.</doc>
				<param name="key" type="APIKey">
					<doc>The key for this campaign. Used to adminster the campaign.</doc>
				</param>
				<param name="id" type="string">
					<doc>The id for the campaign.</doc>
				</param>
				<param name="rsa" type="RSA">
					<doc>The private RSA key.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Create a new campaign.
					</doc>
					<param name="masterkey">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGCOMPLETE</param>
					<param name="key">80bb71a1-131c-43c2-9bac-e27006051cd0</param>
					<param name="name">Music Competition</param>
					<param name="description">Submit a track, best one wins a prize!</param>
					<expect status="success">
						<param name="key" type="APIKey">80bb71a1-131c-43c2-9bac-e27006051cd0</param>
						<param name="id" type="APIKey">80bb71a1-131c-43c2-9bac-e27006051cd0</param>
						<param name="rsa" type="string" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="new_server" runat="server" enabled="true" object="campaign" operation="read" group="admin">
			<doc>
				<short>Create a new server and assigns it to the campaign.</short>
				<full />
			</doc>
			<url>/new_server/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application.</doc>
			</param>
			<param name="name" type="string">
				<doc>The name of the server.</doc>
			</param>
			<param name="public_url" type="string">
				<doc>
					The public facing url that uploded content will be accessible under. 

					This is the url that goes into public feeds.
				</doc>
			</param>
			<param name="test_url" type="string">
				<doc>
					The internal facing url that uploded content will be accessible under.

					This is the url used internally to access the files.
				</doc>
			</param>
			<param name="upload_url" type="string">
				<doc>
					Where we upload our content to.
				</doc>
			</param>
			<param name="server_media_type" type="ServerMediaType">
				<doc>The media that we will store on this server.</doc>
			</param>
			<security>
				<rule name="MustHaveAPIKey" evidence="key" />
			</security>
			<response>
				<doc>We return the encrypted string.</doc>
				<param name="id" type="ServerID">
					<doc>The ID of the server.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Create a new campaign.
					</doc>
					<param name="key">80bb71a1-131c-43c2-9bac-e27006051cd0</param>
					<param name="name">audio</param>
					<param name="public_url">http://audio.localhost.thumbwhere.com</param>
					<param name="upload_url">ftp://ftpuser:ftppassword@ftp.localhost.thumbwhere.com/audio/</param>
					<param name="server_media_type">audio</param>
					<expect status="success">
						<param name="id" type="ServerID" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="user_exists" runat="server" enabled="true" object="campaign" operation="read" group="security">
			<doc>
				<short>Used to determine if a user already exists.</short>
				<full />
			</doc>
			<url>/account_exists/</url>
			<param name="masterkey" type="MasterKey" evidence="true">
				<doc>The master key.</doc>
			</param>
			<param name="email" type="string">
				<doc>The email of the user</doc>
			</param>
			<security>
				<rule name="MustHaveMasterKey" evidence="masterkey" />
			</security>
			<response>
				<doc>We return the a flag.</doc>
				<param name="exists" type="boolean">
					<doc>True if the user exists.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Does this user already exist?
					</doc>
					<param name="masterkey">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGCOMPLETE</param>
					<param name="email">james@massive.com.au</param>
					<expect status="success">
						<param name="user" type="string">
							<doc>The returned user key.</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="user_recover" runat="server" enabled="true" object="campaign" operation="read" group="security">
			<doc>
				<short>Changes password and send it to the user.</short>
				<full />
			</doc>
			<url>/user_recover/</url>
			<param name="masterkey" type="MasterKey" evidence="true">
				<doc>The master key.</doc>
			</param>
			<param name="email" type="string">
				<doc>The email of the user</doc>
			</param>
			<security>
				<rule name="MustHaveMasterKey" evidence="masterkey" />
			</security>
			<response>
				<doc>We return the a flag.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Change the password and email it to the user.
					</doc>
					<param name="masterkey">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGCOMPLETE</param>
					<param name="email">james@massive.com.au</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
	</actions>
	<actions version="V1.1" service="Application">
		<action name="member_update_mediaitem" runat="server" enabled="true" object="member" operation="update" group="mediaitems">
			<doc>
				<short>Updates a MediaItems's information</short>
				<full>
					If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/member_update_mediaitem/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member making this change. This member must own this media item to make the change.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="subject">
				<doc>
					(optional) The subject text for the media item.
				</doc>
			</param>
			<param name="body">
				<doc>
					(optional) The body text of the media item.
				</doc>
			</param>
			<param name="privacy">
				<doc>
					(optional) 0 = in all feeds, 1 = only in member feeds and identity feeds, 2 = only in identity feeds, 3 or above - not in any feeds
				</doc>
			</param>
			<param name="filter">
				<doc>
					(optional)  If this is true (default is false) then the subject and body will be filtered by the global and campaign specific user generated content filters.
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">This Is A Better Subject</param>
					<param name="body">This is a Beter Body</param>
					<expect status="success" />
				</scenario>
				<scenario name="simple">
					<doc>
						Only update privacy
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="privacy">0</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_list_mediaitem_transformations" runat="server" enabled="true" object="member" operation="enumerate" group="mediaitems">
			<doc>
				<short>Returns a list of all the transformations for a media item</short>
				<full />
			</doc>
			<url>/member_list_mediaitem_transformations/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					long - The media item we want to get all the transformations for
				</doc>
			</param>
			<response>
				<doc>
					A list of all the transformations for a media item
				</doc>
				<param name="url">
					<doc>
						The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_mediaitem_transformation" runat="server" enabled="true" object="member" operation="create" group="mediaitems">
			<doc>
				<short>Adds a transformation to a media item</short>
				<full>
					All newly added transformations get added to the end. A transformation consists of two strings a #type# and an optional #argument#.
				</full>
			</doc>
			<url>/member_add_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					long - The media item we want to add the translation to.
				</doc>
			</param>
			<param name="type">
				<doc>
					string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
					string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Adds a 'rotate left' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Adds a 'mirror' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Adds a 'caption bottom' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_mediaitem_transformation" runat="server" enabled="true" object="member" operation="update" group="mediaitems">
			<doc>
				<short>Sets the type and argument of the specified translation.</short>
				<full />
			</doc>
			<url>/member_set_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the member who owns this mediaitem that the transformation is being added to.
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
					long - The transformation we want to update
				</doc>
			</param>
			<param name="type">
				<doc>
					string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
					string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc>
					A list of all the transformations for a media item
				</doc>
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_delete_mediaitem_transformation" runat="server" enabled="true" object="member" operation="delete" group="mediaitems">
			<doc>
				<short>Deletes a transformation for a specified media item</short>
				<full />
			</doc>
			<url>/member_delete_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
					long - The transformation we want to delete
				</doc>
			</param>
			<response>
				<doc>
					Simple success or failure.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_mediaitem_comment" runat="server" enabled="true" object="member" operation="write" group="mediaitems">
			<doc>
				<short>Add a comment to an existing media item.</short>
				<full />
			</doc>
			<url>/member_add_mediaitem_comment/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="mediaitem_id">
				<doc>Ths id of the mediaitem that we are adding this comemnt to</doc>
			</param>
			<param name="subject">
				<doc>The subject of the comment</doc>
			</param>
			<param name="body">
				<doc>The body of the comment</doc>
			</param>
			<response>
				<doc />
				<param name="mediaitem_id">
					<doc>
						The created comment
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add Comment
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">Hello</param>
					<param name="body">Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Add a friend.</short>
				<full />
			</doc>
			<url>/member_add_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to add.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_friend">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Remove a friend.</short>
				<full />
			</doc>
			<url>/member_remove_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to remove.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_member_token_friend">5B36AAC5-B600-4A89-85AF-5F5F4BDA103F</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Add a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_add_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to trust.</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<param name="proxy">
				<doc>If true then this trusted member can act as a proxy for the trusting member</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<param name="proxy">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Remove a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_remove_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to remove from a trusted relationship</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Reset password of the member.</short>
				<full>Used to reset the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_reset_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_reset_identity_secret^. If you want to reset both id and secret at the same time, use ^member_reset_identity_credentials^.</full>
			</doc>
			<url>/member_reset_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Get a summary of the member.</short>
				<full />
			</doc>
			<url>/member_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or application</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for the memer we want a summary of</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code_by_identity_id" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code_by_identity_id/</url>
			<param name="master_key">
				<doc>Master key for this instance of ThumbWhere</doc>
			</param>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="id">
				<doc>
					Identity id
				</doc>
			</param>
			<param name="type">
				<doc>
					Identity type
				</doc>
			</param>
			<param name="alphabet">
				<doc>
					string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
					integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
						The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
						Request code for a member token based on an identity id
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">member</param>
					<param name="id">drmiaow</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member token that you want turned into a lookup code
				</doc>
			</param>
			<param name="alphabet">
				<doc>
                    string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
                    integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_lookup_code" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Returns an #api_member_token# associated with a lookup #code#</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_lookup_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to lookup.
				</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_revoke_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>If the supplied #code# exists, it is deleted.</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_revoke_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to revoke.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_value" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the value from the name value pair collection for the competition specified by #key".</short>
				<full />
			</doc>
			<url>/competition_get_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_value" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the value of the name value pair for a competition.</short>
				<full />
			</doc>
			<url>/competition_set_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the value of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_values" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the values from the name values pair for the competitions external application.</short>
				<full>                                      
					   The competition must be a competition of the external application.
					   The returned values is encrypted with the cruds encryption key.
				</full>
			</doc>
			<url>/competition_get_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_values" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the values of the name values pair for an competition who is a competition of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The competition must be a competition of the external application.					   
				</full>
			</doc>
			<url>/competition_set_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="moon">james2</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_add_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Adds a name value pair definition to a competition.</short>
				<full>This is shared across all competitions for this campaign.</full>
			</doc>
			<url>/competition_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Deletes a name value pair definition for a competition.</short>
				<full>This will delete the name value pair definition called #name# and all values of #name# across all competitions for this campaign.</full>
			</doc>
			<url>/competition_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_summary" runat="server" enabled="true" object="competition" operation="read" group="crud">
			<doc>
				<short>Get a summary of the competition. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/competition_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The Key for competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified competition
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_create_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Create a new round for a competition.</short>
				<full />
			</doc>
			<url>/competition_create_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_update_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Update an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_update_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the specified round.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Delete an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_delete_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete the specified round
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_add_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Adds a name value pair definition for an application.</short>
				<full>This is shared across all campaigns that use this application.</full>
			</doc>
			<url>/application_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_delete_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Deletes a name value pair definition for an application.</short>
				<full>This will delete the name value pair definition and values for all applications across all campaigns that use this applicaton.</full>
			</doc>
			<url>/application_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_get_summary" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Get a summary of the application. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/application_get_summary/</url>
			<param name="api_key">
				<doc>The API key for external application.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified application
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_username" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update username of the member.</short>
				<full>Used to change the username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the password of the member, use ^member_update_password^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_username/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the username of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the username of.</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the username of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_label" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity label of the identity for a member.</short>
				<full>An identity label provides a human readable label for an identity. The 'type' might be 'twitterv2api' but the label would be 'Twitter'</full>
			</doc>
			<url>/member_update_identity_label/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity.</doc>
			</param>
			<param name="label">
				<doc>The identity label that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the identity label for an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="label">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_id" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="id">
				<doc>The identity id that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="id">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Create an identity for this member.</short>
				<full />
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="type">
				<doc>The identity type.</doc>
			</param>
			<param name="id">
				<doc>The identity id.</doc>
			</param>
			<param name="secret">
				<doc>The identity secret.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="type">mobile_email</param>
					<param name="id" />
					<param name="secret">blah</param>
					<expect status="success">
						<param name="api_identity_token">
							<doc>The api identity token - the represents this identity wrt this api key</doc>
						</param>
						<param name="id">
							<doc>The id of the identity</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_delete" runat="server" enabled="true" object="member" operation="delete" group="crud">
			<doc>
				<short>Delete the specified Member.</short>
				<full>Marks a member as deleted - eventualy this member is purged from the database.</full>
			</doc>
			<url>/member_delete/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete this member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_login" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and a username and password pair</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<expect status="success">
						<param name="api_member_token">
							<doc>Anonymous</doc>
						</param>
						<param name="api_member_token">
							<doc>The name of the member</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_login_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and an identity.</short>
				<full>This call takes the type, id and secret of an identity and returns the member that owns this identity. If you want to authenticate against the member credentials use type of 'thumbwhere'.</full>
			</doc>
			<url>/member_login_identity/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="type">
				<doc>The type of identity that you want to login as.</doc>
			</param>
			<param name="id">
				<doc>The id of the identity that you want to login as.</doc>
			</param>
			<param name="secret">
				<doc>The secret of the identity you want to login as. You must prove you are who you say you are by providing the secret.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member in the context of the API key.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API identity token for this Member's identity.</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member using the internal 'thumbwhere' identity.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">thumbwhere</param>
					<param name="id">james</param>
					<param name="secret">james</param>
					<expect status="success">
						<param name="username">
							<doc>The name of the member</doc>
						</param>
						<param name="api_member_token">
							<doc>A unique token that represents this member in the context of the API key.</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_username_available" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Return true if the proposed #username# is available.</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="available">
					<doc>True if the username is available, false if it is not</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<expect status="success">
						<param name="available">
							<doc>True if the username is available, false if it is not</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_credentials" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update credentials of the member.</short>
				<full>Used to change the password and username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update just the username of the member, use ^member_update_username^. If you want to update just the password, use ^member_update_password^.</full>
			</doc>
			<url>/member_update_credentials/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the credentials of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the credentials of..</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update username and password of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<param name="new_password">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update password of the member.</short>
				<full>Used to change the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the password of.</doc>
			</param>
			<param name="password">
				<doc>The current password of the member you want to change the password of.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Adds a member to the application and sets the values of the name value pairs.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_add_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="application_id">
				<doc>he application key for the application that we want to add the member to.</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The api member key for the member for this application.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Removes a member from an application.</short>
				<full />
			</doc>
			<url>/member_remove_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_test_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Tests a Member's subscription to an application</short>
				<full>
					This will perform a test of an application using a Member's name value pairs.
					Eg. For Twitter it will end up calling the 'login' API call provided by Twitter to ensure that the 
					details provided will work.
				</full>
			</doc>
			<url>/member_test_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple test.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_bandwidthusage_create" runat="server" enabled="true" object="campaign" operation="update" group="reporting">
			<doc>
				<short />
				<full />
			</doc>
			<url>/campaign_bandwidthusage_create/</url>
			<param name="api_key">
				<doc />
			</param>
			<param name="api_member_token">
				<doc />
			</param>
			<param name="actor">
				<doc />
			</param>
			<param name="action">
				<doc />
			</param>
			<param name="target">
				<doc />
			</param>
			<param name="magnitide">
				<doc />
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc />
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="actor">Colonel Mustard</param>
					<param name="action">Lead Pipe</param>
					<param name="target">Reverend Green</param>
					<param name="magnitude">11</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_get_summary" runat="server" enabled="true" object="campaign" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>
					The member must be a member of the external application.
					The returned values are encrypted with the applications encryption key if they are specified as encrypted over the wire in the name value pair definitions for this application.
				</full>
			</doc>
			<url>/campaign_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<response>
				<doc />
				<param name="name">
					<doc>
						The name of the campaign
					</doc>
				</param>
				<param name="description">
					<doc>
						 The name of the description						
					</doc>
				</param>
				<param name="apps" array="true" type="app">
					<doc>
						Collection of applications
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
						Request summary for the specified campaign.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the compeitionwinner flag for a competition entry.</short>
				<full>Sets the value for the entry competitionwinner attribute which is used to signify that this entry is the winner of a round.</full>
			</doc>
			<url>/competition_entry_set_competitionwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionwinner.</doc>
			</param>
			<param name="competitionwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure in generic status element.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition winner
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the competitionfinalist flag for a competition entry.</short>
				<full>
                Sets the value for the entry competitionfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_competitionfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionfinalist.</doc>
			</param>
			<param name="competitionfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundwinner flag for a competition entry.</short>
				<full>          
                Sets the value for the entry roundwinner attribute which is used to signify that this entry is the winner of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundwinner.</doc>
			</param>
			<param name="roundwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the round winner.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundfinalist flag for a competition entry.</short>
				<full>              
                Sets the value for the entry roundfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundfinalist.</doc>
			</param>
			<param name="roundfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as round finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_approved" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the approved flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_approved/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="approved">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as approved.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="approved">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_deleted" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the deleted flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_deleted/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="deleted">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as deleted.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="deleted">true</param>
					<expect status="sucess">
						<doc>No data returned - Simple sucess or failure.</doc>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_rejected" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the rejected flag for a competition entry.</short>
				<full>          
                    Marks an entry as rejected.
				</full>
			</doc>
			<url>/competition_entry_set_rejected/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="rejected">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as rejected.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="rejected">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote_confirm" runat="server" enabled="true" object="competition" operation="update" group="vote">
			<doc>
				<short>Confirms a vote on an entry in a competition.</short>
				<full>                      
                    This is normally used via SMS or via an email form as a way og making sure that the vote was made from a real email address or mobile phone.
				</full>
			</doc>
			<url>/competition_vote_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="vote_confirmation_code">
				<doc>The code that can be used to validate a vote..</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm a vote.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="vote_confirmation_code">g1gpwa</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote" runat="server" enabled="true" object="competition" operation="create" group="vote">
			<doc>
				<short>Votes for an entry in a competition.</short>
				<full>                                                  
                    This creates a pending vote for an entry in a competition. A code is returned. The vote will not be counted unless it is confirmed by a call to ^competition_vote_confirm^.
				</full>
			</doc>
			<url>/competition_vote/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>Represents the member doing the voting.</doc>
			</param>
			<param name="code">
				<doc>The code that represnts a vote for an entry in a competition.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Vote for an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">???</param>
					<param name="code">???</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create" runat="server" enabled="true" object="member" operation="create" group="crud">
			<doc>
				<short>Creates a new Member.</short>
				<full>                                                              
                    If a parameter is not provided, then the correponding field is not updated from the defaults. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/member_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="salutation">
				<doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
				</doc>
			</param>
			<param name="username">
				<doc>
                    String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<param name="password">
				<doc>
					String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<response>
				<doc>Returns an API Member Token.</doc>
				<param name="api_member_token">
					<doc>
                        API Member Token that represents this member making this change. This API Member Token is linked to the #api_key# that made this call and will not be valiud when used with a different API Key.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Member Creation
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--action name="member_update" runat="server" enabled="true" object="member" operation="update" group="crud" >
            <doc>   
                <short>Updates a Member's information.</short>
                <full>              
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
                </full>
            </doc>
            <url>/member_update/</url>

            <param name="api_key">
                <doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
            </param>

            <param name="api_member_token"  >
                <doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
                </doc>
            </param>

            <param name="email">
                <doc>
                    String - The email address for the membmer. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="salutation">
                <doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
                </doc>
            </param>            

            <param name="username">
                <doc>
                    String - The display name for the user - We do not check for uniqueness.
                </doc>
            </param>            


            <param name="firstname">
                <doc>
                    String - The first name of the member
                </doc>
            </param>            

            <param name="lastname">
                <doc>
                    String - The last name of the member
                </doc>
            </param>            

            <param name="phonemobile">
                <doc>
                    String - The mobile phone number for the member. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="postalpostcode">
                <doc>
                    String - The postcode for the user for their postal address
                </doc>
            </param>            

            <param name="receiveupdates">
                <doc>
                    Boolean - Wether of not the member wants to recieve updates.
                </doc>
            </param>    

            <response>
                <doc>No data returned - Simple sucess or failure.</doc>
            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Member Update
                    </doc>

                    <param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
                    <param name="api_member_token"/>
                    <param name="email">james@massive.com.au</param>
                    <param name="receiveupdates">false</param>
                    <param name="username">DrMiaow</param>
                    <param name="firstname">James</param>
                    <param name="lastname">Mc Parlane</param>
                    <param name="phonemobile">+1-000-000-000</param>
                    <param name="postalpostcode">2204</param>
                    <param name="postalstate">NSW</param>

                    <expect status="success">                                           
                    </expect>   

                </scenario>             
            </scenarios>

        </action-->
		<action name="member_get_feed" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the url for a Member's feed.</short>
				<full />
			</doc>
			<url>/member_get_feed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					The api member token for the member
				</doc>
			</param>
			<param name="type">
				<doc>
					The type of the feed
				</doc>
			</param>
			<response>
				<doc>
					Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
						The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="type">html</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
						Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_url" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #member# using their member id.</short>
				<full>                                      
                    Returns the URL for the specified #member#

                    This function is in the API for convenience. It is possible to calculate the url for a member.

                    From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                    Then take the member id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                    Then take the member and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                    If you add all these together you end up with 

                    http://core.thumbwhere.com/members/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="member">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_value" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the value from the name value pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned value is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_value" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the value of the name value pair for an member who is a member of an external application.</short>
				<full>                                      
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_error" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the error flag for a member in an application.</short>
				<full>
					This is called by external applications when they want to signify that there has been a error that requires the members attention. Eg. If they change their Twitter password so we can't make posts to Twitter on their behalf any more because the password we have is out of date.
				</full>
			</doc>
			<url>/member_set_application_error/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="error">
				<doc>
					bool - the value of the failed flag.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Set a Member's error flag.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="error">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_values" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_values" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the values of the name values pair for an member who is a member of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_campaign_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member in the campaign
				</doc>
			</param>
			<response>
				<doc />
				<param name="username">
					<doc>
                        The username of the member.
					</doc>
				</param>
				<param name="apps" type="array" class="app">
					<doc>
                        Collection of app element descriptions
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_move_between_members" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Moves a media item from one member to another. It will end up in the 'member' identity in the destination</short>
				<full />
			</doc>
			<url>/mediaitem_move_between_members/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token_from">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="api_member_token_to">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token_from">86f656f8-0bd0-4e87-b947-79f95aa2165f</param>
					<param name="api_member_token_to">0638a6a9-a041-45bd-ace4-eaea85a6c985</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_update" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Updates a MediaItems's information</short>
				<full>          
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/mediaitem_update/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="subject">
				<doc>
                    (optional) The subject text for the media item.
				</doc>
			</param>
			<param name="body">
				<doc>
					(optional) The body text of the media item.
				</doc>
			</param>
			<param name="privacy">
				<doc>
					(optional) 0 = in all feeds, 1 = only in member feeds and identity feeds, 2 = only in identity feeds, 3 or above - not in any feeds
				</doc>
			</param>
			<param name="filter">
				<doc>
					(optional)  If this is true (default is false) then the subject and body will be filtered by the global and campaign specific user generated content filters.
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">This Is A Better Subject</param>
					<param name="body">This is a Beter Body</param>
					<expect status="success" />
				</scenario>
				<scenario name="simple">
					<doc>
						Only update privacy
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="privacy">0</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_get_url" runat="server" enabled="true" object="mediaitem" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #mediaitem#</short>
				<full>

                        This function is in for convenience. It is possible to calculate the url for a media item.

                        From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                        Then take the mediaitem id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                        Then take the mediaitem and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                        If you add all these together you end up with 

                        http://core.thumbwhere.com/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/mediaitem_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the mediaitem. If #redirect# is true, then this will actually redirect you to the Media Item's XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_list_transformations" runat="server" enabled="true" object="mediaitem" operation="enumerate" group="transformation_id">
			<doc>
				<short>Returns a list of all the transformations for a media item</short>
				<full />
			</doc>
			<url>/mediaitem_list_transformations/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to get all the transformations for
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_add_transformation" runat="server" enabled="true" object="mediaitem" operation="create" group="transformation_id">
			<doc>
				<short>Adds a transformation to a media item</short>
				<full>
                    All newly added transformations get added to the end. A transformation consists of two strings a #type# and an optional #argument#. 
				</full>
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to add the translation to.
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Adds a 'rotate left' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Adds a 'mirror' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Adds a 'caption bottom' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_transformation" runat="server" enabled="true" object="mediaitem" operation="update" group="transformation_id">
			<doc>
				<short>Sets the type and argument of the specified translation.</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to update the transformation for.
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
                    long - The transformation we want to update
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_transformation" runat="server" enabled="true" object="mediaitem" operation="delete" group="transformation_id">
			<doc>
				<short>Deletes a transformation for a specified media item</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to delete the transformation from
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
                    long - The transformation we want to delete
				</doc>
			</param>
			<response>
				<doc>
                    Simple success or failure.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_rate" runat="server" enabled="true" object="mediaitem" group="ratings" operation="update">
			<doc>
				<short>Adds a rating to a MediaItem</short>
				<full>When called this returns the latest calculated rating of the media item.</full>
			</doc>
			<url>/mediaitem_rate/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    Optional API Member Token that represents the member making this rating. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="score">
				<doc>
                    The rating score. If the rating was 3 out of 5 stars, then this valur would be 3.
				</doc>
			</param>
			<param name="maxscore">
				<doc>
                    The rating maxscore. What the rating is "out of" If the rating was 3 out of 5 stars, then this value would be 5. 
				</doc>
			</param>
			<param name="ipaddress">
				<doc>
                    The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie">
				<doc>
                    A unique identifier. We ignore any ratings for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason">
				<doc>
                    A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the newly calculated rating for the media item.
				</doc>
				<param name="rating">
					<doc>
                        The actual rating for this media item.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="score">1</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
                        Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="score">3</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_viewed" runat="server" enabled="true" object="mediaitem" group="metrics" operation="update">
			<doc>
				<short>Increments the viewcount for a #mediaitem#</short>
			</doc>
			<url>/mediaitem_viewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are incrementing
				</doc>
			</param>
			<response>
				<doc>
					Returns the latest tally of views of the media item.
				</doc>
				<param name="mediaitem_id">
					<doc>The mediaitem that we incremented.</doc>
				</param>
				<param name="views">
					<doc>The latest number of views.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Increment numer of views
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="views" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_complain" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Adds a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_complain/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					Optional API Member Token that represents the member making this complaint. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="ipaddress" optional="true">
				<doc>
					The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie" optional="true">
				<doc>
					A unique identifier. We ignore any complaints for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason" optional="true">
				<doc>
					A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
					Returns the newly calculated rating for the media item.
				</doc>
				<param name="complaint_id">
					<doc>
						The id of the complaint created
					</doc>
				</param>
				<param name="complaints">
					<doc>
						The current number of complaints for this mediaitem
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reason">Offends my value system</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
						Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="reason">This bird wets it's nest</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_complaint" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Deletes a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_delete_complaint/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="mediaitemcomplaint_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="mediaitemcomplaint_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_censored" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'censored' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_censored/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the censored flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="censored">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_reviewed" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'reviewed' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_reviewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the 'reviewed' flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reviewed">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_create" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>Creates a single use ticket that can be used to upload content directly into thumbwhere. </short>
				<full>
                        This create an upload ticket that can be used with ^mediaitem_upload_push^.
				</full>
			</doc>
			<url>/mediaitem_upload_push_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
				</doc>
			</param>
			<param name="api_identity_token">
				<doc>
                    API Identity Token that we want the newly created media item to appear to be submitted by (eg. The mobile phone identity, or the Flikr identity).
				</doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<param name="maxsize" optional="true" default="10485760">
				<doc>The maximum size in bytes of file that we are allowed to upload.</doc>
			</param>
			<response>
				<doc>The upload ticket.</doc>
				<param name="ticket">
					<doc>The upload push ticket</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token" />
					<param name="api_identity_token" />
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">testdata</param>
					<param name="privacy">0</param>
					<param name="license">-1</param>
					<param name="maxsize">10485760</param>
					<expect status="success">
						<param name="ticket" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>
                    Uploads a media item directly into ThumbWhere
				</short>
				<full>
                        Allows you to peform a HTTP POST file upload directly into ThumbWhere. The media item that is created is based on the meta-data 
                        supplied in the call to ^mediaitem_upload_push_create^.
				</full>
			</doc>
			<url>/mediaitem_upload_push/</url>
			<param name="ticket">
				<doc />
			</param>
			<param name="file" upload="true">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="ticket" />
					<param name="file" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_query" runat="server" enabled="true" object="mediaitem" operation="read" group="upload">
			<doc>
				<short>Queries the status of an upload push in progress.</short>
				<full>Returns the status, number of bytes uploaded so far and the data rate.</full>
			</doc>
			<url>/mediaitem_upload_push_query/</url>
			<param name="ticket">
				<doc />
			</param>
			<response>
				<doc>Returns the status, number of bytes uploaded so far and the data rate.</doc>
				<param name="api_member_token">
					<doc>The API Member token of the member that has uploaded this media item.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API Identity token that was used to upload this media item.</doc>
				</param>
				<param name="member">
					<doc>The ID of the member that has uploaded this media item.</doc>
				</param>
				<param name="member_url">
					<doc>XML to the members XML feed.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was created when this file was uploaded.</doc>
				</param>
				<param name="size">
					<doc>The number of bytes that have been uploaded..</doc>
				</param>
				<param name="started">
					<doc>The time at which this upload started.</doc>
				</param>
				<param name="completed">
					<doc>The time at which this upload was completed..</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Query - Requires valid ticket
					</doc>
					<param name="ticket" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_confirm" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Confirms a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_query" runat="server" enabled="true" object="competition" operation="read" group="entry">
			<doc>
				<short>Queries a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_query/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Query a pending competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_create" runat="server" enabled="true" object="competition" operation="create" group="entry">
			<doc>
				<short>Creates an competition entry</short>
				<full>Takes a media item and enters it into a competition.</full>
			</doc>
			<url>/competition_entry_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.</doc>
			</param>
			<param name="round">
				<doc>The id of the competition round that we are adding this media item to</doc>
			</param>
			<param name="mediaitem_id">
				<doc>The id of the mediaitem being entered into the competition</doc>
			</param>
			<param name="approved">
				<doc>If this is true then the entry is created as approved. If you leave this parameter out the entry will be by default unapproved.</doc>
			</param>
			<response>
				<doc>Returns the code needed to approve/reject and vote for the entry..</doc>
				<param name="votecode">
					<doc>The code that is used to approve and vote for this entry.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Create a competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">89b4e3cb-38da-4907-aefa-316f99baf4f4</param>
					<param name="round">2</param>
					<param name="mediaitem_id">77</param>
					<expect status="success">
						<param name="votecode" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_login" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Login using an #api_key#/#api_member_token# pair.</short>
				<full>This is used to provide the same response as a normal username/password login (using ^member_login^ and ^member_login_identity^) from just the #api_member_token#</full>
			</doc>
			<url>/api_member_token_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API Member Token that we want to login as.</doc>
			</param>
			<response>
				<doc>The name of the Member and a direct url to their XML feed.</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="feedurl">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Login as member using the saved member token
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">d6029931-d37a-4dd2-8075-e6a41f4d5187</param>
					<expect status="success">
						<param name="username">
							<doc>Anonymous</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="invite" runat="server" enabled="true" object="application" operation="write" group="invite">
			<doc>
				<short>Creates an invitation that can be sent out to the provided #email#.</short>
				<full>Invitations are associated with the provided #api_key#</full>
			</doc>
			<url>/invite/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="email">
				<doc>The email adddress to add the invitation to.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure..</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Invite james to use the application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="email">james@massive.com.au</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_validate" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Validates #api_identity_token# and returns its current state.</short>
				<full>An API Identity Token or an API Key can be 'revoked' due to abuse.</full>
			</doc>
			<url>/api_identity_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Identity Token to validate.</doc>
			</param>
			<response>
				<doc>Returns the state of the API Identity Token.</doc>
				<param name="state">
					<doc>The state of the API Identity Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Identity Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_query" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API identity token request.</short>
				<full>
                This should be performed after a call to ^api_identity_token_request^ and should pass in the code returned by that call. 
                 The api identity_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_identity_token_request^.
				</full>
			</doc>
			<url>/api_identity_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>
                        Returns the status of the request, its expiry time in seconds and if it has been completed, the API Identity Token itself.
				</doc>
				<param name="request">
					<doc>If the API Identity Token is ready for use, this will be 'ready' and the #api_identity_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Identity Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Requests an API Identity Token.</short>
				<full>
                        After making the request, you need complete the request with a call to ^api_identity_token_request_authenticate^. This call should only be made if you are satisfed that the identity 
                        has been proven to belong to the person asserting that they own it.         
                        If this identity is a mobile phone, you have the option to SMS or MMS #code# to #number# to complete the request.
                        Once the request is completed, make a call to ^api_identity_token_request_query^ with the returned #code# as a parameter to get the #api_identity_token# and the #api_member_token#.
				</full>
			</doc>
			<url>/api_identity_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="api_member_token">
				<doc>Member that this identity will be added to. If this is blank and this is not a pre-existing member then a new member will be created after this request is completed</doc>
			</param>
			<param name="id">
				<doc>The identity id - eg email address or mobile phone number.</doc>
			</param>
			<param name="type">
				<doc>The identity type</doc>
			</param>
			<response>
				<doc>If #type# is 'mobile' it will return with the #code# that needs to be SMSed to the provided #number#.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_identity_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_identity_token_request_query^ should return the new API identity_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Assert that you own the email address drmiaow@gmail.com
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">eb21b2a8-3f3c-49ba-8c5a-f0f9d511f68b</param>
					<param name="id">drmiaow@gmail.com</param>
					<param name="type">email</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_authenticate" runat="server" enabled="true" object="identity" operation="create" group="tokens">
			<doc>
				<short>Authenticates an API Identity Token Request made by a previous call to ^api_identity_token_request^.</short>
				<full>This enables an application to vouch for the validity of an Identity.</full>
			</doc>
			<url>/api_identity_token_request_authenticate/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>Returns with the api_identity_token that has been created for the corresponding member represented by the api_member_token</doc>
				<param name="api_identity_token">
					<doc>This is the api identity token that was created or found matching the original request..</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This be the same as the one supplied to ^api_identity_token_request^, or if one was supplied, it will be a be for a newly created Member.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_validate" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Validates #api_member_token# and returns its current state. An API Member Token or an API Key can be 'revoked' due to abuse. </short>
			</doc>
			<url>/api_member_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Member Token to validate.</doc>
			</param>
			<response>
				<doc>The state of the API Member Token.</doc>
				<param name="state">
					<doc>The state of the API Member Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Member Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request_query" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API request.</short>
				<full>
                    This should be performed after a call to ^api_member_token_request^ and should pass in the code returned by that call. 
                    The api member_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_member_token_request^.
				</full>
			</doc>
			<url>/api_member_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Member Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_member_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_member_token_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the current API Member Token request</doc>
				<param name="request">
					<doc>If the API Member Token is ready for use, this will be 'ready' and the #api_member_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Member Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Member Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Member Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Requests an API Member Token.</short>
				<full>After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_member_token_request_query^ with the returned #code# as a parameter.</full>
			</doc>
			<url>/api_member_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number that it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_member_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_member_token_request_query^ should return the new API member_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_validate" runat="server" enabled="true" object="application" operation="read" group="key">
			<doc>
				<short>Validates #api_key# and returns its current state</short>
				<full>An API key can be 'revoked' due to abuse. </full>
			</doc>
			<url>/api_key_validate/</url>
			<param name="api_key">
				<doc>
                    API Key for the registered application that is calling this method. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.
				</doc>
			</param>
			<response>
				<doc>Returns the state of the API Key.</doc>
				<param name="state">
					<doc>The state of the API Key.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Key
					</doc>
					<param name="api_key">27aba919-ac95-46f2-ad7d-e55c0373a7c1</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request_query" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Queries the state of an API Key request.</short>
				<full>              
                    This is a back end API call - this is not part of the public API. 

					This should be performed after a call to ^api_key_request^ and should pass in the code returned by that call. 
                    The api key details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_key_request^.
				</full>
			</doc>
			<url>/api_key_request_query/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_key_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_key_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the request and the number of seconds remaining.</doc>
				<param name="request">
					<doc>If the API Key is ready for use, this will be 'ready' and the #api_key# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Key request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_key">
					<doc>The API Key returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Key that will not exist
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="code">mamapda</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Requests an API Key for an external application. This will register the external application against the specified user.</short>
				<full>
						After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_key_request_query^ with the returned #code# as a parameter. 
						If the name and the URL is for an existing application then the api_key for that pre-existing application will be returned.
				</full>
			</doc>
			<url>/api_key_request/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="name">
				<doc>The name of the application to be registered.</doc>
			</param>
			<param name="url">
				<doc>The url of the application to be registsted.</doc>
			</param>
			<param name="description">
				<doc>A description for the application to be registered.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_key_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_key_request_query^ should return the new API key</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Test Application</param>
					<param name="url">http://app.thumbwhere.com.au/test</param>
					<param name="description">Test Application</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="location_get_identity_ad" runat="server" enabled="true" object="location" operation="read" group="advertising">
			<doc>
				<short>For the specified location and individial, return an ad tailored to that individual at that location.</short>
			</doc>
			<url>/location_get_identity_ad/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="location_type">
				<doc>The location type for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="location_id">
				<doc>The location id for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_type">
				<doc>The identity type for the identity of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_id">
				<doc>The identity id for the identity of the individual this ad is targeted at.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Return a location aware add targeted at an individual by an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="location_type">meter</param>
					<param name="location_id">1234</param>
					<param name="identity_type">verus</param>
					<param name="identity_id">567</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<!--
        <action name="track_message" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/track_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Mobile number of the user
                </doc>
            </param>


            <response>              
                <param name="tracking_id">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>             
            </response>


            <scenarios>             
                <scenario>
                    <doc>
                        Basic test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="mobile">61407909186</param>

                </scenario>
            </scenarios>



        </action>


        <action name="message_tracking_status" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/message_tracking_status/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="tracking_id">
                <doc>
                    your tracking id for this submission
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>     
--><!--

        <action name="incoming_feed" runat="server" enabled="false">
            <doc>
                Tells the server to start performing a bulk import of media from the specified url.
            </doc>

            <url>/incoming_feed/</url>

            <param name="provider_id">
                <doc>
                    The provider key
                </doc>
            </param>

            <param name="url">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <param name="build_date">
                <doc>
                    Date and time that this feed was constucted.
                </doc>
            </param>

            <param name="digest">
                <doc>
                    MD5 fingerprint for the entire feed
                </doc>
            </param>





            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>


        <action name="verify_user" runat="server" enabled="false">
            <doc>
                verify that a user has the following mobile number.
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>  

        <action name="login_member" runat="server" enabled="false">
            <doc>
                Login as a member
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="username">
                <doc>
                    Username of member
                </doc>
            </param>

            <param name="session">
                <doc>
                    the session id
                </doc>
            </param>            

            <param name="password">
                <doc>
                    MD5 password of user
                </doc>
            </param>

            <response>              
                <param name="username">
                    <doc>
                        The user name passed in
                    </doc>
                </param>             

                <param name="session">
                    <doc>
                        A session id for this user
                    </doc>
                </param>             

                <param name="id">
                    <doc>
                        The id of the user
                    </doc>
                </param>             

                <param name="api_member_token">
                    <doc>
                        An API token for this user
                    </doc>
                </param>             

            </response>


            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Login test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                    <param name="username">guest</param>
                    <param name="password">guest</param>

                    <expect status="error">                 
                        <param name="username">james</param>
                        <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                        <param name="id">-1</param>
                        <param name="api_member_token"/>
                    </expect>                   
                </scenario>             
            </scenarios>

        </action>                    

        <action name="new_member" runat="server" enabled="false">
            <doc>Creates a new member and assigns to a new campaign</doc>
            <url>/new_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="campaign_id">
                <doc>the session campaign to assign this member to</doc>
            </param>            
            <param name="username">
                <doc>Username of member</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|the pk_mediaitem of the users profile pic</doc>
            </param>            
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>

            <response />
        </action>   

        <action name="update_member" runat="server" enabled="false">
            <doc>Update a member</doc>
            <url>/update_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>       
            <response />
        </action>

        <action name="update_member_optional" runat="server" enabled="false">
            <doc>Update a member by optionally only giving the fields you want to update</doc>
            <url>/update_member_optional/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>      

            <param name="showbirthday" >
                <doc/>
            </param>
            <param name="occupation" >
                <doc/>
            </param>
            <param name="imhandle" >
                <doc/>
            </param>
            <param name="imname" >
                <doc/>
            </param>
            <param name="interestsgeneral" >
                <doc/>
            </param>
            <param name="interestsmusic" >
                <doc/>
            </param>
            <param name="interestsmovies" >
                <doc/>
            </param>
            <param name="intereststvshows" >
                <doc/>
            </param>
            <param name="interestsbooks" >
                <doc/>
            </param>
            <param name="aboutme" >
                <doc/>
            </param>


            <response />
        </action>

        <action name="member_send_message" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_send_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_write_whiteboard" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_write_whiteboard/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="body">
                <doc>the message body</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_message_mark_read" runat="server" enabled="false">
            <doc>mark a message as read</doc>
            <url>/member_message_mark_read/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="membermembermessage">
                <doc>the pk of the message to mark as read</doc>
            </param>            
            <response />
        </action>

        <action name="update_member_profile_picture" runat="server" enabled="false">
            <doc>Update a members profile picture</doc>
            <url>/update_member_profile_picture/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>the members ID</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|an ID</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign key</doc>
            </param>
        </action>
--><action name="mediaitem_upload_pull" runat="server" enabled="true" object="mediaitem" operation="create" group="upload">
			<doc>
				<short>Ingests a new media item into the server.</short>
				<full>
					Requires the media to be publicly accessible via the internet so that thumbwhere can download it.
					One of the paramaters supplied needs to be an md5 digest of the file you are uploading.
					This action will wait until the media item is uploaded before it returns. 
					This delay will depend on the network connection between the source and thumbwhere cloud.
				</full>
			</doc>
			<url>/mediaitem_upload_pull/</url>
			<param name="api_key">
				<doc>
                    API key for the registered application that is calling this method. An API key is provided to developers who have registered a campaign or a campaign application.
				</doc>
			</param>
			<param name="url">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested. This url must be publicy available. In the background, after this call returns, transcoding and feed generation for the media item will commence. </doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="campaign_id">
				<doc>The campaign that we want this item added to.</doc>
			</param>
			<param name="identity_key" optional="true">
				<doc>The identity key of the member uploading the file.</doc>
			</param>
			<param name="digest">
				<doc>An MD5 checksum to validate against. See the MetaWrap.Utility.MD5FileHash(string p_file_path) C# function.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<response>
				<param name="mediaitem_id">
					<doc>id of the license in use</doc>
				</param>
				<param name="url">
					<doc>The url of the xml feed to the new media item. It may be a few seconds before this is published. There are ways of being notified that a media item is fully injested via application callbacks.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple jpeg">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="url">http://www.massive.com.au/projects/333/panasonic.jpg</param>
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">This is a test message</param>
					<param name="digest">73CDCAF793B4FE85D10CB717DC261F65</param>
					<param name="privacy">2</param>
					<param name="license">6</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="video">
					<doc>
						Basic JPG Upload (Example for AFF)
					</doc>
					<param name="api_key">4d17e52d-b5ef-4b29-b459-e5a01aef6283</param>
					<param name="url">http://www.movly.com/Content/Movies/Savage_Grace/Trailers/Savage_Grace_mp4_movie_trailer/MP4/savage-grace-trailer-.mp4</param>
					<param name="subject">Savage Grace Movie Trailer</param>
					<param name="body">The true story of the beautiful and charismatic Barbara Daly, who married above her class to Brooks Baekeland, heir to the Bakelite plastics fortune. Their only child is a failure in his father's eyes, and as he matures and becomes increasingly close to his lonely mother, the seeds for tragedy are sown..</param>
					<param name="digest">B8A7551DEAB8E5B02359221156263111</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_create_clone" runat="server" enabled="true" object="campaign" operation="create" group="create">
			<doc>
				<short>Create a campaign based on an existing campaign.</short>
				<full>The will clone the campaign details, the deployment servers and the media definitions for a specified campaign.</full>
			</doc>
			<url>/campaign_create_clone/</url>
			<param name="master_key">
				<doc>The master key for this instance of ThumbWhere</doc>
			</param>
			<param name="campaign_id">
				<doc>The Campaign Key for the campaign that you want to clone.</doc>
			</param>
			<response>
				<param name="campaign_id">
					<doc />
				</param>
				<param name="api_key">
					<doc />
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>	
						Example of cloning an existing campaign.
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Name Of Campaign</param>
					<param name="description">Description of Campaign</param>
					<expect status="success">
						<param name="campaign_id" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--

        <action name="verify_number" runat="server" enabled="false">
            <doc>Verifies that a number is known to the ThumbWhere</doc>
            <url>/verify_number/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
                </doc>
            </param>

            <param name="number">
                <doc>The phone number that we want to find out about.</doc>
            </param>


            <response>
                <param name="exists">
                    <doc>If there is an identity/member pair for this number then this is true.</doc>
                </param>

                <param name="identity">
                    <doc>id of the identity that has this number</doc>
                </param>

                <param name="member">
                    <doc>id of the member id of the identity that has this number</doc>
                </param>

            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Do I exist?
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="number">+61-123-456</param>

                    <expect status="success">                   
                        <param name="identity"/>
                        <param name="member"/>
                    </expect>   

                </scenario>             
            </scenarios>


        </action>   
--><!--
        <action name="media_item_add_comment" runat="server" enabled="false">
            <doc>Comment on a media item</doc>
            <url>/media_item_add_comment/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member">
                <doc>the member uploading the file</doc>
            </param>            
            <param name="mediaitem">
                <doc>the member item we are commenting on</doc>
            </param>            
            <response />
        </action>

        <action name="update_media_item" runat="server" enabled="false">
            <doc>Update the description fields of a media item</doc>
            <url>/update_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
            <param name="subject">
                <doc>the title of the file</doc>
            </param>
            <param name="body">
                <doc>a description of the file</doc>
            </param>
            <param name="tags">
                <doc>any additional tags</doc>
            </param>            
            <param name="privacy">
                <doc>the privacy level 0 = public, 1 = friends, 2 = identity(s)</doc>
            </param>
            <param name="license">
                <doc>id of the license in use</doc>
            </param>
        </action>

        <action name="update_media_item_increment_view_count" runat="server" enabled="false">
            <doc>Update the view count of a media item by 1</doc>
            <url>/update_media_item_increment_view_count/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
        </action>

        <action name="delete_media_item" runat="server" enabled="false">
            <doc>Delete a media file</doc>
            <url>/delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item to delete</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_identity" runat="server" enabled="false">
            <doc>Adds a link between a media item and identity</doc>
            <url>/media_item_add_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_delete_identity" runat="server" enabled="false">
            <doc>Removes the link between a media item and identity</doc>
            <url>/media_item_delete_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_rating" runat="server" enabled="false">
            <doc>Give a rating to a media item</doc>
            <url>/media_item_add_rating/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>Media item this is a rating of</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign this rating belongs to</doc>
            </param>
            <param name="member">
                <doc>member who made this rating</doc>
            </param>
            <param name="ipaddress">
                <doc>ip address that posted the rating</doc>
            </param>
            <param name="cookie">
                <doc>cookie name?</doc>
            </param>
            <param name="reason">
                <doc>a description of the rating</doc>
            </param>
            <param name="score">
                <doc>the score this rating received</doc>
            </param>
            <param name="maxscore">
                <doc>the maximum score that could have been awarded for this rating</doc>
            </param>
            <response />
        </action>

        <action name="member_add_friend" runat="server" enabled="false">
            <doc>Allows a member to add a friend</doc>
            <url>/member_add_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to be-friend</doc>
            </param>
            <response />
        </action>

        <action name="member_delete_friend" runat="server" enabled="false">
            <doc>Allows a member to delete a friend or a friend request</doc>
            <url>/member_delete_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to de-friend</doc>
            </param>
            <response />
        </action>

        <action name="new_member_group" runat="server" enabled="false">
            <doc>Allows a member to add a new group</doc>
            <url>/new_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="founder">
                <doc>ID of the member creating the group</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for this group</doc>
            </param>
            <response />
        </action>

        <action name="update_member_group" runat="server" enabled="false">
            <doc>Allows a member group to be updated</doc>
            <url>/update_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>id of the group to be deleted</doc>
            </param>
            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for the group</doc>
            </param>
            <response />
        </action>

        <action name="delete_member_group" runat="server" enabled="false">
            <doc>Deletes an entire member group</doc>
            <url>/delete_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the member group to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign to remove the group from</doc>
            </param>
            <response />
        </action>

        <action name="member_join_group" runat="server" enabled="false">
            <doc>Allows a member to join a group</doc>
            <url>/member_join_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to join</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="member_leave_group" runat="server" enabled="false">
            <doc>Allows a member to leave a group</doc>
            <url>/member_leave_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to leave</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="new_media_item_collection" runat="server" enabled="false">
            <doc>Create a media item collection</doc>
            <url>/new_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>collection title/name</doc>
            </param>
            <param name="media">
                <doc>the media type. if this is empty this collection can handle any media type. 
                     valid values are wallpaper,video,message,audio</doc>
            </param>
            <param name="description">
                <doc>a description</doc>
            </param>
            <param name="member">
                <doc>member id of the collection creator</doc>
            </param>
            <param name="public">
                <doc>True|False</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="delete_media_item_collection" runat="server" enabled="false">
            <doc>Deletes a media item collection</doc>
            <url>/delete_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>Id of the media item collection to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_add_media_item" runat="server" enabled="false">
            <doc>Adds a media item to a media item collection</doc>
            <url>/media_item_collection_add_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item</doc>
            </param>
            <param name="displayorder">
                <doc>order within the collection</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_delete_media_item" runat="server" enabled="false">
            <doc>Removes a media item from a media item collection</doc>
            <url>/media_item_collection_delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item to remove</doc>
            </param>
            <response />
        </action>
--></actions>
	<actions version="V1.1" service="Commerce">
		<action name="member_update_mediaitem" runat="server" enabled="true" object="member" operation="update" group="mediaitems">
			<doc>
				<short>Updates a MediaItems's information</short>
				<full>
					If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/member_update_mediaitem/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member making this change. This member must own this media item to make the change.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="subject">
				<doc>
					(optional) The subject text for the media item.
				</doc>
			</param>
			<param name="body">
				<doc>
					(optional) The body text of the media item.
				</doc>
			</param>
			<param name="privacy">
				<doc>
					(optional) 0 = in all feeds, 1 = only in member feeds and identity feeds, 2 = only in identity feeds, 3 or above - not in any feeds
				</doc>
			</param>
			<param name="filter">
				<doc>
					(optional)  If this is true (default is false) then the subject and body will be filtered by the global and campaign specific user generated content filters.
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">This Is A Better Subject</param>
					<param name="body">This is a Beter Body</param>
					<expect status="success" />
				</scenario>
				<scenario name="simple">
					<doc>
						Only update privacy
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="privacy">0</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_list_mediaitem_transformations" runat="server" enabled="true" object="member" operation="enumerate" group="mediaitems">
			<doc>
				<short>Returns a list of all the transformations for a media item</short>
				<full />
			</doc>
			<url>/member_list_mediaitem_transformations/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					long - The media item we want to get all the transformations for
				</doc>
			</param>
			<response>
				<doc>
					A list of all the transformations for a media item
				</doc>
				<param name="url">
					<doc>
						The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_mediaitem_transformation" runat="server" enabled="true" object="member" operation="create" group="mediaitems">
			<doc>
				<short>Adds a transformation to a media item</short>
				<full>
					All newly added transformations get added to the end. A transformation consists of two strings a #type# and an optional #argument#.
				</full>
			</doc>
			<url>/member_add_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					long - The media item we want to add the translation to.
				</doc>
			</param>
			<param name="type">
				<doc>
					string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
					string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Adds a 'rotate left' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Adds a 'mirror' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Adds a 'caption bottom' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_mediaitem_transformation" runat="server" enabled="true" object="member" operation="update" group="mediaitems">
			<doc>
				<short>Sets the type and argument of the specified translation.</short>
				<full />
			</doc>
			<url>/member_set_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the member who owns this mediaitem that the transformation is being added to.
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
					long - The transformation we want to update
				</doc>
			</param>
			<param name="type">
				<doc>
					string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
					string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc>
					A list of all the transformations for a media item
				</doc>
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_delete_mediaitem_transformation" runat="server" enabled="true" object="member" operation="delete" group="mediaitems">
			<doc>
				<short>Deletes a transformation for a specified media item</short>
				<full />
			</doc>
			<url>/member_delete_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
					long - The transformation we want to delete
				</doc>
			</param>
			<response>
				<doc>
					Simple success or failure.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_mediaitem_comment" runat="server" enabled="true" object="member" operation="write" group="mediaitems">
			<doc>
				<short>Add a comment to an existing media item.</short>
				<full />
			</doc>
			<url>/member_add_mediaitem_comment/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="mediaitem_id">
				<doc>Ths id of the mediaitem that we are adding this comemnt to</doc>
			</param>
			<param name="subject">
				<doc>The subject of the comment</doc>
			</param>
			<param name="body">
				<doc>The body of the comment</doc>
			</param>
			<response>
				<doc />
				<param name="mediaitem_id">
					<doc>
						The created comment
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add Comment
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">Hello</param>
					<param name="body">Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Add a friend.</short>
				<full />
			</doc>
			<url>/member_add_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to add.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_friend">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Remove a friend.</short>
				<full />
			</doc>
			<url>/member_remove_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to remove.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_member_token_friend">5B36AAC5-B600-4A89-85AF-5F5F4BDA103F</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Add a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_add_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to trust.</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<param name="proxy">
				<doc>If true then this trusted member can act as a proxy for the trusting member</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<param name="proxy">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Remove a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_remove_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to remove from a trusted relationship</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Reset password of the member.</short>
				<full>Used to reset the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_reset_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_reset_identity_secret^. If you want to reset both id and secret at the same time, use ^member_reset_identity_credentials^.</full>
			</doc>
			<url>/member_reset_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Get a summary of the member.</short>
				<full />
			</doc>
			<url>/member_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or application</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for the memer we want a summary of</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code_by_identity_id" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code_by_identity_id/</url>
			<param name="master_key">
				<doc>Master key for this instance of ThumbWhere</doc>
			</param>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="id">
				<doc>
					Identity id
				</doc>
			</param>
			<param name="type">
				<doc>
					Identity type
				</doc>
			</param>
			<param name="alphabet">
				<doc>
					string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
					integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
						The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
						Request code for a member token based on an identity id
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">member</param>
					<param name="id">drmiaow</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member token that you want turned into a lookup code
				</doc>
			</param>
			<param name="alphabet">
				<doc>
                    string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
                    integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_lookup_code" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Returns an #api_member_token# associated with a lookup #code#</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_lookup_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to lookup.
				</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_revoke_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>If the supplied #code# exists, it is deleted.</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_revoke_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to revoke.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_value" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the value from the name value pair collection for the competition specified by #key".</short>
				<full />
			</doc>
			<url>/competition_get_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_value" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the value of the name value pair for a competition.</short>
				<full />
			</doc>
			<url>/competition_set_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the value of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_values" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the values from the name values pair for the competitions external application.</short>
				<full>                                      
					   The competition must be a competition of the external application.
					   The returned values is encrypted with the cruds encryption key.
				</full>
			</doc>
			<url>/competition_get_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_values" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the values of the name values pair for an competition who is a competition of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The competition must be a competition of the external application.					   
				</full>
			</doc>
			<url>/competition_set_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="moon">james2</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_add_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Adds a name value pair definition to a competition.</short>
				<full>This is shared across all competitions for this campaign.</full>
			</doc>
			<url>/competition_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Deletes a name value pair definition for a competition.</short>
				<full>This will delete the name value pair definition called #name# and all values of #name# across all competitions for this campaign.</full>
			</doc>
			<url>/competition_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_summary" runat="server" enabled="true" object="competition" operation="read" group="crud">
			<doc>
				<short>Get a summary of the competition. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/competition_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The Key for competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified competition
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_create_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Create a new round for a competition.</short>
				<full />
			</doc>
			<url>/competition_create_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_update_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Update an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_update_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the specified round.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Delete an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_delete_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete the specified round
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_add_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Adds a name value pair definition for an application.</short>
				<full>This is shared across all campaigns that use this application.</full>
			</doc>
			<url>/application_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_delete_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Deletes a name value pair definition for an application.</short>
				<full>This will delete the name value pair definition and values for all applications across all campaigns that use this applicaton.</full>
			</doc>
			<url>/application_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_get_summary" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Get a summary of the application. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/application_get_summary/</url>
			<param name="api_key">
				<doc>The API key for external application.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified application
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_username" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update username of the member.</short>
				<full>Used to change the username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the password of the member, use ^member_update_password^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_username/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the username of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the username of.</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the username of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_label" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity label of the identity for a member.</short>
				<full>An identity label provides a human readable label for an identity. The 'type' might be 'twitterv2api' but the label would be 'Twitter'</full>
			</doc>
			<url>/member_update_identity_label/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity.</doc>
			</param>
			<param name="label">
				<doc>The identity label that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the identity label for an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="label">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_id" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="id">
				<doc>The identity id that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="id">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Create an identity for this member.</short>
				<full />
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="type">
				<doc>The identity type.</doc>
			</param>
			<param name="id">
				<doc>The identity id.</doc>
			</param>
			<param name="secret">
				<doc>The identity secret.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="type">mobile_email</param>
					<param name="id" />
					<param name="secret">blah</param>
					<expect status="success">
						<param name="api_identity_token">
							<doc>The api identity token - the represents this identity wrt this api key</doc>
						</param>
						<param name="id">
							<doc>The id of the identity</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_delete" runat="server" enabled="true" object="member" operation="delete" group="crud">
			<doc>
				<short>Delete the specified Member.</short>
				<full>Marks a member as deleted - eventualy this member is purged from the database.</full>
			</doc>
			<url>/member_delete/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete this member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_login" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and a username and password pair</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<expect status="success">
						<param name="api_member_token">
							<doc>Anonymous</doc>
						</param>
						<param name="api_member_token">
							<doc>The name of the member</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_login_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and an identity.</short>
				<full>This call takes the type, id and secret of an identity and returns the member that owns this identity. If you want to authenticate against the member credentials use type of 'thumbwhere'.</full>
			</doc>
			<url>/member_login_identity/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="type">
				<doc>The type of identity that you want to login as.</doc>
			</param>
			<param name="id">
				<doc>The id of the identity that you want to login as.</doc>
			</param>
			<param name="secret">
				<doc>The secret of the identity you want to login as. You must prove you are who you say you are by providing the secret.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member in the context of the API key.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API identity token for this Member's identity.</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member using the internal 'thumbwhere' identity.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">thumbwhere</param>
					<param name="id">james</param>
					<param name="secret">james</param>
					<expect status="success">
						<param name="username">
							<doc>The name of the member</doc>
						</param>
						<param name="api_member_token">
							<doc>A unique token that represents this member in the context of the API key.</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_username_available" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Return true if the proposed #username# is available.</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="available">
					<doc>True if the username is available, false if it is not</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<expect status="success">
						<param name="available">
							<doc>True if the username is available, false if it is not</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_credentials" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update credentials of the member.</short>
				<full>Used to change the password and username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update just the username of the member, use ^member_update_username^. If you want to update just the password, use ^member_update_password^.</full>
			</doc>
			<url>/member_update_credentials/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the credentials of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the credentials of..</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update username and password of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<param name="new_password">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update password of the member.</short>
				<full>Used to change the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the password of.</doc>
			</param>
			<param name="password">
				<doc>The current password of the member you want to change the password of.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Adds a member to the application and sets the values of the name value pairs.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_add_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="application_id">
				<doc>he application key for the application that we want to add the member to.</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The api member key for the member for this application.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Removes a member from an application.</short>
				<full />
			</doc>
			<url>/member_remove_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_test_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Tests a Member's subscription to an application</short>
				<full>
					This will perform a test of an application using a Member's name value pairs.
					Eg. For Twitter it will end up calling the 'login' API call provided by Twitter to ensure that the 
					details provided will work.
				</full>
			</doc>
			<url>/member_test_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple test.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_bandwidthusage_create" runat="server" enabled="true" object="campaign" operation="update" group="reporting">
			<doc>
				<short />
				<full />
			</doc>
			<url>/campaign_bandwidthusage_create/</url>
			<param name="api_key">
				<doc />
			</param>
			<param name="api_member_token">
				<doc />
			</param>
			<param name="actor">
				<doc />
			</param>
			<param name="action">
				<doc />
			</param>
			<param name="target">
				<doc />
			</param>
			<param name="magnitide">
				<doc />
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc />
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="actor">Colonel Mustard</param>
					<param name="action">Lead Pipe</param>
					<param name="target">Reverend Green</param>
					<param name="magnitude">11</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_get_summary" runat="server" enabled="true" object="campaign" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>
					The member must be a member of the external application.
					The returned values are encrypted with the applications encryption key if they are specified as encrypted over the wire in the name value pair definitions for this application.
				</full>
			</doc>
			<url>/campaign_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<response>
				<doc />
				<param name="name">
					<doc>
						The name of the campaign
					</doc>
				</param>
				<param name="description">
					<doc>
						 The name of the description						
					</doc>
				</param>
				<param name="apps" array="true" type="app">
					<doc>
						Collection of applications
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
						Request summary for the specified campaign.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the compeitionwinner flag for a competition entry.</short>
				<full>Sets the value for the entry competitionwinner attribute which is used to signify that this entry is the winner of a round.</full>
			</doc>
			<url>/competition_entry_set_competitionwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionwinner.</doc>
			</param>
			<param name="competitionwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure in generic status element.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition winner
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the competitionfinalist flag for a competition entry.</short>
				<full>
                Sets the value for the entry competitionfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_competitionfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionfinalist.</doc>
			</param>
			<param name="competitionfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundwinner flag for a competition entry.</short>
				<full>          
                Sets the value for the entry roundwinner attribute which is used to signify that this entry is the winner of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundwinner.</doc>
			</param>
			<param name="roundwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the round winner.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundfinalist flag for a competition entry.</short>
				<full>              
                Sets the value for the entry roundfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundfinalist.</doc>
			</param>
			<param name="roundfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as round finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_approved" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the approved flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_approved/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="approved">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as approved.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="approved">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_deleted" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the deleted flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_deleted/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="deleted">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as deleted.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="deleted">true</param>
					<expect status="sucess">
						<doc>No data returned - Simple sucess or failure.</doc>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_rejected" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the rejected flag for a competition entry.</short>
				<full>          
                    Marks an entry as rejected.
				</full>
			</doc>
			<url>/competition_entry_set_rejected/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="rejected">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as rejected.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="rejected">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote_confirm" runat="server" enabled="true" object="competition" operation="update" group="vote">
			<doc>
				<short>Confirms a vote on an entry in a competition.</short>
				<full>                      
                    This is normally used via SMS or via an email form as a way og making sure that the vote was made from a real email address or mobile phone.
				</full>
			</doc>
			<url>/competition_vote_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="vote_confirmation_code">
				<doc>The code that can be used to validate a vote..</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm a vote.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="vote_confirmation_code">g1gpwa</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote" runat="server" enabled="true" object="competition" operation="create" group="vote">
			<doc>
				<short>Votes for an entry in a competition.</short>
				<full>                                                  
                    This creates a pending vote for an entry in a competition. A code is returned. The vote will not be counted unless it is confirmed by a call to ^competition_vote_confirm^.
				</full>
			</doc>
			<url>/competition_vote/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>Represents the member doing the voting.</doc>
			</param>
			<param name="code">
				<doc>The code that represnts a vote for an entry in a competition.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Vote for an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">???</param>
					<param name="code">???</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create" runat="server" enabled="true" object="member" operation="create" group="crud">
			<doc>
				<short>Creates a new Member.</short>
				<full>                                                              
                    If a parameter is not provided, then the correponding field is not updated from the defaults. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/member_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="salutation">
				<doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
				</doc>
			</param>
			<param name="username">
				<doc>
                    String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<param name="password">
				<doc>
					String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<response>
				<doc>Returns an API Member Token.</doc>
				<param name="api_member_token">
					<doc>
                        API Member Token that represents this member making this change. This API Member Token is linked to the #api_key# that made this call and will not be valiud when used with a different API Key.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Member Creation
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--action name="member_update" runat="server" enabled="true" object="member" operation="update" group="crud" >
            <doc>   
                <short>Updates a Member's information.</short>
                <full>              
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
                </full>
            </doc>
            <url>/member_update/</url>

            <param name="api_key">
                <doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
            </param>

            <param name="api_member_token"  >
                <doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
                </doc>
            </param>

            <param name="email">
                <doc>
                    String - The email address for the membmer. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="salutation">
                <doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
                </doc>
            </param>            

            <param name="username">
                <doc>
                    String - The display name for the user - We do not check for uniqueness.
                </doc>
            </param>            


            <param name="firstname">
                <doc>
                    String - The first name of the member
                </doc>
            </param>            

            <param name="lastname">
                <doc>
                    String - The last name of the member
                </doc>
            </param>            

            <param name="phonemobile">
                <doc>
                    String - The mobile phone number for the member. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="postalpostcode">
                <doc>
                    String - The postcode for the user for their postal address
                </doc>
            </param>            

            <param name="receiveupdates">
                <doc>
                    Boolean - Wether of not the member wants to recieve updates.
                </doc>
            </param>    

            <response>
                <doc>No data returned - Simple sucess or failure.</doc>
            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Member Update
                    </doc>

                    <param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
                    <param name="api_member_token"/>
                    <param name="email">james@massive.com.au</param>
                    <param name="receiveupdates">false</param>
                    <param name="username">DrMiaow</param>
                    <param name="firstname">James</param>
                    <param name="lastname">Mc Parlane</param>
                    <param name="phonemobile">+1-000-000-000</param>
                    <param name="postalpostcode">2204</param>
                    <param name="postalstate">NSW</param>

                    <expect status="success">                                           
                    </expect>   

                </scenario>             
            </scenarios>

        </action-->
		<action name="member_get_feed" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the url for a Member's feed.</short>
				<full />
			</doc>
			<url>/member_get_feed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					The api member token for the member
				</doc>
			</param>
			<param name="type">
				<doc>
					The type of the feed
				</doc>
			</param>
			<response>
				<doc>
					Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
						The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="type">html</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
						Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_url" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #member# using their member id.</short>
				<full>                                      
                    Returns the URL for the specified #member#

                    This function is in the API for convenience. It is possible to calculate the url for a member.

                    From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                    Then take the member id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                    Then take the member and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                    If you add all these together you end up with 

                    http://core.thumbwhere.com/members/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="member">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_value" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the value from the name value pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned value is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_value" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the value of the name value pair for an member who is a member of an external application.</short>
				<full>                                      
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_error" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the error flag for a member in an application.</short>
				<full>
					This is called by external applications when they want to signify that there has been a error that requires the members attention. Eg. If they change their Twitter password so we can't make posts to Twitter on their behalf any more because the password we have is out of date.
				</full>
			</doc>
			<url>/member_set_application_error/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="error">
				<doc>
					bool - the value of the failed flag.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Set a Member's error flag.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="error">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_values" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_values" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the values of the name values pair for an member who is a member of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_campaign_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member in the campaign
				</doc>
			</param>
			<response>
				<doc />
				<param name="username">
					<doc>
                        The username of the member.
					</doc>
				</param>
				<param name="apps" type="array" class="app">
					<doc>
                        Collection of app element descriptions
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_move_between_members" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Moves a media item from one member to another. It will end up in the 'member' identity in the destination</short>
				<full />
			</doc>
			<url>/mediaitem_move_between_members/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token_from">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="api_member_token_to">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token_from">86f656f8-0bd0-4e87-b947-79f95aa2165f</param>
					<param name="api_member_token_to">0638a6a9-a041-45bd-ace4-eaea85a6c985</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_update" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Updates a MediaItems's information</short>
				<full>          
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/mediaitem_update/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="subject">
				<doc>
                    (optional) The subject text for the media item.
				</doc>
			</param>
			<param name="body">
				<doc>
					(optional) The body text of the media item.
				</doc>
			</param>
			<param name="privacy">
				<doc>
					(optional) 0 = in all feeds, 1 = only in member feeds and identity feeds, 2 = only in identity feeds, 3 or above - not in any feeds
				</doc>
			</param>
			<param name="filter">
				<doc>
					(optional)  If this is true (default is false) then the subject and body will be filtered by the global and campaign specific user generated content filters.
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">This Is A Better Subject</param>
					<param name="body">This is a Beter Body</param>
					<expect status="success" />
				</scenario>
				<scenario name="simple">
					<doc>
						Only update privacy
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="privacy">0</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_get_url" runat="server" enabled="true" object="mediaitem" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #mediaitem#</short>
				<full>

                        This function is in for convenience. It is possible to calculate the url for a media item.

                        From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                        Then take the mediaitem id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                        Then take the mediaitem and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                        If you add all these together you end up with 

                        http://core.thumbwhere.com/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/mediaitem_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the mediaitem. If #redirect# is true, then this will actually redirect you to the Media Item's XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_list_transformations" runat="server" enabled="true" object="mediaitem" operation="enumerate" group="transformation_id">
			<doc>
				<short>Returns a list of all the transformations for a media item</short>
				<full />
			</doc>
			<url>/mediaitem_list_transformations/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to get all the transformations for
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_add_transformation" runat="server" enabled="true" object="mediaitem" operation="create" group="transformation_id">
			<doc>
				<short>Adds a transformation to a media item</short>
				<full>
                    All newly added transformations get added to the end. A transformation consists of two strings a #type# and an optional #argument#. 
				</full>
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to add the translation to.
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Adds a 'rotate left' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Adds a 'mirror' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Adds a 'caption bottom' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_transformation" runat="server" enabled="true" object="mediaitem" operation="update" group="transformation_id">
			<doc>
				<short>Sets the type and argument of the specified translation.</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to update the transformation for.
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
                    long - The transformation we want to update
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_transformation" runat="server" enabled="true" object="mediaitem" operation="delete" group="transformation_id">
			<doc>
				<short>Deletes a transformation for a specified media item</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to delete the transformation from
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
                    long - The transformation we want to delete
				</doc>
			</param>
			<response>
				<doc>
                    Simple success or failure.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_rate" runat="server" enabled="true" object="mediaitem" group="ratings" operation="update">
			<doc>
				<short>Adds a rating to a MediaItem</short>
				<full>When called this returns the latest calculated rating of the media item.</full>
			</doc>
			<url>/mediaitem_rate/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    Optional API Member Token that represents the member making this rating. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="score">
				<doc>
                    The rating score. If the rating was 3 out of 5 stars, then this valur would be 3.
				</doc>
			</param>
			<param name="maxscore">
				<doc>
                    The rating maxscore. What the rating is "out of" If the rating was 3 out of 5 stars, then this value would be 5. 
				</doc>
			</param>
			<param name="ipaddress">
				<doc>
                    The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie">
				<doc>
                    A unique identifier. We ignore any ratings for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason">
				<doc>
                    A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the newly calculated rating for the media item.
				</doc>
				<param name="rating">
					<doc>
                        The actual rating for this media item.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="score">1</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
                        Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="score">3</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_viewed" runat="server" enabled="true" object="mediaitem" group="metrics" operation="update">
			<doc>
				<short>Increments the viewcount for a #mediaitem#</short>
			</doc>
			<url>/mediaitem_viewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are incrementing
				</doc>
			</param>
			<response>
				<doc>
					Returns the latest tally of views of the media item.
				</doc>
				<param name="mediaitem_id">
					<doc>The mediaitem that we incremented.</doc>
				</param>
				<param name="views">
					<doc>The latest number of views.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Increment numer of views
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="views" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_complain" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Adds a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_complain/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					Optional API Member Token that represents the member making this complaint. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="ipaddress" optional="true">
				<doc>
					The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie" optional="true">
				<doc>
					A unique identifier. We ignore any complaints for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason" optional="true">
				<doc>
					A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
					Returns the newly calculated rating for the media item.
				</doc>
				<param name="complaint_id">
					<doc>
						The id of the complaint created
					</doc>
				</param>
				<param name="complaints">
					<doc>
						The current number of complaints for this mediaitem
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reason">Offends my value system</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
						Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="reason">This bird wets it's nest</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_complaint" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Deletes a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_delete_complaint/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="mediaitemcomplaint_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="mediaitemcomplaint_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_censored" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'censored' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_censored/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the censored flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="censored">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_reviewed" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'reviewed' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_reviewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the 'reviewed' flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reviewed">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_create" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>Creates a single use ticket that can be used to upload content directly into thumbwhere. </short>
				<full>
                        This create an upload ticket that can be used with ^mediaitem_upload_push^.
				</full>
			</doc>
			<url>/mediaitem_upload_push_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
				</doc>
			</param>
			<param name="api_identity_token">
				<doc>
                    API Identity Token that we want the newly created media item to appear to be submitted by (eg. The mobile phone identity, or the Flikr identity).
				</doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<param name="maxsize" optional="true" default="10485760">
				<doc>The maximum size in bytes of file that we are allowed to upload.</doc>
			</param>
			<response>
				<doc>The upload ticket.</doc>
				<param name="ticket">
					<doc>The upload push ticket</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token" />
					<param name="api_identity_token" />
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">testdata</param>
					<param name="privacy">0</param>
					<param name="license">-1</param>
					<param name="maxsize">10485760</param>
					<expect status="success">
						<param name="ticket" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>
                    Uploads a media item directly into ThumbWhere
				</short>
				<full>
                        Allows you to peform a HTTP POST file upload directly into ThumbWhere. The media item that is created is based on the meta-data 
                        supplied in the call to ^mediaitem_upload_push_create^.
				</full>
			</doc>
			<url>/mediaitem_upload_push/</url>
			<param name="ticket">
				<doc />
			</param>
			<param name="file" upload="true">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="ticket" />
					<param name="file" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_query" runat="server" enabled="true" object="mediaitem" operation="read" group="upload">
			<doc>
				<short>Queries the status of an upload push in progress.</short>
				<full>Returns the status, number of bytes uploaded so far and the data rate.</full>
			</doc>
			<url>/mediaitem_upload_push_query/</url>
			<param name="ticket">
				<doc />
			</param>
			<response>
				<doc>Returns the status, number of bytes uploaded so far and the data rate.</doc>
				<param name="api_member_token">
					<doc>The API Member token of the member that has uploaded this media item.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API Identity token that was used to upload this media item.</doc>
				</param>
				<param name="member">
					<doc>The ID of the member that has uploaded this media item.</doc>
				</param>
				<param name="member_url">
					<doc>XML to the members XML feed.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was created when this file was uploaded.</doc>
				</param>
				<param name="size">
					<doc>The number of bytes that have been uploaded..</doc>
				</param>
				<param name="started">
					<doc>The time at which this upload started.</doc>
				</param>
				<param name="completed">
					<doc>The time at which this upload was completed..</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Query - Requires valid ticket
					</doc>
					<param name="ticket" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_confirm" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Confirms a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_query" runat="server" enabled="true" object="competition" operation="read" group="entry">
			<doc>
				<short>Queries a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_query/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Query a pending competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_create" runat="server" enabled="true" object="competition" operation="create" group="entry">
			<doc>
				<short>Creates an competition entry</short>
				<full>Takes a media item and enters it into a competition.</full>
			</doc>
			<url>/competition_entry_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.</doc>
			</param>
			<param name="round">
				<doc>The id of the competition round that we are adding this media item to</doc>
			</param>
			<param name="mediaitem_id">
				<doc>The id of the mediaitem being entered into the competition</doc>
			</param>
			<param name="approved">
				<doc>If this is true then the entry is created as approved. If you leave this parameter out the entry will be by default unapproved.</doc>
			</param>
			<response>
				<doc>Returns the code needed to approve/reject and vote for the entry..</doc>
				<param name="votecode">
					<doc>The code that is used to approve and vote for this entry.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Create a competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">89b4e3cb-38da-4907-aefa-316f99baf4f4</param>
					<param name="round">2</param>
					<param name="mediaitem_id">77</param>
					<expect status="success">
						<param name="votecode" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_login" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Login using an #api_key#/#api_member_token# pair.</short>
				<full>This is used to provide the same response as a normal username/password login (using ^member_login^ and ^member_login_identity^) from just the #api_member_token#</full>
			</doc>
			<url>/api_member_token_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API Member Token that we want to login as.</doc>
			</param>
			<response>
				<doc>The name of the Member and a direct url to their XML feed.</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="feedurl">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Login as member using the saved member token
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">d6029931-d37a-4dd2-8075-e6a41f4d5187</param>
					<expect status="success">
						<param name="username">
							<doc>Anonymous</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="invite" runat="server" enabled="true" object="application" operation="write" group="invite">
			<doc>
				<short>Creates an invitation that can be sent out to the provided #email#.</short>
				<full>Invitations are associated with the provided #api_key#</full>
			</doc>
			<url>/invite/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="email">
				<doc>The email adddress to add the invitation to.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure..</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Invite james to use the application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="email">james@massive.com.au</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_validate" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Validates #api_identity_token# and returns its current state.</short>
				<full>An API Identity Token or an API Key can be 'revoked' due to abuse.</full>
			</doc>
			<url>/api_identity_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Identity Token to validate.</doc>
			</param>
			<response>
				<doc>Returns the state of the API Identity Token.</doc>
				<param name="state">
					<doc>The state of the API Identity Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Identity Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_query" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API identity token request.</short>
				<full>
                This should be performed after a call to ^api_identity_token_request^ and should pass in the code returned by that call. 
                 The api identity_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_identity_token_request^.
				</full>
			</doc>
			<url>/api_identity_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>
                        Returns the status of the request, its expiry time in seconds and if it has been completed, the API Identity Token itself.
				</doc>
				<param name="request">
					<doc>If the API Identity Token is ready for use, this will be 'ready' and the #api_identity_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Identity Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Requests an API Identity Token.</short>
				<full>
                        After making the request, you need complete the request with a call to ^api_identity_token_request_authenticate^. This call should only be made if you are satisfed that the identity 
                        has been proven to belong to the person asserting that they own it.         
                        If this identity is a mobile phone, you have the option to SMS or MMS #code# to #number# to complete the request.
                        Once the request is completed, make a call to ^api_identity_token_request_query^ with the returned #code# as a parameter to get the #api_identity_token# and the #api_member_token#.
				</full>
			</doc>
			<url>/api_identity_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="api_member_token">
				<doc>Member that this identity will be added to. If this is blank and this is not a pre-existing member then a new member will be created after this request is completed</doc>
			</param>
			<param name="id">
				<doc>The identity id - eg email address or mobile phone number.</doc>
			</param>
			<param name="type">
				<doc>The identity type</doc>
			</param>
			<response>
				<doc>If #type# is 'mobile' it will return with the #code# that needs to be SMSed to the provided #number#.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_identity_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_identity_token_request_query^ should return the new API identity_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Assert that you own the email address drmiaow@gmail.com
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">eb21b2a8-3f3c-49ba-8c5a-f0f9d511f68b</param>
					<param name="id">drmiaow@gmail.com</param>
					<param name="type">email</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_authenticate" runat="server" enabled="true" object="identity" operation="create" group="tokens">
			<doc>
				<short>Authenticates an API Identity Token Request made by a previous call to ^api_identity_token_request^.</short>
				<full>This enables an application to vouch for the validity of an Identity.</full>
			</doc>
			<url>/api_identity_token_request_authenticate/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>Returns with the api_identity_token that has been created for the corresponding member represented by the api_member_token</doc>
				<param name="api_identity_token">
					<doc>This is the api identity token that was created or found matching the original request..</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This be the same as the one supplied to ^api_identity_token_request^, or if one was supplied, it will be a be for a newly created Member.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_validate" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Validates #api_member_token# and returns its current state. An API Member Token or an API Key can be 'revoked' due to abuse. </short>
			</doc>
			<url>/api_member_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Member Token to validate.</doc>
			</param>
			<response>
				<doc>The state of the API Member Token.</doc>
				<param name="state">
					<doc>The state of the API Member Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Member Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request_query" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API request.</short>
				<full>
                    This should be performed after a call to ^api_member_token_request^ and should pass in the code returned by that call. 
                    The api member_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_member_token_request^.
				</full>
			</doc>
			<url>/api_member_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Member Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_member_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_member_token_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the current API Member Token request</doc>
				<param name="request">
					<doc>If the API Member Token is ready for use, this will be 'ready' and the #api_member_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Member Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Member Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Member Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Requests an API Member Token.</short>
				<full>After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_member_token_request_query^ with the returned #code# as a parameter.</full>
			</doc>
			<url>/api_member_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number that it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_member_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_member_token_request_query^ should return the new API member_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_validate" runat="server" enabled="true" object="application" operation="read" group="key">
			<doc>
				<short>Validates #api_key# and returns its current state</short>
				<full>An API key can be 'revoked' due to abuse. </full>
			</doc>
			<url>/api_key_validate/</url>
			<param name="api_key">
				<doc>
                    API Key for the registered application that is calling this method. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.
				</doc>
			</param>
			<response>
				<doc>Returns the state of the API Key.</doc>
				<param name="state">
					<doc>The state of the API Key.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Key
					</doc>
					<param name="api_key">27aba919-ac95-46f2-ad7d-e55c0373a7c1</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request_query" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Queries the state of an API Key request.</short>
				<full>              
                    This is a back end API call - this is not part of the public API. 

					This should be performed after a call to ^api_key_request^ and should pass in the code returned by that call. 
                    The api key details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_key_request^.
				</full>
			</doc>
			<url>/api_key_request_query/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_key_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_key_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the request and the number of seconds remaining.</doc>
				<param name="request">
					<doc>If the API Key is ready for use, this will be 'ready' and the #api_key# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Key request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_key">
					<doc>The API Key returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Key that will not exist
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="code">mamapda</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Requests an API Key for an external application. This will register the external application against the specified user.</short>
				<full>
						After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_key_request_query^ with the returned #code# as a parameter. 
						If the name and the URL is for an existing application then the api_key for that pre-existing application will be returned.
				</full>
			</doc>
			<url>/api_key_request/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="name">
				<doc>The name of the application to be registered.</doc>
			</param>
			<param name="url">
				<doc>The url of the application to be registsted.</doc>
			</param>
			<param name="description">
				<doc>A description for the application to be registered.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_key_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_key_request_query^ should return the new API key</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Test Application</param>
					<param name="url">http://app.thumbwhere.com.au/test</param>
					<param name="description">Test Application</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="location_get_identity_ad" runat="server" enabled="true" object="location" operation="read" group="advertising">
			<doc>
				<short>For the specified location and individial, return an ad tailored to that individual at that location.</short>
			</doc>
			<url>/location_get_identity_ad/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="location_type">
				<doc>The location type for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="location_id">
				<doc>The location id for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_type">
				<doc>The identity type for the identity of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_id">
				<doc>The identity id for the identity of the individual this ad is targeted at.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Return a location aware add targeted at an individual by an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="location_type">meter</param>
					<param name="location_id">1234</param>
					<param name="identity_type">verus</param>
					<param name="identity_id">567</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<!--
        <action name="track_message" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/track_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Mobile number of the user
                </doc>
            </param>


            <response>              
                <param name="tracking_id">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>             
            </response>


            <scenarios>             
                <scenario>
                    <doc>
                        Basic test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="mobile">61407909186</param>

                </scenario>
            </scenarios>



        </action>


        <action name="message_tracking_status" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/message_tracking_status/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="tracking_id">
                <doc>
                    your tracking id for this submission
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>     
--><!--

        <action name="incoming_feed" runat="server" enabled="false">
            <doc>
                Tells the server to start performing a bulk import of media from the specified url.
            </doc>

            <url>/incoming_feed/</url>

            <param name="provider_id">
                <doc>
                    The provider key
                </doc>
            </param>

            <param name="url">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <param name="build_date">
                <doc>
                    Date and time that this feed was constucted.
                </doc>
            </param>

            <param name="digest">
                <doc>
                    MD5 fingerprint for the entire feed
                </doc>
            </param>





            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>


        <action name="verify_user" runat="server" enabled="false">
            <doc>
                verify that a user has the following mobile number.
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>  

        <action name="login_member" runat="server" enabled="false">
            <doc>
                Login as a member
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="username">
                <doc>
                    Username of member
                </doc>
            </param>

            <param name="session">
                <doc>
                    the session id
                </doc>
            </param>            

            <param name="password">
                <doc>
                    MD5 password of user
                </doc>
            </param>

            <response>              
                <param name="username">
                    <doc>
                        The user name passed in
                    </doc>
                </param>             

                <param name="session">
                    <doc>
                        A session id for this user
                    </doc>
                </param>             

                <param name="id">
                    <doc>
                        The id of the user
                    </doc>
                </param>             

                <param name="api_member_token">
                    <doc>
                        An API token for this user
                    </doc>
                </param>             

            </response>


            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Login test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                    <param name="username">guest</param>
                    <param name="password">guest</param>

                    <expect status="error">                 
                        <param name="username">james</param>
                        <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                        <param name="id">-1</param>
                        <param name="api_member_token"/>
                    </expect>                   
                </scenario>             
            </scenarios>

        </action>                    

        <action name="new_member" runat="server" enabled="false">
            <doc>Creates a new member and assigns to a new campaign</doc>
            <url>/new_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="campaign_id">
                <doc>the session campaign to assign this member to</doc>
            </param>            
            <param name="username">
                <doc>Username of member</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|the pk_mediaitem of the users profile pic</doc>
            </param>            
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>

            <response />
        </action>   

        <action name="update_member" runat="server" enabled="false">
            <doc>Update a member</doc>
            <url>/update_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>       
            <response />
        </action>

        <action name="update_member_optional" runat="server" enabled="false">
            <doc>Update a member by optionally only giving the fields you want to update</doc>
            <url>/update_member_optional/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>      

            <param name="showbirthday" >
                <doc/>
            </param>
            <param name="occupation" >
                <doc/>
            </param>
            <param name="imhandle" >
                <doc/>
            </param>
            <param name="imname" >
                <doc/>
            </param>
            <param name="interestsgeneral" >
                <doc/>
            </param>
            <param name="interestsmusic" >
                <doc/>
            </param>
            <param name="interestsmovies" >
                <doc/>
            </param>
            <param name="intereststvshows" >
                <doc/>
            </param>
            <param name="interestsbooks" >
                <doc/>
            </param>
            <param name="aboutme" >
                <doc/>
            </param>


            <response />
        </action>

        <action name="member_send_message" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_send_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_write_whiteboard" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_write_whiteboard/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="body">
                <doc>the message body</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_message_mark_read" runat="server" enabled="false">
            <doc>mark a message as read</doc>
            <url>/member_message_mark_read/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="membermembermessage">
                <doc>the pk of the message to mark as read</doc>
            </param>            
            <response />
        </action>

        <action name="update_member_profile_picture" runat="server" enabled="false">
            <doc>Update a members profile picture</doc>
            <url>/update_member_profile_picture/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>the members ID</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|an ID</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign key</doc>
            </param>
        </action>
--><action name="mediaitem_upload_pull" runat="server" enabled="true" object="mediaitem" operation="create" group="upload">
			<doc>
				<short>Ingests a new media item into the server.</short>
				<full>
					Requires the media to be publicly accessible via the internet so that thumbwhere can download it.
					One of the paramaters supplied needs to be an md5 digest of the file you are uploading.
					This action will wait until the media item is uploaded before it returns. 
					This delay will depend on the network connection between the source and thumbwhere cloud.
				</full>
			</doc>
			<url>/mediaitem_upload_pull/</url>
			<param name="api_key">
				<doc>
                    API key for the registered application that is calling this method. An API key is provided to developers who have registered a campaign or a campaign application.
				</doc>
			</param>
			<param name="url">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested. This url must be publicy available. In the background, after this call returns, transcoding and feed generation for the media item will commence. </doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="campaign_id">
				<doc>The campaign that we want this item added to.</doc>
			</param>
			<param name="identity_key" optional="true">
				<doc>The identity key of the member uploading the file.</doc>
			</param>
			<param name="digest">
				<doc>An MD5 checksum to validate against. See the MetaWrap.Utility.MD5FileHash(string p_file_path) C# function.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<response>
				<param name="mediaitem_id">
					<doc>id of the license in use</doc>
				</param>
				<param name="url">
					<doc>The url of the xml feed to the new media item. It may be a few seconds before this is published. There are ways of being notified that a media item is fully injested via application callbacks.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple jpeg">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="url">http://www.massive.com.au/projects/333/panasonic.jpg</param>
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">This is a test message</param>
					<param name="digest">73CDCAF793B4FE85D10CB717DC261F65</param>
					<param name="privacy">2</param>
					<param name="license">6</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="video">
					<doc>
						Basic JPG Upload (Example for AFF)
					</doc>
					<param name="api_key">4d17e52d-b5ef-4b29-b459-e5a01aef6283</param>
					<param name="url">http://www.movly.com/Content/Movies/Savage_Grace/Trailers/Savage_Grace_mp4_movie_trailer/MP4/savage-grace-trailer-.mp4</param>
					<param name="subject">Savage Grace Movie Trailer</param>
					<param name="body">The true story of the beautiful and charismatic Barbara Daly, who married above her class to Brooks Baekeland, heir to the Bakelite plastics fortune. Their only child is a failure in his father's eyes, and as he matures and becomes increasingly close to his lonely mother, the seeds for tragedy are sown..</param>
					<param name="digest">B8A7551DEAB8E5B02359221156263111</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_create_clone" runat="server" enabled="true" object="campaign" operation="create" group="create">
			<doc>
				<short>Create a campaign based on an existing campaign.</short>
				<full>The will clone the campaign details, the deployment servers and the media definitions for a specified campaign.</full>
			</doc>
			<url>/campaign_create_clone/</url>
			<param name="master_key">
				<doc>The master key for this instance of ThumbWhere</doc>
			</param>
			<param name="campaign_id">
				<doc>The Campaign Key for the campaign that you want to clone.</doc>
			</param>
			<response>
				<param name="campaign_id">
					<doc />
				</param>
				<param name="api_key">
					<doc />
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>	
						Example of cloning an existing campaign.
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Name Of Campaign</param>
					<param name="description">Description of Campaign</param>
					<expect status="success">
						<param name="campaign_id" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--

        <action name="verify_number" runat="server" enabled="false">
            <doc>Verifies that a number is known to the ThumbWhere</doc>
            <url>/verify_number/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
                </doc>
            </param>

            <param name="number">
                <doc>The phone number that we want to find out about.</doc>
            </param>


            <response>
                <param name="exists">
                    <doc>If there is an identity/member pair for this number then this is true.</doc>
                </param>

                <param name="identity">
                    <doc>id of the identity that has this number</doc>
                </param>

                <param name="member">
                    <doc>id of the member id of the identity that has this number</doc>
                </param>

            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Do I exist?
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="number">+61-123-456</param>

                    <expect status="success">                   
                        <param name="identity"/>
                        <param name="member"/>
                    </expect>   

                </scenario>             
            </scenarios>


        </action>   
--><!--
        <action name="media_item_add_comment" runat="server" enabled="false">
            <doc>Comment on a media item</doc>
            <url>/media_item_add_comment/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member">
                <doc>the member uploading the file</doc>
            </param>            
            <param name="mediaitem">
                <doc>the member item we are commenting on</doc>
            </param>            
            <response />
        </action>

        <action name="update_media_item" runat="server" enabled="false">
            <doc>Update the description fields of a media item</doc>
            <url>/update_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
            <param name="subject">
                <doc>the title of the file</doc>
            </param>
            <param name="body">
                <doc>a description of the file</doc>
            </param>
            <param name="tags">
                <doc>any additional tags</doc>
            </param>            
            <param name="privacy">
                <doc>the privacy level 0 = public, 1 = friends, 2 = identity(s)</doc>
            </param>
            <param name="license">
                <doc>id of the license in use</doc>
            </param>
        </action>

        <action name="update_media_item_increment_view_count" runat="server" enabled="false">
            <doc>Update the view count of a media item by 1</doc>
            <url>/update_media_item_increment_view_count/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
        </action>

        <action name="delete_media_item" runat="server" enabled="false">
            <doc>Delete a media file</doc>
            <url>/delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item to delete</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_identity" runat="server" enabled="false">
            <doc>Adds a link between a media item and identity</doc>
            <url>/media_item_add_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_delete_identity" runat="server" enabled="false">
            <doc>Removes the link between a media item and identity</doc>
            <url>/media_item_delete_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_rating" runat="server" enabled="false">
            <doc>Give a rating to a media item</doc>
            <url>/media_item_add_rating/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>Media item this is a rating of</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign this rating belongs to</doc>
            </param>
            <param name="member">
                <doc>member who made this rating</doc>
            </param>
            <param name="ipaddress">
                <doc>ip address that posted the rating</doc>
            </param>
            <param name="cookie">
                <doc>cookie name?</doc>
            </param>
            <param name="reason">
                <doc>a description of the rating</doc>
            </param>
            <param name="score">
                <doc>the score this rating received</doc>
            </param>
            <param name="maxscore">
                <doc>the maximum score that could have been awarded for this rating</doc>
            </param>
            <response />
        </action>

        <action name="member_add_friend" runat="server" enabled="false">
            <doc>Allows a member to add a friend</doc>
            <url>/member_add_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to be-friend</doc>
            </param>
            <response />
        </action>

        <action name="member_delete_friend" runat="server" enabled="false">
            <doc>Allows a member to delete a friend or a friend request</doc>
            <url>/member_delete_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to de-friend</doc>
            </param>
            <response />
        </action>

        <action name="new_member_group" runat="server" enabled="false">
            <doc>Allows a member to add a new group</doc>
            <url>/new_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="founder">
                <doc>ID of the member creating the group</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for this group</doc>
            </param>
            <response />
        </action>

        <action name="update_member_group" runat="server" enabled="false">
            <doc>Allows a member group to be updated</doc>
            <url>/update_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>id of the group to be deleted</doc>
            </param>
            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for the group</doc>
            </param>
            <response />
        </action>

        <action name="delete_member_group" runat="server" enabled="false">
            <doc>Deletes an entire member group</doc>
            <url>/delete_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the member group to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign to remove the group from</doc>
            </param>
            <response />
        </action>

        <action name="member_join_group" runat="server" enabled="false">
            <doc>Allows a member to join a group</doc>
            <url>/member_join_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to join</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="member_leave_group" runat="server" enabled="false">
            <doc>Allows a member to leave a group</doc>
            <url>/member_leave_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to leave</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="new_media_item_collection" runat="server" enabled="false">
            <doc>Create a media item collection</doc>
            <url>/new_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>collection title/name</doc>
            </param>
            <param name="media">
                <doc>the media type. if this is empty this collection can handle any media type. 
                     valid values are wallpaper,video,message,audio</doc>
            </param>
            <param name="description">
                <doc>a description</doc>
            </param>
            <param name="member">
                <doc>member id of the collection creator</doc>
            </param>
            <param name="public">
                <doc>True|False</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="delete_media_item_collection" runat="server" enabled="false">
            <doc>Deletes a media item collection</doc>
            <url>/delete_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>Id of the media item collection to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_add_media_item" runat="server" enabled="false">
            <doc>Adds a media item to a media item collection</doc>
            <url>/media_item_collection_add_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item</doc>
            </param>
            <param name="displayorder">
                <doc>order within the collection</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_delete_media_item" runat="server" enabled="false">
            <doc>Removes a media item from a media item collection</doc>
            <url>/media_item_collection_delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item to remove</doc>
            </param>
            <response />
        </action>
--></actions>
	<actions version="V1.1" service="Competition">
		<action name="member_update_mediaitem" runat="server" enabled="true" object="member" operation="update" group="mediaitems">
			<doc>
				<short>Updates a MediaItems's information</short>
				<full>
					If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/member_update_mediaitem/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member making this change. This member must own this media item to make the change.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="subject">
				<doc>
					(optional) The subject text for the media item.
				</doc>
			</param>
			<param name="body">
				<doc>
					(optional) The body text of the media item.
				</doc>
			</param>
			<param name="privacy">
				<doc>
					(optional) 0 = in all feeds, 1 = only in member feeds and identity feeds, 2 = only in identity feeds, 3 or above - not in any feeds
				</doc>
			</param>
			<param name="filter">
				<doc>
					(optional)  If this is true (default is false) then the subject and body will be filtered by the global and campaign specific user generated content filters.
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">This Is A Better Subject</param>
					<param name="body">This is a Beter Body</param>
					<expect status="success" />
				</scenario>
				<scenario name="simple">
					<doc>
						Only update privacy
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="privacy">0</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_list_mediaitem_transformations" runat="server" enabled="true" object="member" operation="enumerate" group="mediaitems">
			<doc>
				<short>Returns a list of all the transformations for a media item</short>
				<full />
			</doc>
			<url>/member_list_mediaitem_transformations/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					long - The media item we want to get all the transformations for
				</doc>
			</param>
			<response>
				<doc>
					A list of all the transformations for a media item
				</doc>
				<param name="url">
					<doc>
						The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_mediaitem_transformation" runat="server" enabled="true" object="member" operation="create" group="mediaitems">
			<doc>
				<short>Adds a transformation to a media item</short>
				<full>
					All newly added transformations get added to the end. A transformation consists of two strings a #type# and an optional #argument#.
				</full>
			</doc>
			<url>/member_add_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					long - The media item we want to add the translation to.
				</doc>
			</param>
			<param name="type">
				<doc>
					string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
					string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Adds a 'rotate left' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Adds a 'mirror' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Adds a 'caption bottom' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_mediaitem_transformation" runat="server" enabled="true" object="member" operation="update" group="mediaitems">
			<doc>
				<short>Sets the type and argument of the specified translation.</short>
				<full />
			</doc>
			<url>/member_set_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the member who owns this mediaitem that the transformation is being added to.
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
					long - The transformation we want to update
				</doc>
			</param>
			<param name="type">
				<doc>
					string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
					string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc>
					A list of all the transformations for a media item
				</doc>
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_delete_mediaitem_transformation" runat="server" enabled="true" object="member" operation="delete" group="mediaitems">
			<doc>
				<short>Deletes a transformation for a specified media item</short>
				<full />
			</doc>
			<url>/member_delete_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
					long - The transformation we want to delete
				</doc>
			</param>
			<response>
				<doc>
					Simple success or failure.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_mediaitem_comment" runat="server" enabled="true" object="member" operation="write" group="mediaitems">
			<doc>
				<short>Add a comment to an existing media item.</short>
				<full />
			</doc>
			<url>/member_add_mediaitem_comment/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="mediaitem_id">
				<doc>Ths id of the mediaitem that we are adding this comemnt to</doc>
			</param>
			<param name="subject">
				<doc>The subject of the comment</doc>
			</param>
			<param name="body">
				<doc>The body of the comment</doc>
			</param>
			<response>
				<doc />
				<param name="mediaitem_id">
					<doc>
						The created comment
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add Comment
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">Hello</param>
					<param name="body">Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Add a friend.</short>
				<full />
			</doc>
			<url>/member_add_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to add.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_friend">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Remove a friend.</short>
				<full />
			</doc>
			<url>/member_remove_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to remove.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_member_token_friend">5B36AAC5-B600-4A89-85AF-5F5F4BDA103F</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Add a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_add_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to trust.</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<param name="proxy">
				<doc>If true then this trusted member can act as a proxy for the trusting member</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<param name="proxy">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Remove a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_remove_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to remove from a trusted relationship</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Reset password of the member.</short>
				<full>Used to reset the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_reset_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_reset_identity_secret^. If you want to reset both id and secret at the same time, use ^member_reset_identity_credentials^.</full>
			</doc>
			<url>/member_reset_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Get a summary of the member.</short>
				<full />
			</doc>
			<url>/member_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or application</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for the memer we want a summary of</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code_by_identity_id" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code_by_identity_id/</url>
			<param name="master_key">
				<doc>Master key for this instance of ThumbWhere</doc>
			</param>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="id">
				<doc>
					Identity id
				</doc>
			</param>
			<param name="type">
				<doc>
					Identity type
				</doc>
			</param>
			<param name="alphabet">
				<doc>
					string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
					integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
						The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
						Request code for a member token based on an identity id
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">member</param>
					<param name="id">drmiaow</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member token that you want turned into a lookup code
				</doc>
			</param>
			<param name="alphabet">
				<doc>
                    string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
                    integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_lookup_code" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Returns an #api_member_token# associated with a lookup #code#</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_lookup_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to lookup.
				</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_revoke_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>If the supplied #code# exists, it is deleted.</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_revoke_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to revoke.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_value" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the value from the name value pair collection for the competition specified by #key".</short>
				<full />
			</doc>
			<url>/competition_get_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_value" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the value of the name value pair for a competition.</short>
				<full />
			</doc>
			<url>/competition_set_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the value of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_values" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the values from the name values pair for the competitions external application.</short>
				<full>                                      
					   The competition must be a competition of the external application.
					   The returned values is encrypted with the cruds encryption key.
				</full>
			</doc>
			<url>/competition_get_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_values" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the values of the name values pair for an competition who is a competition of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The competition must be a competition of the external application.					   
				</full>
			</doc>
			<url>/competition_set_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="moon">james2</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_add_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Adds a name value pair definition to a competition.</short>
				<full>This is shared across all competitions for this campaign.</full>
			</doc>
			<url>/competition_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Deletes a name value pair definition for a competition.</short>
				<full>This will delete the name value pair definition called #name# and all values of #name# across all competitions for this campaign.</full>
			</doc>
			<url>/competition_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_summary" runat="server" enabled="true" object="competition" operation="read" group="crud">
			<doc>
				<short>Get a summary of the competition. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/competition_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The Key for competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified competition
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_create_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Create a new round for a competition.</short>
				<full />
			</doc>
			<url>/competition_create_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_update_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Update an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_update_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the specified round.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Delete an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_delete_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete the specified round
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_add_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Adds a name value pair definition for an application.</short>
				<full>This is shared across all campaigns that use this application.</full>
			</doc>
			<url>/application_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_delete_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Deletes a name value pair definition for an application.</short>
				<full>This will delete the name value pair definition and values for all applications across all campaigns that use this applicaton.</full>
			</doc>
			<url>/application_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_get_summary" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Get a summary of the application. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/application_get_summary/</url>
			<param name="api_key">
				<doc>The API key for external application.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified application
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_username" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update username of the member.</short>
				<full>Used to change the username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the password of the member, use ^member_update_password^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_username/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the username of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the username of.</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the username of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_label" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity label of the identity for a member.</short>
				<full>An identity label provides a human readable label for an identity. The 'type' might be 'twitterv2api' but the label would be 'Twitter'</full>
			</doc>
			<url>/member_update_identity_label/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity.</doc>
			</param>
			<param name="label">
				<doc>The identity label that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the identity label for an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="label">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_id" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="id">
				<doc>The identity id that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="id">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Create an identity for this member.</short>
				<full />
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="type">
				<doc>The identity type.</doc>
			</param>
			<param name="id">
				<doc>The identity id.</doc>
			</param>
			<param name="secret">
				<doc>The identity secret.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="type">mobile_email</param>
					<param name="id" />
					<param name="secret">blah</param>
					<expect status="success">
						<param name="api_identity_token">
							<doc>The api identity token - the represents this identity wrt this api key</doc>
						</param>
						<param name="id">
							<doc>The id of the identity</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_delete" runat="server" enabled="true" object="member" operation="delete" group="crud">
			<doc>
				<short>Delete the specified Member.</short>
				<full>Marks a member as deleted - eventualy this member is purged from the database.</full>
			</doc>
			<url>/member_delete/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete this member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_login" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and a username and password pair</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<expect status="success">
						<param name="api_member_token">
							<doc>Anonymous</doc>
						</param>
						<param name="api_member_token">
							<doc>The name of the member</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_login_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and an identity.</short>
				<full>This call takes the type, id and secret of an identity and returns the member that owns this identity. If you want to authenticate against the member credentials use type of 'thumbwhere'.</full>
			</doc>
			<url>/member_login_identity/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="type">
				<doc>The type of identity that you want to login as.</doc>
			</param>
			<param name="id">
				<doc>The id of the identity that you want to login as.</doc>
			</param>
			<param name="secret">
				<doc>The secret of the identity you want to login as. You must prove you are who you say you are by providing the secret.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member in the context of the API key.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API identity token for this Member's identity.</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member using the internal 'thumbwhere' identity.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">thumbwhere</param>
					<param name="id">james</param>
					<param name="secret">james</param>
					<expect status="success">
						<param name="username">
							<doc>The name of the member</doc>
						</param>
						<param name="api_member_token">
							<doc>A unique token that represents this member in the context of the API key.</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_username_available" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Return true if the proposed #username# is available.</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="available">
					<doc>True if the username is available, false if it is not</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<expect status="success">
						<param name="available">
							<doc>True if the username is available, false if it is not</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_credentials" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update credentials of the member.</short>
				<full>Used to change the password and username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update just the username of the member, use ^member_update_username^. If you want to update just the password, use ^member_update_password^.</full>
			</doc>
			<url>/member_update_credentials/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the credentials of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the credentials of..</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update username and password of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<param name="new_password">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update password of the member.</short>
				<full>Used to change the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the password of.</doc>
			</param>
			<param name="password">
				<doc>The current password of the member you want to change the password of.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Adds a member to the application and sets the values of the name value pairs.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_add_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="application_id">
				<doc>he application key for the application that we want to add the member to.</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The api member key for the member for this application.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Removes a member from an application.</short>
				<full />
			</doc>
			<url>/member_remove_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_test_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Tests a Member's subscription to an application</short>
				<full>
					This will perform a test of an application using a Member's name value pairs.
					Eg. For Twitter it will end up calling the 'login' API call provided by Twitter to ensure that the 
					details provided will work.
				</full>
			</doc>
			<url>/member_test_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple test.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_bandwidthusage_create" runat="server" enabled="true" object="campaign" operation="update" group="reporting">
			<doc>
				<short />
				<full />
			</doc>
			<url>/campaign_bandwidthusage_create/</url>
			<param name="api_key">
				<doc />
			</param>
			<param name="api_member_token">
				<doc />
			</param>
			<param name="actor">
				<doc />
			</param>
			<param name="action">
				<doc />
			</param>
			<param name="target">
				<doc />
			</param>
			<param name="magnitide">
				<doc />
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc />
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="actor">Colonel Mustard</param>
					<param name="action">Lead Pipe</param>
					<param name="target">Reverend Green</param>
					<param name="magnitude">11</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_get_summary" runat="server" enabled="true" object="campaign" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>
					The member must be a member of the external application.
					The returned values are encrypted with the applications encryption key if they are specified as encrypted over the wire in the name value pair definitions for this application.
				</full>
			</doc>
			<url>/campaign_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<response>
				<doc />
				<param name="name">
					<doc>
						The name of the campaign
					</doc>
				</param>
				<param name="description">
					<doc>
						 The name of the description						
					</doc>
				</param>
				<param name="apps" array="true" type="app">
					<doc>
						Collection of applications
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
						Request summary for the specified campaign.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the compeitionwinner flag for a competition entry.</short>
				<full>Sets the value for the entry competitionwinner attribute which is used to signify that this entry is the winner of a round.</full>
			</doc>
			<url>/competition_entry_set_competitionwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionwinner.</doc>
			</param>
			<param name="competitionwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure in generic status element.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition winner
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the competitionfinalist flag for a competition entry.</short>
				<full>
                Sets the value for the entry competitionfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_competitionfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionfinalist.</doc>
			</param>
			<param name="competitionfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundwinner flag for a competition entry.</short>
				<full>          
                Sets the value for the entry roundwinner attribute which is used to signify that this entry is the winner of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundwinner.</doc>
			</param>
			<param name="roundwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the round winner.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundfinalist flag for a competition entry.</short>
				<full>              
                Sets the value for the entry roundfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundfinalist.</doc>
			</param>
			<param name="roundfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as round finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_approved" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the approved flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_approved/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="approved">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as approved.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="approved">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_deleted" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the deleted flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_deleted/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="deleted">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as deleted.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="deleted">true</param>
					<expect status="sucess">
						<doc>No data returned - Simple sucess or failure.</doc>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_rejected" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the rejected flag for a competition entry.</short>
				<full>          
                    Marks an entry as rejected.
				</full>
			</doc>
			<url>/competition_entry_set_rejected/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="rejected">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as rejected.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="rejected">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote_confirm" runat="server" enabled="true" object="competition" operation="update" group="vote">
			<doc>
				<short>Confirms a vote on an entry in a competition.</short>
				<full>                      
                    This is normally used via SMS or via an email form as a way og making sure that the vote was made from a real email address or mobile phone.
				</full>
			</doc>
			<url>/competition_vote_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="vote_confirmation_code">
				<doc>The code that can be used to validate a vote..</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm a vote.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="vote_confirmation_code">g1gpwa</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote" runat="server" enabled="true" object="competition" operation="create" group="vote">
			<doc>
				<short>Votes for an entry in a competition.</short>
				<full>                                                  
                    This creates a pending vote for an entry in a competition. A code is returned. The vote will not be counted unless it is confirmed by a call to ^competition_vote_confirm^.
				</full>
			</doc>
			<url>/competition_vote/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>Represents the member doing the voting.</doc>
			</param>
			<param name="code">
				<doc>The code that represnts a vote for an entry in a competition.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Vote for an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">???</param>
					<param name="code">???</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create" runat="server" enabled="true" object="member" operation="create" group="crud">
			<doc>
				<short>Creates a new Member.</short>
				<full>                                                              
                    If a parameter is not provided, then the correponding field is not updated from the defaults. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/member_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="salutation">
				<doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
				</doc>
			</param>
			<param name="username">
				<doc>
                    String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<param name="password">
				<doc>
					String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<response>
				<doc>Returns an API Member Token.</doc>
				<param name="api_member_token">
					<doc>
                        API Member Token that represents this member making this change. This API Member Token is linked to the #api_key# that made this call and will not be valiud when used with a different API Key.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Member Creation
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--action name="member_update" runat="server" enabled="true" object="member" operation="update" group="crud" >
            <doc>   
                <short>Updates a Member's information.</short>
                <full>              
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
                </full>
            </doc>
            <url>/member_update/</url>

            <param name="api_key">
                <doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
            </param>

            <param name="api_member_token"  >
                <doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
                </doc>
            </param>

            <param name="email">
                <doc>
                    String - The email address for the membmer. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="salutation">
                <doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
                </doc>
            </param>            

            <param name="username">
                <doc>
                    String - The display name for the user - We do not check for uniqueness.
                </doc>
            </param>            


            <param name="firstname">
                <doc>
                    String - The first name of the member
                </doc>
            </param>            

            <param name="lastname">
                <doc>
                    String - The last name of the member
                </doc>
            </param>            

            <param name="phonemobile">
                <doc>
                    String - The mobile phone number for the member. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="postalpostcode">
                <doc>
                    String - The postcode for the user for their postal address
                </doc>
            </param>            

            <param name="receiveupdates">
                <doc>
                    Boolean - Wether of not the member wants to recieve updates.
                </doc>
            </param>    

            <response>
                <doc>No data returned - Simple sucess or failure.</doc>
            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Member Update
                    </doc>

                    <param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
                    <param name="api_member_token"/>
                    <param name="email">james@massive.com.au</param>
                    <param name="receiveupdates">false</param>
                    <param name="username">DrMiaow</param>
                    <param name="firstname">James</param>
                    <param name="lastname">Mc Parlane</param>
                    <param name="phonemobile">+1-000-000-000</param>
                    <param name="postalpostcode">2204</param>
                    <param name="postalstate">NSW</param>

                    <expect status="success">                                           
                    </expect>   

                </scenario>             
            </scenarios>

        </action-->
		<action name="member_get_feed" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the url for a Member's feed.</short>
				<full />
			</doc>
			<url>/member_get_feed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					The api member token for the member
				</doc>
			</param>
			<param name="type">
				<doc>
					The type of the feed
				</doc>
			</param>
			<response>
				<doc>
					Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
						The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="type">html</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
						Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_url" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #member# using their member id.</short>
				<full>                                      
                    Returns the URL for the specified #member#

                    This function is in the API for convenience. It is possible to calculate the url for a member.

                    From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                    Then take the member id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                    Then take the member and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                    If you add all these together you end up with 

                    http://core.thumbwhere.com/members/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="member">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_value" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the value from the name value pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned value is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_value" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the value of the name value pair for an member who is a member of an external application.</short>
				<full>                                      
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_error" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the error flag for a member in an application.</short>
				<full>
					This is called by external applications when they want to signify that there has been a error that requires the members attention. Eg. If they change their Twitter password so we can't make posts to Twitter on their behalf any more because the password we have is out of date.
				</full>
			</doc>
			<url>/member_set_application_error/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="error">
				<doc>
					bool - the value of the failed flag.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Set a Member's error flag.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="error">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_values" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_values" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the values of the name values pair for an member who is a member of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_campaign_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member in the campaign
				</doc>
			</param>
			<response>
				<doc />
				<param name="username">
					<doc>
                        The username of the member.
					</doc>
				</param>
				<param name="apps" type="array" class="app">
					<doc>
                        Collection of app element descriptions
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_move_between_members" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Moves a media item from one member to another. It will end up in the 'member' identity in the destination</short>
				<full />
			</doc>
			<url>/mediaitem_move_between_members/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token_from">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="api_member_token_to">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token_from">86f656f8-0bd0-4e87-b947-79f95aa2165f</param>
					<param name="api_member_token_to">0638a6a9-a041-45bd-ace4-eaea85a6c985</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_update" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Updates a MediaItems's information</short>
				<full>          
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/mediaitem_update/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="subject">
				<doc>
                    (optional) The subject text for the media item.
				</doc>
			</param>
			<param name="body">
				<doc>
					(optional) The body text of the media item.
				</doc>
			</param>
			<param name="privacy">
				<doc>
					(optional) 0 = in all feeds, 1 = only in member feeds and identity feeds, 2 = only in identity feeds, 3 or above - not in any feeds
				</doc>
			</param>
			<param name="filter">
				<doc>
					(optional)  If this is true (default is false) then the subject and body will be filtered by the global and campaign specific user generated content filters.
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">This Is A Better Subject</param>
					<param name="body">This is a Beter Body</param>
					<expect status="success" />
				</scenario>
				<scenario name="simple">
					<doc>
						Only update privacy
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="privacy">0</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_get_url" runat="server" enabled="true" object="mediaitem" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #mediaitem#</short>
				<full>

                        This function is in for convenience. It is possible to calculate the url for a media item.

                        From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                        Then take the mediaitem id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                        Then take the mediaitem and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                        If you add all these together you end up with 

                        http://core.thumbwhere.com/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/mediaitem_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the mediaitem. If #redirect# is true, then this will actually redirect you to the Media Item's XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_list_transformations" runat="server" enabled="true" object="mediaitem" operation="enumerate" group="transformation_id">
			<doc>
				<short>Returns a list of all the transformations for a media item</short>
				<full />
			</doc>
			<url>/mediaitem_list_transformations/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to get all the transformations for
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_add_transformation" runat="server" enabled="true" object="mediaitem" operation="create" group="transformation_id">
			<doc>
				<short>Adds a transformation to a media item</short>
				<full>
                    All newly added transformations get added to the end. A transformation consists of two strings a #type# and an optional #argument#. 
				</full>
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to add the translation to.
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Adds a 'rotate left' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Adds a 'mirror' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Adds a 'caption bottom' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_transformation" runat="server" enabled="true" object="mediaitem" operation="update" group="transformation_id">
			<doc>
				<short>Sets the type and argument of the specified translation.</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to update the transformation for.
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
                    long - The transformation we want to update
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_transformation" runat="server" enabled="true" object="mediaitem" operation="delete" group="transformation_id">
			<doc>
				<short>Deletes a transformation for a specified media item</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to delete the transformation from
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
                    long - The transformation we want to delete
				</doc>
			</param>
			<response>
				<doc>
                    Simple success or failure.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_rate" runat="server" enabled="true" object="mediaitem" group="ratings" operation="update">
			<doc>
				<short>Adds a rating to a MediaItem</short>
				<full>When called this returns the latest calculated rating of the media item.</full>
			</doc>
			<url>/mediaitem_rate/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    Optional API Member Token that represents the member making this rating. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="score">
				<doc>
                    The rating score. If the rating was 3 out of 5 stars, then this valur would be 3.
				</doc>
			</param>
			<param name="maxscore">
				<doc>
                    The rating maxscore. What the rating is "out of" If the rating was 3 out of 5 stars, then this value would be 5. 
				</doc>
			</param>
			<param name="ipaddress">
				<doc>
                    The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie">
				<doc>
                    A unique identifier. We ignore any ratings for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason">
				<doc>
                    A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the newly calculated rating for the media item.
				</doc>
				<param name="rating">
					<doc>
                        The actual rating for this media item.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="score">1</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
                        Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="score">3</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_viewed" runat="server" enabled="true" object="mediaitem" group="metrics" operation="update">
			<doc>
				<short>Increments the viewcount for a #mediaitem#</short>
			</doc>
			<url>/mediaitem_viewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are incrementing
				</doc>
			</param>
			<response>
				<doc>
					Returns the latest tally of views of the media item.
				</doc>
				<param name="mediaitem_id">
					<doc>The mediaitem that we incremented.</doc>
				</param>
				<param name="views">
					<doc>The latest number of views.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Increment numer of views
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="views" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_complain" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Adds a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_complain/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					Optional API Member Token that represents the member making this complaint. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="ipaddress" optional="true">
				<doc>
					The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie" optional="true">
				<doc>
					A unique identifier. We ignore any complaints for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason" optional="true">
				<doc>
					A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
					Returns the newly calculated rating for the media item.
				</doc>
				<param name="complaint_id">
					<doc>
						The id of the complaint created
					</doc>
				</param>
				<param name="complaints">
					<doc>
						The current number of complaints for this mediaitem
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reason">Offends my value system</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
						Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="reason">This bird wets it's nest</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_complaint" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Deletes a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_delete_complaint/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="mediaitemcomplaint_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="mediaitemcomplaint_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_censored" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'censored' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_censored/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the censored flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="censored">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_reviewed" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'reviewed' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_reviewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the 'reviewed' flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reviewed">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_create" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>Creates a single use ticket that can be used to upload content directly into thumbwhere. </short>
				<full>
                        This create an upload ticket that can be used with ^mediaitem_upload_push^.
				</full>
			</doc>
			<url>/mediaitem_upload_push_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
				</doc>
			</param>
			<param name="api_identity_token">
				<doc>
                    API Identity Token that we want the newly created media item to appear to be submitted by (eg. The mobile phone identity, or the Flikr identity).
				</doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<param name="maxsize" optional="true" default="10485760">
				<doc>The maximum size in bytes of file that we are allowed to upload.</doc>
			</param>
			<response>
				<doc>The upload ticket.</doc>
				<param name="ticket">
					<doc>The upload push ticket</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token" />
					<param name="api_identity_token" />
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">testdata</param>
					<param name="privacy">0</param>
					<param name="license">-1</param>
					<param name="maxsize">10485760</param>
					<expect status="success">
						<param name="ticket" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>
                    Uploads a media item directly into ThumbWhere
				</short>
				<full>
                        Allows you to peform a HTTP POST file upload directly into ThumbWhere. The media item that is created is based on the meta-data 
                        supplied in the call to ^mediaitem_upload_push_create^.
				</full>
			</doc>
			<url>/mediaitem_upload_push/</url>
			<param name="ticket">
				<doc />
			</param>
			<param name="file" upload="true">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="ticket" />
					<param name="file" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_query" runat="server" enabled="true" object="mediaitem" operation="read" group="upload">
			<doc>
				<short>Queries the status of an upload push in progress.</short>
				<full>Returns the status, number of bytes uploaded so far and the data rate.</full>
			</doc>
			<url>/mediaitem_upload_push_query/</url>
			<param name="ticket">
				<doc />
			</param>
			<response>
				<doc>Returns the status, number of bytes uploaded so far and the data rate.</doc>
				<param name="api_member_token">
					<doc>The API Member token of the member that has uploaded this media item.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API Identity token that was used to upload this media item.</doc>
				</param>
				<param name="member">
					<doc>The ID of the member that has uploaded this media item.</doc>
				</param>
				<param name="member_url">
					<doc>XML to the members XML feed.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was created when this file was uploaded.</doc>
				</param>
				<param name="size">
					<doc>The number of bytes that have been uploaded..</doc>
				</param>
				<param name="started">
					<doc>The time at which this upload started.</doc>
				</param>
				<param name="completed">
					<doc>The time at which this upload was completed..</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Query - Requires valid ticket
					</doc>
					<param name="ticket" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_confirm" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Confirms a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_query" runat="server" enabled="true" object="competition" operation="read" group="entry">
			<doc>
				<short>Queries a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_query/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Query a pending competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_create" runat="server" enabled="true" object="competition" operation="create" group="entry">
			<doc>
				<short>Creates an competition entry</short>
				<full>Takes a media item and enters it into a competition.</full>
			</doc>
			<url>/competition_entry_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.</doc>
			</param>
			<param name="round">
				<doc>The id of the competition round that we are adding this media item to</doc>
			</param>
			<param name="mediaitem_id">
				<doc>The id of the mediaitem being entered into the competition</doc>
			</param>
			<param name="approved">
				<doc>If this is true then the entry is created as approved. If you leave this parameter out the entry will be by default unapproved.</doc>
			</param>
			<response>
				<doc>Returns the code needed to approve/reject and vote for the entry..</doc>
				<param name="votecode">
					<doc>The code that is used to approve and vote for this entry.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Create a competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">89b4e3cb-38da-4907-aefa-316f99baf4f4</param>
					<param name="round">2</param>
					<param name="mediaitem_id">77</param>
					<expect status="success">
						<param name="votecode" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_login" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Login using an #api_key#/#api_member_token# pair.</short>
				<full>This is used to provide the same response as a normal username/password login (using ^member_login^ and ^member_login_identity^) from just the #api_member_token#</full>
			</doc>
			<url>/api_member_token_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API Member Token that we want to login as.</doc>
			</param>
			<response>
				<doc>The name of the Member and a direct url to their XML feed.</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="feedurl">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Login as member using the saved member token
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">d6029931-d37a-4dd2-8075-e6a41f4d5187</param>
					<expect status="success">
						<param name="username">
							<doc>Anonymous</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="invite" runat="server" enabled="true" object="application" operation="write" group="invite">
			<doc>
				<short>Creates an invitation that can be sent out to the provided #email#.</short>
				<full>Invitations are associated with the provided #api_key#</full>
			</doc>
			<url>/invite/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="email">
				<doc>The email adddress to add the invitation to.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure..</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Invite james to use the application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="email">james@massive.com.au</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_validate" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Validates #api_identity_token# and returns its current state.</short>
				<full>An API Identity Token or an API Key can be 'revoked' due to abuse.</full>
			</doc>
			<url>/api_identity_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Identity Token to validate.</doc>
			</param>
			<response>
				<doc>Returns the state of the API Identity Token.</doc>
				<param name="state">
					<doc>The state of the API Identity Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Identity Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_query" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API identity token request.</short>
				<full>
                This should be performed after a call to ^api_identity_token_request^ and should pass in the code returned by that call. 
                 The api identity_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_identity_token_request^.
				</full>
			</doc>
			<url>/api_identity_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>
                        Returns the status of the request, its expiry time in seconds and if it has been completed, the API Identity Token itself.
				</doc>
				<param name="request">
					<doc>If the API Identity Token is ready for use, this will be 'ready' and the #api_identity_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Identity Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Requests an API Identity Token.</short>
				<full>
                        After making the request, you need complete the request with a call to ^api_identity_token_request_authenticate^. This call should only be made if you are satisfed that the identity 
                        has been proven to belong to the person asserting that they own it.         
                        If this identity is a mobile phone, you have the option to SMS or MMS #code# to #number# to complete the request.
                        Once the request is completed, make a call to ^api_identity_token_request_query^ with the returned #code# as a parameter to get the #api_identity_token# and the #api_member_token#.
				</full>
			</doc>
			<url>/api_identity_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="api_member_token">
				<doc>Member that this identity will be added to. If this is blank and this is not a pre-existing member then a new member will be created after this request is completed</doc>
			</param>
			<param name="id">
				<doc>The identity id - eg email address or mobile phone number.</doc>
			</param>
			<param name="type">
				<doc>The identity type</doc>
			</param>
			<response>
				<doc>If #type# is 'mobile' it will return with the #code# that needs to be SMSed to the provided #number#.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_identity_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_identity_token_request_query^ should return the new API identity_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Assert that you own the email address drmiaow@gmail.com
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">eb21b2a8-3f3c-49ba-8c5a-f0f9d511f68b</param>
					<param name="id">drmiaow@gmail.com</param>
					<param name="type">email</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_authenticate" runat="server" enabled="true" object="identity" operation="create" group="tokens">
			<doc>
				<short>Authenticates an API Identity Token Request made by a previous call to ^api_identity_token_request^.</short>
				<full>This enables an application to vouch for the validity of an Identity.</full>
			</doc>
			<url>/api_identity_token_request_authenticate/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>Returns with the api_identity_token that has been created for the corresponding member represented by the api_member_token</doc>
				<param name="api_identity_token">
					<doc>This is the api identity token that was created or found matching the original request..</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This be the same as the one supplied to ^api_identity_token_request^, or if one was supplied, it will be a be for a newly created Member.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_validate" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Validates #api_member_token# and returns its current state. An API Member Token or an API Key can be 'revoked' due to abuse. </short>
			</doc>
			<url>/api_member_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Member Token to validate.</doc>
			</param>
			<response>
				<doc>The state of the API Member Token.</doc>
				<param name="state">
					<doc>The state of the API Member Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Member Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request_query" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API request.</short>
				<full>
                    This should be performed after a call to ^api_member_token_request^ and should pass in the code returned by that call. 
                    The api member_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_member_token_request^.
				</full>
			</doc>
			<url>/api_member_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Member Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_member_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_member_token_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the current API Member Token request</doc>
				<param name="request">
					<doc>If the API Member Token is ready for use, this will be 'ready' and the #api_member_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Member Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Member Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Member Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Requests an API Member Token.</short>
				<full>After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_member_token_request_query^ with the returned #code# as a parameter.</full>
			</doc>
			<url>/api_member_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number that it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_member_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_member_token_request_query^ should return the new API member_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_validate" runat="server" enabled="true" object="application" operation="read" group="key">
			<doc>
				<short>Validates #api_key# and returns its current state</short>
				<full>An API key can be 'revoked' due to abuse. </full>
			</doc>
			<url>/api_key_validate/</url>
			<param name="api_key">
				<doc>
                    API Key for the registered application that is calling this method. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.
				</doc>
			</param>
			<response>
				<doc>Returns the state of the API Key.</doc>
				<param name="state">
					<doc>The state of the API Key.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Key
					</doc>
					<param name="api_key">27aba919-ac95-46f2-ad7d-e55c0373a7c1</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request_query" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Queries the state of an API Key request.</short>
				<full>              
                    This is a back end API call - this is not part of the public API. 

					This should be performed after a call to ^api_key_request^ and should pass in the code returned by that call. 
                    The api key details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_key_request^.
				</full>
			</doc>
			<url>/api_key_request_query/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_key_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_key_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the request and the number of seconds remaining.</doc>
				<param name="request">
					<doc>If the API Key is ready for use, this will be 'ready' and the #api_key# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Key request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_key">
					<doc>The API Key returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Key that will not exist
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="code">mamapda</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Requests an API Key for an external application. This will register the external application against the specified user.</short>
				<full>
						After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_key_request_query^ with the returned #code# as a parameter. 
						If the name and the URL is for an existing application then the api_key for that pre-existing application will be returned.
				</full>
			</doc>
			<url>/api_key_request/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="name">
				<doc>The name of the application to be registered.</doc>
			</param>
			<param name="url">
				<doc>The url of the application to be registsted.</doc>
			</param>
			<param name="description">
				<doc>A description for the application to be registered.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_key_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_key_request_query^ should return the new API key</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Test Application</param>
					<param name="url">http://app.thumbwhere.com.au/test</param>
					<param name="description">Test Application</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="location_get_identity_ad" runat="server" enabled="true" object="location" operation="read" group="advertising">
			<doc>
				<short>For the specified location and individial, return an ad tailored to that individual at that location.</short>
			</doc>
			<url>/location_get_identity_ad/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="location_type">
				<doc>The location type for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="location_id">
				<doc>The location id for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_type">
				<doc>The identity type for the identity of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_id">
				<doc>The identity id for the identity of the individual this ad is targeted at.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Return a location aware add targeted at an individual by an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="location_type">meter</param>
					<param name="location_id">1234</param>
					<param name="identity_type">verus</param>
					<param name="identity_id">567</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<!--
        <action name="track_message" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/track_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Mobile number of the user
                </doc>
            </param>


            <response>              
                <param name="tracking_id">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>             
            </response>


            <scenarios>             
                <scenario>
                    <doc>
                        Basic test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="mobile">61407909186</param>

                </scenario>
            </scenarios>



        </action>


        <action name="message_tracking_status" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/message_tracking_status/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="tracking_id">
                <doc>
                    your tracking id for this submission
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>     
--><!--

        <action name="incoming_feed" runat="server" enabled="false">
            <doc>
                Tells the server to start performing a bulk import of media from the specified url.
            </doc>

            <url>/incoming_feed/</url>

            <param name="provider_id">
                <doc>
                    The provider key
                </doc>
            </param>

            <param name="url">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <param name="build_date">
                <doc>
                    Date and time that this feed was constucted.
                </doc>
            </param>

            <param name="digest">
                <doc>
                    MD5 fingerprint for the entire feed
                </doc>
            </param>





            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>


        <action name="verify_user" runat="server" enabled="false">
            <doc>
                verify that a user has the following mobile number.
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>  

        <action name="login_member" runat="server" enabled="false">
            <doc>
                Login as a member
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="username">
                <doc>
                    Username of member
                </doc>
            </param>

            <param name="session">
                <doc>
                    the session id
                </doc>
            </param>            

            <param name="password">
                <doc>
                    MD5 password of user
                </doc>
            </param>

            <response>              
                <param name="username">
                    <doc>
                        The user name passed in
                    </doc>
                </param>             

                <param name="session">
                    <doc>
                        A session id for this user
                    </doc>
                </param>             

                <param name="id">
                    <doc>
                        The id of the user
                    </doc>
                </param>             

                <param name="api_member_token">
                    <doc>
                        An API token for this user
                    </doc>
                </param>             

            </response>


            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Login test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                    <param name="username">guest</param>
                    <param name="password">guest</param>

                    <expect status="error">                 
                        <param name="username">james</param>
                        <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                        <param name="id">-1</param>
                        <param name="api_member_token"/>
                    </expect>                   
                </scenario>             
            </scenarios>

        </action>                    

        <action name="new_member" runat="server" enabled="false">
            <doc>Creates a new member and assigns to a new campaign</doc>
            <url>/new_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="campaign_id">
                <doc>the session campaign to assign this member to</doc>
            </param>            
            <param name="username">
                <doc>Username of member</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|the pk_mediaitem of the users profile pic</doc>
            </param>            
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>

            <response />
        </action>   

        <action name="update_member" runat="server" enabled="false">
            <doc>Update a member</doc>
            <url>/update_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>       
            <response />
        </action>

        <action name="update_member_optional" runat="server" enabled="false">
            <doc>Update a member by optionally only giving the fields you want to update</doc>
            <url>/update_member_optional/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>      

            <param name="showbirthday" >
                <doc/>
            </param>
            <param name="occupation" >
                <doc/>
            </param>
            <param name="imhandle" >
                <doc/>
            </param>
            <param name="imname" >
                <doc/>
            </param>
            <param name="interestsgeneral" >
                <doc/>
            </param>
            <param name="interestsmusic" >
                <doc/>
            </param>
            <param name="interestsmovies" >
                <doc/>
            </param>
            <param name="intereststvshows" >
                <doc/>
            </param>
            <param name="interestsbooks" >
                <doc/>
            </param>
            <param name="aboutme" >
                <doc/>
            </param>


            <response />
        </action>

        <action name="member_send_message" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_send_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_write_whiteboard" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_write_whiteboard/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="body">
                <doc>the message body</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_message_mark_read" runat="server" enabled="false">
            <doc>mark a message as read</doc>
            <url>/member_message_mark_read/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="membermembermessage">
                <doc>the pk of the message to mark as read</doc>
            </param>            
            <response />
        </action>

        <action name="update_member_profile_picture" runat="server" enabled="false">
            <doc>Update a members profile picture</doc>
            <url>/update_member_profile_picture/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>the members ID</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|an ID</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign key</doc>
            </param>
        </action>
--><action name="mediaitem_upload_pull" runat="server" enabled="true" object="mediaitem" operation="create" group="upload">
			<doc>
				<short>Ingests a new media item into the server.</short>
				<full>
					Requires the media to be publicly accessible via the internet so that thumbwhere can download it.
					One of the paramaters supplied needs to be an md5 digest of the file you are uploading.
					This action will wait until the media item is uploaded before it returns. 
					This delay will depend on the network connection between the source and thumbwhere cloud.
				</full>
			</doc>
			<url>/mediaitem_upload_pull/</url>
			<param name="api_key">
				<doc>
                    API key for the registered application that is calling this method. An API key is provided to developers who have registered a campaign or a campaign application.
				</doc>
			</param>
			<param name="url">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested. This url must be publicy available. In the background, after this call returns, transcoding and feed generation for the media item will commence. </doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="campaign_id">
				<doc>The campaign that we want this item added to.</doc>
			</param>
			<param name="identity_key" optional="true">
				<doc>The identity key of the member uploading the file.</doc>
			</param>
			<param name="digest">
				<doc>An MD5 checksum to validate against. See the MetaWrap.Utility.MD5FileHash(string p_file_path) C# function.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<response>
				<param name="mediaitem_id">
					<doc>id of the license in use</doc>
				</param>
				<param name="url">
					<doc>The url of the xml feed to the new media item. It may be a few seconds before this is published. There are ways of being notified that a media item is fully injested via application callbacks.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple jpeg">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="url">http://www.massive.com.au/projects/333/panasonic.jpg</param>
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">This is a test message</param>
					<param name="digest">73CDCAF793B4FE85D10CB717DC261F65</param>
					<param name="privacy">2</param>
					<param name="license">6</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="video">
					<doc>
						Basic JPG Upload (Example for AFF)
					</doc>
					<param name="api_key">4d17e52d-b5ef-4b29-b459-e5a01aef6283</param>
					<param name="url">http://www.movly.com/Content/Movies/Savage_Grace/Trailers/Savage_Grace_mp4_movie_trailer/MP4/savage-grace-trailer-.mp4</param>
					<param name="subject">Savage Grace Movie Trailer</param>
					<param name="body">The true story of the beautiful and charismatic Barbara Daly, who married above her class to Brooks Baekeland, heir to the Bakelite plastics fortune. Their only child is a failure in his father's eyes, and as he matures and becomes increasingly close to his lonely mother, the seeds for tragedy are sown..</param>
					<param name="digest">B8A7551DEAB8E5B02359221156263111</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_create_clone" runat="server" enabled="true" object="campaign" operation="create" group="create">
			<doc>
				<short>Create a campaign based on an existing campaign.</short>
				<full>The will clone the campaign details, the deployment servers and the media definitions for a specified campaign.</full>
			</doc>
			<url>/campaign_create_clone/</url>
			<param name="master_key">
				<doc>The master key for this instance of ThumbWhere</doc>
			</param>
			<param name="campaign_id">
				<doc>The Campaign Key for the campaign that you want to clone.</doc>
			</param>
			<response>
				<param name="campaign_id">
					<doc />
				</param>
				<param name="api_key">
					<doc />
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>	
						Example of cloning an existing campaign.
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Name Of Campaign</param>
					<param name="description">Description of Campaign</param>
					<expect status="success">
						<param name="campaign_id" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--

        <action name="verify_number" runat="server" enabled="false">
            <doc>Verifies that a number is known to the ThumbWhere</doc>
            <url>/verify_number/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
                </doc>
            </param>

            <param name="number">
                <doc>The phone number that we want to find out about.</doc>
            </param>


            <response>
                <param name="exists">
                    <doc>If there is an identity/member pair for this number then this is true.</doc>
                </param>

                <param name="identity">
                    <doc>id of the identity that has this number</doc>
                </param>

                <param name="member">
                    <doc>id of the member id of the identity that has this number</doc>
                </param>

            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Do I exist?
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="number">+61-123-456</param>

                    <expect status="success">                   
                        <param name="identity"/>
                        <param name="member"/>
                    </expect>   

                </scenario>             
            </scenarios>


        </action>   
--><!--
        <action name="media_item_add_comment" runat="server" enabled="false">
            <doc>Comment on a media item</doc>
            <url>/media_item_add_comment/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member">
                <doc>the member uploading the file</doc>
            </param>            
            <param name="mediaitem">
                <doc>the member item we are commenting on</doc>
            </param>            
            <response />
        </action>

        <action name="update_media_item" runat="server" enabled="false">
            <doc>Update the description fields of a media item</doc>
            <url>/update_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
            <param name="subject">
                <doc>the title of the file</doc>
            </param>
            <param name="body">
                <doc>a description of the file</doc>
            </param>
            <param name="tags">
                <doc>any additional tags</doc>
            </param>            
            <param name="privacy">
                <doc>the privacy level 0 = public, 1 = friends, 2 = identity(s)</doc>
            </param>
            <param name="license">
                <doc>id of the license in use</doc>
            </param>
        </action>

        <action name="update_media_item_increment_view_count" runat="server" enabled="false">
            <doc>Update the view count of a media item by 1</doc>
            <url>/update_media_item_increment_view_count/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
        </action>

        <action name="delete_media_item" runat="server" enabled="false">
            <doc>Delete a media file</doc>
            <url>/delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item to delete</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_identity" runat="server" enabled="false">
            <doc>Adds a link between a media item and identity</doc>
            <url>/media_item_add_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_delete_identity" runat="server" enabled="false">
            <doc>Removes the link between a media item and identity</doc>
            <url>/media_item_delete_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_rating" runat="server" enabled="false">
            <doc>Give a rating to a media item</doc>
            <url>/media_item_add_rating/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>Media item this is a rating of</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign this rating belongs to</doc>
            </param>
            <param name="member">
                <doc>member who made this rating</doc>
            </param>
            <param name="ipaddress">
                <doc>ip address that posted the rating</doc>
            </param>
            <param name="cookie">
                <doc>cookie name?</doc>
            </param>
            <param name="reason">
                <doc>a description of the rating</doc>
            </param>
            <param name="score">
                <doc>the score this rating received</doc>
            </param>
            <param name="maxscore">
                <doc>the maximum score that could have been awarded for this rating</doc>
            </param>
            <response />
        </action>

        <action name="member_add_friend" runat="server" enabled="false">
            <doc>Allows a member to add a friend</doc>
            <url>/member_add_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to be-friend</doc>
            </param>
            <response />
        </action>

        <action name="member_delete_friend" runat="server" enabled="false">
            <doc>Allows a member to delete a friend or a friend request</doc>
            <url>/member_delete_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to de-friend</doc>
            </param>
            <response />
        </action>

        <action name="new_member_group" runat="server" enabled="false">
            <doc>Allows a member to add a new group</doc>
            <url>/new_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="founder">
                <doc>ID of the member creating the group</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for this group</doc>
            </param>
            <response />
        </action>

        <action name="update_member_group" runat="server" enabled="false">
            <doc>Allows a member group to be updated</doc>
            <url>/update_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>id of the group to be deleted</doc>
            </param>
            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for the group</doc>
            </param>
            <response />
        </action>

        <action name="delete_member_group" runat="server" enabled="false">
            <doc>Deletes an entire member group</doc>
            <url>/delete_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the member group to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign to remove the group from</doc>
            </param>
            <response />
        </action>

        <action name="member_join_group" runat="server" enabled="false">
            <doc>Allows a member to join a group</doc>
            <url>/member_join_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to join</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="member_leave_group" runat="server" enabled="false">
            <doc>Allows a member to leave a group</doc>
            <url>/member_leave_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to leave</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="new_media_item_collection" runat="server" enabled="false">
            <doc>Create a media item collection</doc>
            <url>/new_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>collection title/name</doc>
            </param>
            <param name="media">
                <doc>the media type. if this is empty this collection can handle any media type. 
                     valid values are wallpaper,video,message,audio</doc>
            </param>
            <param name="description">
                <doc>a description</doc>
            </param>
            <param name="member">
                <doc>member id of the collection creator</doc>
            </param>
            <param name="public">
                <doc>True|False</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="delete_media_item_collection" runat="server" enabled="false">
            <doc>Deletes a media item collection</doc>
            <url>/delete_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>Id of the media item collection to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_add_media_item" runat="server" enabled="false">
            <doc>Adds a media item to a media item collection</doc>
            <url>/media_item_collection_add_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item</doc>
            </param>
            <param name="displayorder">
                <doc>order within the collection</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_delete_media_item" runat="server" enabled="false">
            <doc>Removes a media item from a media item collection</doc>
            <url>/media_item_collection_delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item to remove</doc>
            </param>
            <response />
        </action>
--></actions>
	<actions version="V1.1" service="Content" public="true" >
		<action name="add_to_producer" runat="server" enabled="true" object="producer" operation="write" group="content">
			<doc>
				<short>Adds someone to an already existing producer</short>
				<full />
			</doc>
			<url>/add_to_producer/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API Key.</doc>
			</param>
			<param name="producer" type="Producer">
				<doc>The producer being added to</doc>
			</param>
			<param name="member" type="MemberToken" atleastone="source" optional="true">
				<doc>The member that will be a producer.</doc>
			</param>
			<param name="consumer" type="Consumer" atleastone="source" optional="true">
				<doc>The consumer that will be created producer.</doc>
			</param>
			<response />
			<scenarios>
				<scenario name="member">
					<doc>
                        Register james as a producer of content.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="producer">1</param>
					<param name="member">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success" />
				</scenario>
				<scenario name="consumer">
					<doc>
                        Register james as a producer of content.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="producer">1</param>
					<param name="consumer">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="ingest" runat="server" enabled="true" public="true" object="content" operation="write" group="content">
			<doc>
				<short>Ingests media.</short>
				<full />
			</doc>
			<url>/ingest/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="name" type="string" optional="true">
				<doc>The name of the content (if we are creating the content).</doc>
			</param>
			<param name="member" type="MemberToken" optional="true">
				<doc>The member performing the upload.</doc>
			</param>
			<param name="identity" type="IdentityToken" optional="true">
				<doc>The identity performing the upload.</doc>
			</param>
			<param name="consumer" type="Consumer" optional="true">
				<doc>The consumer performing the upload.</doc>
			</param>
			<param name="producer" type="Producer" optional="true">
				<doc>The producer performing the upload.</doc>
			</param>
			<param name="content" type="Content" optional="true">
				<doc>The content we are targeting..</doc>
			</param>
			<param name="url" type="string">
				<doc>The url to the media that we are uploading.</doc>
			</param>
			<response>
				<doc>Return the consumer we have created</doc>
				<param name="consumer" type="Consumer">1</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Ingest an mp3 file.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="name">James Mc Parlane</param>
					<param name="member">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="url">http://example.com/test.mp3</param>
					<expect status="success">
						<param name="consumer">1</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="play" runat="server" enabled="true" public="true" object="content" operation="write" group="content">
			<doc>
				<short>Returns the actual streamed data. Either directly or via a redirect or a manifest if specified.</short>
				<full />
			</doc>
			<url>/ingest/</url>
			<param name="key" type="APIKey" evidence="true" optional="true">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="content" type="Content" optional="false">
				<doc>The content we want to play.</doc>
			</param>
			<param name="media" type="string" optional="true">
				<doc>The media type we want. audio,video,image,thumbnail</doc>
			</param>
			<param name="format" type="Format" optional="true">
				<doc>The format type we want. jpg,gif</doc>
			</param>
			<param name="definition" type="string" optional="true">
				<doc>The definition we are after. unearthed_128k etc..</doc>
			</param>
			<param name="manifest" type="string" optional="true">
				<doc>The format of the manifest.</doc>
			</param>
			<response>
				<doc>This should perform an immediate return on the media we are after</doc>
				<param name="url" type="url">http://www.example.com/mp3</param>
				<param name="mimetype" type="string">audio/mp3</param>
				<param name="protection" type="string">linkprotect</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Ingest an mp3 file.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="content">1</param>
					<param name="media">audio</param>
					<param name="definition">unearthed_128k</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="register_consumer" runat="server" enabled="true" public="true" object="consumer" operation="write" group="content">
			<doc>
				<short>Creates a new consumer.</short>
				<full />
			</doc>
			<url>/register_consumer/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="name" type="string">
				<doc>The full name of this consumer.</doc>
			</param>
			<param name="member" type="MemberToken">
				<doc>The member that will be a consumer.</doc>
			</param>
			<param name="producer" type="Producer" atleastone="source" optional="true">
				<doc>The producer that will be added as a consumer.</doc>
			</param>
			<response>
				<doc>Return the consumer we have created</doc>
				<param name="consumer" type="Consumer">1</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register james as a comsumer of content.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="name">James Mc Parlane</param>
					<param name="member">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success">
						<param name="consumer">1</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="register_producer" runat="server" enabled="true" public="true" object="producer" operation="write" group="content">
			<doc>
				<short>Creates a new producer</short>
				<full />
			</doc>
			<url>/register_producer/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API Key.</doc>
			</param>
			<param name="name" type="string">
				<doc>The full name of this consumer.</doc>
			</param>
			<param name="member" type="MemberToken" atleastone="source" optional="true">
				<doc>The member that will be a producer.</doc>
			</param>
			<param name="consumer" type="Consumer" atleastone="source" optional="true">
				<doc>The consumer that will be created producer.</doc>
			</param>
			<response>
				<doc>Return the producer we have created</doc>
				<param name="producer" type="Producer">1</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register james as a producer of content.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="name">James Mc Parlane</param>
					<param name="member">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success">
						<param name="producer">1</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="remove_from_producer" runat="server" enabled="true" public="true" object="producer" operation="write" group="invite">
			<doc>
				<short>Removes someone from a producer.</short>
				<full />
			</doc>
			<url>/remove_from_producer/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API Key.</doc>
			</param>
			<param name="producer" type="Producer">
				<doc>The producer the entity is beign removed from.</doc>
			</param>
			<param name="member" type="MemberToken" atleastone="source" optional="true">
				<doc>The member we are removing.</doc>
			</param>
			<param name="consumer" type="Consumer" atleastone="source" optional="true">
				<doc>The consumer that we will be removing.</doc>
			</param>
			<response />
			<scenarios>
				<scenario name="member">
					<doc>
                        Register james as a producer of content.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="producer">1</param>
					<param name="member">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success" />
				</scenario>
				<scenario name="consumer">
					<doc>
                        Register james as a producer of content.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="producer">1</param>
					<param name="consumer">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="unpublish" runat="server" enabled="true" object="content" public="true" operation="write" group="content">
			<doc>
				<short>Unpublish the content from all the servers..</short>
				<full />
			</doc>
			<url>/ingest/</url>
			<param name="key" type="APIKey" evidence="true" optional="true">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="content" type="Content" optional="false">
				<doc>The content we want to play.</doc>
			</param>
			<response>
				<doc>Should return success.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Unpublish our content.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="content">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="upload" runat="server" enabled="true" object="content" public="true" operation="write" group="content">
			<doc>
				<short>Starts a media upload process.</short>
				<full />
			</doc>
			<url>/upload/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="name" type="string" optional="true">
				<doc>The name of the content (if we are creating the content).</doc>
			</param>
			<param name="text" type="string" optional="true">
				<doc>Text part of the content (if we are creating the content).</doc>
			</param>
			<param name="member" type="MemberToken" optional="true">
				<doc>The member performing the upload.</doc>
			</param>
			<param name="identity" type="IdentityToken" optional="true">
				<doc>The identity performing the upload.</doc>
			</param>
			<param name="consumer" type="Consumer" optional="true">
				<doc>The consumer performing the upload.</doc>
			</param>
			<param name="producer" type="Producer" optional="true">
				<doc>The producer performing the upload.</doc>
			</param>
			<param name="content" type="Content" optional="true">
				<doc>The content we are targeting..</doc>
			</param>
			<response>
				<doc>Return the upload ticket we have created.</doc>
				<param name="ticket" type="string">1234</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Ingest an mp3 file.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="name">James Mc Parlane</param>
					<param name="member">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success">
						<param name="consumer">1</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
	</actions>
	<actions version="V1.1" service="Identity">
		<action name="authenticate" runat="server" enabled="true" object="identity" operation="create" group="tokens">
			<doc>
				<short>Authenticates an identity.</short>
				<full>This enables an application to vouch for the validity of an Identity.</full>
			</doc>
			<url>/authenticate/</url>
			<param name="key" type="APIKey">
				<doc>The API Key to provide context for this request.</doc>
			</param>
			<param name="type" type="IdentityType">
				<doc>The identity type</doc>
			</param>
			<param name="id" type="IdentityId">
				<doc>The id you want to validate against.</doc>
			</param>
			<param name="secret" type="string">
				<doc>The secret you want to supply to complete your validation.</doc>
			</param>
			<response>
				<doc>Returns with the identity that has been created for the corresponding member represented by the member</doc>
				<param name="identity" type="IdentityToken">
					<doc>The identity authenticated as. </doc>
				</param>
				<param name="member" type="MemberToken">
					<doc>The member that owns this identity.</doc>
				</param>
				<param name="label" type="string">
					<doc>The label of this identity</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
              Request Status of an Identity Token that will not exist
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type" type="IdentityType">unearthed</param>
					<param name="id" type="IdentityId">james9</param>
					<param name="secret" type="string">james9</param>
					<expect status="success">
						<param name="identity" />
						<param name="member" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="authenticate_request" runat="server" enabled="true" object="identity" operation="create" group="tokens">
			<doc>
				<short>Authenticates an Identity Token Request made by a previous call to ^request^.</short>
				<full>This enables an application to vouch for the validity of an Identity.</full>
			</doc>
			<url>/authenticate_request/</url>
			<param name="key" type="APIKey">
				<doc>The API Key that a Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code" type="Code">
				<doc>The code that was returned by a previous call to ^request^. This code should have been sent via SMS or MMS to the number also returned by ^request^.</doc>
			</param>
			<param name="id" type="IdentityId" optional="true">
				<doc>The id you want to validate against.</doc>
			</param>
			<param name="secret" type="string" optional="true">
				<doc>The secret you want to supply to complete your validation.</doc>
			</param>
			<param name="label" type="string" optional="true">
				<doc>Optional label you want to apply to the new identity.</doc>
			</param>
			<response>
				<doc>Returns with the identity that has been created for the corresponding member represented by the member</doc>
				<param name="identity" type="IdentityToken">
					<doc>This is the Identity token that was created or found matching the original request..</doc>
				</param>
				<param name="member" type="MemberToken">
					<doc>The Identity Token returned. This be the same as the one supplied to ^request^, or if one was supplied, it will be a be for a newly created Member.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an Identity Token that will not exist
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code" type="Code">agamwa</param>
					<param name="secret" type="string">My Secret Password</param>
					<param name="label" type="string">James Mc Parlane</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry" />
						<param name="member" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="available" runat="server" enabled="true" object="identity" operation="create" group="tokens">
			<doc>
				<short>Returns true if an identity is available.</short>
				<full>Returns true if the identity is available..</full>
			</doc>
			<url>/available/</url>
			<param name="key" type="APIKey">
				<doc>The API Key to provide context for this request.</doc>
			</param>
			<param name="type" type="IdentityType">
				<doc>The identity type</doc>
			</param>
			<param name="id" type="IdentityId">
				<doc>The id you want to validate against.</doc>
			</param>
			<response>
				<doc>Returns with the identity that has been created for the corresponding member represented by the member</doc>
				<param name="available" type="boolean">
					<doc>If this is true then the identity is available.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
              Request Status of an Identity Token that will not exist
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type" type="IdentityType">internal</param>
					<param name="id" type="IdentityId">drmiaow</param>
					<expect status="success">
						<param name="available">true</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="query_request" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Query the status of an Identity token request.</short>
				<full>
                This should be performed after a call to ^request^ and should pass in the code returned by that call. 
                 The identity details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^request^.
				</full>
			</doc>
			<url>/query_request/</url>
			<param name="key" type="APIKey">
				<doc>The API Key that a Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code" type="Code">
				<doc>The code that was returned by a previous call to ^request^. This code should have been sent via SMS or MMS to the number also returned by ^request^.</doc>
			</param>
			<response>
				<doc>
					Returns the status of the request, its expiry time in seconds and if it has been completed, the Identity Token itself.
				</doc>
				<param name="status" type="IdentityTokenStatus">
					<doc>If the Identity Token is ready for use, this will be 'ready' and the #identity# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry" type="integer">
					<doc>The number of seconds you have before the Identity Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="member" type="MemberToken">
					<doc>The Identity Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an Identity Token that will not exist
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry" />
						<param name="member" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="request" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Requests an Identity Token.</short>
				<full>
                        After making the request, you need complete the request with a call to ^request_authenticate^. This call should only be made if you are satisfed that the identity 
                        has been proven to belong to the person asserting that they own it.         
                        If this identity is a mobile phone, you have the option to SMS or MMS #code# to #number# to complete the request.
                        Once the request is completed, make a call to ^request_query^ with the returned #code# as a parameter to get the #identity# and the #member#.
				</full>
			</doc>
			<url>/request/</url>
			<param name="key" type="APIKey">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="type" type="IdentityType">
				<doc>The identity type</doc>
			</param>
			<param name="member" type="MemberToken" optional="true">
				<doc>Member that this identity will be added to. If this is blank and this is not a pre-existing member then a new member will be created after this request is completed</doc>
			</param>
			<param name="id" type="IdentityId" optional="true">
				<doc>The identity id - eg email address or mobile phone number.</doc>
			</param>
			<security>
				<rule name="MustHaveAPIKey" evidence="key" />
				<rule name="APIKeyMustHaveDominionOverMemberToken" evidence="key" target="member" />
			</security>
			<response>
				<doc>
					<p>If #type# is 'mobile' it will return with the #code# that needs to be SMSed to the provided #number#.</p><p>If #type# is 'internal' it will return with the #code# that needs to be SMSed to the provided #number#.</p><p>If #type# is 'twitter' it will return with the #url# that the user needs to be redirected to to fulfull the linkage between their account.</p><p>If #type# is 'facebook' it will return with the #url# that the user needs to be redirected to to fulfull the linkage between their account.</p>
				</doc>
				<param name="challenge_type" type="string">
					<doc>The type of the challenge. twitter, email etc..</doc>
				</param>
				<param name="challenge_code" type="Code" summary="true">
					<doc>The code that represents this request. This code ultimately needs to be sent back to ThumbWhere from an authority to proove that person requesting the identity is who they say they are,</doc>
				</param>
				<param name="challenge_address" type="string" optional="true">
					<doc>Where we need to send the challenge. If type:twitter then this is an OAuth URL. type:mobile then this is for an SMS. type:email then this is an email address.</doc>
				</param>
				<param name="challenge_expiry" type="datetime" optional="true">
					<doc>Where we need to send the challenge. If type:twitter then this is an OAuth URL. type:mobile then this is for an SMS. type:email then this is an email address.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="twitter">
					<doc>
                        Request a twitter identity.
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type" type="IdentityType">twitter</param>
					<expect status="success">
						<challenge_type>oauth</challenge_type>
						<challenge_code>2f13b7d4-5875-4cba-a64b-cedb703b8e06</challenge_code>
						<challenge_address>http://twitter.com/oauth/authorize?oauth_token=SytsQvZseyjJf8leXrxvPFJBgc4yEn8TVn5Ne8YE2wg</challenge_address>
					</expect>
				</scenario>
				<scenario name="facebook">
					<doc>
                        Request a facebook identity.
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type" type="IdentityType">twitter</param>
					<expect status="success">
						<challenge_type>oauth</challenge_type>
						<challenge_code>2f13b7d4-5875-4cba-a64b-cedb703b8e06</challenge_code>
						<challenge_address>http://twitter.com/oauth/authorize?oauth_token=SytsQvZseyjJf8leXrxvPFJBgc4yEn8TVn5Ne8YE2wg</challenge_address>
					</expect>
				</scenario>
				<scenario name="magento">
					<doc>
                        Request a magento identity.
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type" type="IdentityType">magento</param>
					<expect status="success">
						<challenge_type>xauth</challenge_type>
						<challenge_code>2f13b7d4-5875-4cba-a64b-cedb703b8e06</challenge_code>
						<challenge_address>oob</challenge_address>
					</expect>
				</scenario>
				<scenario name="email">
					<doc>
                        Request an email identity.
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type" type="IdentityType">email</param>
					<param name="member" type="MemberToken">eb21b2a8-3f3c-49ba-8c5a-f0f9d511f68b</param>
					<param name="id" type="IdentityId">drmiaow@gmail.com</param>
					<expect status="success">
						<challenge_type>email</challenge_type>
						<challenge_code>2f13b7d4-5875-4cba-a64b-cedb703b8e06</challenge_code>
						<challenge_address>identity@thumbwhere.com</challenge_address>
					</expect>
				</scenario>
				<scenario name="internalemail">
					<doc>
                        Request an email identity.
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type" type="IdentityType">internalemail</param>
					<expect status="success">
						<challenge_type>email</challenge_type>
						<challenge_code>2f13b7d4-5875-4cba-a64b-cedb703b8e06</challenge_code>
						<challenge_address>identity@thumbwhere.com</challenge_address>
					</expect>
				</scenario>
				<scenario name="unearthed">
					<doc>
                  Request an email identity.
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type" type="IdentityType">unearthed</param>
					<param name="id" type="IdentityId">musicfan@example.com</param>
					<expect status="success">
						<challenge_type>unearthed</challenge_type>
						<challenge_code>2f13b7d4-5875-4cba-a64b-cedb703b8e06</challenge_code>
						<challenge_address>identity@thumbwhere.com</challenge_address>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="set_label" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Sets the label field of the #identity#.</short>
				<full>The label field is used as a human readable version of the identity.</full>
			</doc>
			<url>/set_label/</url>
			<param name="key" type="APIKey">
				<doc>The api key to provide context for this campaign.</doc>
			</param>
			<param name="identity" type="IdentityToken">
				<doc>The key to provide context for this campaign.</doc>
			</param>
			<param name="label" type="string">
				<doc>The label we want to set.</doc>
			</param>
			<response>
				<doc>Returns the state of the Identity Token.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set an identity label
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="identity" type="IdentityToken">1cfcab45-4fc9-43ca-82d3-aa429dfce909</param>
					<param name="label" type="string">James</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="validate" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Validates #identity# and returns its current state.</short>
				<full>An Identity Token or an API Key can be 'revoked' due to abuse.</full>
			</doc>
			<url>/validate/</url>
			<param name="code" type="Code">
				<doc>The Identity Token to validate.</doc>
			</param>
			<response>
				<doc>Returns the state of the Identity Token.</doc>
				<param name="state" type="IdentityTokenStatus">
					<doc>The state of the Identity Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an Identity Token
					</doc>
					<param name="code">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
	</actions>
	<actions version="V1.1" service="Media">
		<action name="deploy" runat="server" enabled="true" object="mediaitem" operation="write" group="workflow" workflow="true">
			<doc>
				<short>This will deploy the media for the mediaitem.</short>
				<full>
					This will deploy all the media and then if the standard workflow is in use, deploy the media to storage.
				</full>
			</doc>
			<url>/deploy/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem" type="MediaItem">
				<doc>
                    The media item we are 'generating'.
				</doc>
			</param>
			<response>
				<doc>
                    standard 'status' of 'success' or 'error'.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Generate's media for a mediaitem.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="fingerprint" runat="server" enabled="true" object="mediaitem" operation="read" group="crud">
			<doc>
				<short>Fingerprints the #mediaitem#</short>
				<full>
					Takes a mediaitem and fingerprints it.
				</full>
			</doc>
			<url>/get_url/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem" type="MediaItem">
				<doc>
                    The media item we are fingerprinting.
				</doc>
			</param>
			<response>
				<doc>
                    standard 'status' of 'success' or 'error'.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="generate" runat="server" enabled="true" object="mediaitem" operation="write" group="workflow" workflow="true">
			<doc>
				<short>This will generate the media for the mediaitem.</short>
				<full>
					This will generate all the media and then if the standard workflow is in use, deploy the media to storage.
				</full>
			</doc>
			<url>/generate/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem" type="MediaItem">
				<doc>
                    The media item we are 'generating'.
				</doc>
			</param>
			<response>
				<doc>
                    standard 'status' of 'success' or 'error'.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Generate's media for a mediaitem.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="get_url" runat="server" enabled="true" object="mediaitem" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #mediaitem#</short>
				<full>

                        This function is in for convenience. It is possible to calculate the url for a media item, but this a simple way to have the API calculate it for you.

                        From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                        Then take the mediaitem id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                        Then take the mediaitem and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                        If you add all these together you end up with 

                        http://core.thumbwhere.com/1/2/3/123.xml

						The folder structure is done this way so that ThumbWhere can serve content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/get_url/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem" type="MediaItem">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect" type="boolean" optional="true">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the mediaitem. If #redirect# is true, then this will actually redirect you to the Media Item's XML.
				</doc>
				<param name="url" type="string" redirect="true">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="schedule" runat="server" enabled="true" object="mediaitem" operation="write" group="crud">
			<doc>
				<short>This will schedule workflow task to the mediaitem.</short>
				<full>
					This will mark the mediaitem with the provided pending workflow task.
				</full>
			</doc>
			<url>/schedule/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem" type="MediaItem">
				<doc>
                    The media item we are 'ungenerating'.
				</doc>
			</param>
			<param name="workflow" type="string">
				<doc>
                    The workflow step we want to apply.
				</doc>
			</param>
			<response>
				<doc>
                    standard 'status' of 'success' or 'error'.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Schedule the 'ungenerate' workflow mark to the mediaitem.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem">1</param>
					<param name="workflow">ungenerate</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="undeploy" runat="server" enabled="true" object="mediaitem" operation="write" group="workflow" workflow="true">
			<doc>
				<short>This will undeploy the mediaitem, which is the reverse of the deploy process.</short>
				<full>
					This will remove all the deployd thumbnails, audio, video etc and set the deployd flag back to false.
				</full>
			</doc>
			<url>/undeploy/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem" type="MediaItem">
				<doc>
                    The media item we are 'undeoklo'.
				</doc>
			</param>
			<response>
				<doc>
                    standard 'status' of 'success' or 'error'.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Undeploy a mediaitem.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="ungenerate" runat="server" enabled="true" object="mediaitem" operation="write" group="workflow" workflow="true">
			<doc>
				<short>This will ungenerate the mediaitem, which is the reverse of the generate process.</short>
				<full>
					This will remove all the generated thumbnails, audio, video etc and set the generated flag back to false.
				</full>
			</doc>
			<url>/ungenerate/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem" type="MediaItem">
				<doc>
                    The media item we are 'ungenerating'.
				</doc>
			</param>
			<response>
				<doc>
                    standard 'status' of 'success' or 'error'.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Ungenerate a mediaitem.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="upload_create" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>Creates a single use ticket that can be used to upload content directly into thumbwhere. </short>
				<full>
                        This create an upload ticket that can be used with ^mediaitem_upload_push^.
				</full>
			</doc>
			<url>/upload_create/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="member" type="MemberToken">
				<doc>The member making this request.</doc>
			</param>
			<param name="identity" type="IdentityToken" optional="true">
				<doc>The identity to associate this upload with.</doc>
			</param>
			<param name="text" type="string" optional="true">
				<doc>The text portion of the message.</doc>
			</param>
			<response>
				<doc>The upload ticket.</doc>
				<param name="ticket" type="string">
					<doc>The upload push ticket</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member" />
					<param name="identity" />
					<param name="text">An AirBus A380</param>
					<expect status="success">
						<param name="ticket" />
					</expect>
				</scenario>
			</scenarios>
		</action>
	</actions>
	<actions version="V1.1" service="Member">
		<action name="create" runat="server" enabled="true" object="application" operation="write" group="invite">
			<doc>
				<short>Creates a create member.</short>
				<full>Creates a create member if one is not supplied.</full>
			</doc>
			<url>/create/</url>
			<param name="key" type="APIKey" evidence="true">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="id" type="string">
				<doc>The that we want for the consumer. We will create an id if this is not supplied.</doc>
			</param>
			<param name="secret" type="string">
				<doc>The password for the consumer. We will create an id if this is not supplied.</doc>
			</param>
			<param name="email" type="string">
				<doc>The email of the consumer. We will create an email identity if this is not supplied.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure..</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register james as a comsumer of content.
					</doc>
					<param name="key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="id">james</param>
					<param name="secret">1234</param>
					<param name="email">drmiaow@gmail.com</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
	</actions>
	<actions version="V1.1" service="Program">
		<action name="new_program" runat="server" enabled="true" object="program" operation="read" group="tokens">
			<doc>
				<short>Sets the label field of the #program#.</short>
				<full>The label field is used as a human readable version of the program.</full>
			</doc>
			<url>/set_label/</url>
			<param name="key" type="APIKey">
				<doc>The api key to provide context for this campaign.</doc>
			</param>
			<param name="name" type="string">
				<doc>Name of the program.</doc>
			</param>
			<response>
				<doc>Returns the state of the Program Token.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set an program label
					</doc>
					<param name="key" type="APIKey">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="name" type="string">test</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
	</actions>
	<actions version="V1.1" service="Social">
		<action name="member_update_mediaitem" runat="server" enabled="true" object="member" operation="update" group="mediaitems">
			<doc>
				<short>Updates a MediaItems's information</short>
				<full>
					If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/member_update_mediaitem/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member making this change. This member must own this media item to make the change.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="subject">
				<doc>
					(optional) The subject text for the media item.
				</doc>
			</param>
			<param name="body">
				<doc>
					(optional) The body text of the media item.
				</doc>
			</param>
			<param name="privacy">
				<doc>
					(optional) 0 = in all feeds, 1 = only in member feeds and identity feeds, 2 = only in identity feeds, 3 or above - not in any feeds
				</doc>
			</param>
			<param name="filter">
				<doc>
					(optional)  If this is true (default is false) then the subject and body will be filtered by the global and campaign specific user generated content filters.
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">This Is A Better Subject</param>
					<param name="body">This is a Beter Body</param>
					<expect status="success" />
				</scenario>
				<scenario name="simple">
					<doc>
						Only update privacy
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="privacy">0</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_list_mediaitem_transformations" runat="server" enabled="true" object="member" operation="enumerate" group="mediaitems">
			<doc>
				<short>Returns a list of all the transformations for a media item</short>
				<full />
			</doc>
			<url>/member_list_mediaitem_transformations/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					long - The media item we want to get all the transformations for
				</doc>
			</param>
			<response>
				<doc>
					A list of all the transformations for a media item
				</doc>
				<param name="url">
					<doc>
						The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_mediaitem_transformation" runat="server" enabled="true" object="member" operation="create" group="mediaitems">
			<doc>
				<short>Adds a transformation to a media item</short>
				<full>
					All newly added transformations get added to the end. A transformation consists of two strings a #type# and an optional #argument#.
				</full>
			</doc>
			<url>/member_add_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					long - The media item we want to add the translation to.
				</doc>
			</param>
			<param name="type">
				<doc>
					string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
					string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Adds a 'rotate left' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Adds a 'mirror' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Adds a 'caption bottom' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_mediaitem_transformation" runat="server" enabled="true" object="member" operation="update" group="mediaitems">
			<doc>
				<short>Sets the type and argument of the specified translation.</short>
				<full />
			</doc>
			<url>/member_set_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the member who owns this mediaitem that the transformation is being added to.
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
					long - The transformation we want to update
				</doc>
			</param>
			<param name="type">
				<doc>
					string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
					string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc>
					A list of all the transformations for a media item
				</doc>
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_delete_mediaitem_transformation" runat="server" enabled="true" object="member" operation="delete" group="mediaitems">
			<doc>
				<short>Deletes a transformation for a specified media item</short>
				<full />
			</doc>
			<url>/member_delete_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
					long - The transformation we want to delete
				</doc>
			</param>
			<response>
				<doc>
					Simple success or failure.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_mediaitem_comment" runat="server" enabled="true" object="member" operation="write" group="mediaitems">
			<doc>
				<short>Add a comment to an existing media item.</short>
				<full />
			</doc>
			<url>/member_add_mediaitem_comment/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="mediaitem_id">
				<doc>Ths id of the mediaitem that we are adding this comemnt to</doc>
			</param>
			<param name="subject">
				<doc>The subject of the comment</doc>
			</param>
			<param name="body">
				<doc>The body of the comment</doc>
			</param>
			<response>
				<doc />
				<param name="mediaitem_id">
					<doc>
						The created comment
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add Comment
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">Hello</param>
					<param name="body">Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Add a friend.</short>
				<full />
			</doc>
			<url>/member_add_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to add.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_friend">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Remove a friend.</short>
				<full />
			</doc>
			<url>/member_remove_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to remove.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_member_token_friend">5B36AAC5-B600-4A89-85AF-5F5F4BDA103F</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Add a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_add_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to trust.</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<param name="proxy">
				<doc>If true then this trusted member can act as a proxy for the trusting member</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<param name="proxy">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Remove a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_remove_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to remove from a trusted relationship</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Reset password of the member.</short>
				<full>Used to reset the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_reset_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_reset_identity_secret^. If you want to reset both id and secret at the same time, use ^member_reset_identity_credentials^.</full>
			</doc>
			<url>/member_reset_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Get a summary of the member.</short>
				<full />
			</doc>
			<url>/member_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or application</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for the memer we want a summary of</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code_by_identity_id" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code_by_identity_id/</url>
			<param name="master_key">
				<doc>Master key for this instance of ThumbWhere</doc>
			</param>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="id">
				<doc>
					Identity id
				</doc>
			</param>
			<param name="type">
				<doc>
					Identity type
				</doc>
			</param>
			<param name="alphabet">
				<doc>
					string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
					integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
						The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
						Request code for a member token based on an identity id
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">member</param>
					<param name="id">drmiaow</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member token that you want turned into a lookup code
				</doc>
			</param>
			<param name="alphabet">
				<doc>
                    string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
                    integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_lookup_code" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Returns an #api_member_token# associated with a lookup #code#</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_lookup_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to lookup.
				</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_revoke_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>If the supplied #code# exists, it is deleted.</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_revoke_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to revoke.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_value" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the value from the name value pair collection for the competition specified by #key".</short>
				<full />
			</doc>
			<url>/competition_get_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_value" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the value of the name value pair for a competition.</short>
				<full />
			</doc>
			<url>/competition_set_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the value of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_values" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the values from the name values pair for the competitions external application.</short>
				<full>                                      
					   The competition must be a competition of the external application.
					   The returned values is encrypted with the cruds encryption key.
				</full>
			</doc>
			<url>/competition_get_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_values" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the values of the name values pair for an competition who is a competition of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The competition must be a competition of the external application.					   
				</full>
			</doc>
			<url>/competition_set_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="moon">james2</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_add_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Adds a name value pair definition to a competition.</short>
				<full>This is shared across all competitions for this campaign.</full>
			</doc>
			<url>/competition_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Deletes a name value pair definition for a competition.</short>
				<full>This will delete the name value pair definition called #name# and all values of #name# across all competitions for this campaign.</full>
			</doc>
			<url>/competition_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_summary" runat="server" enabled="true" object="competition" operation="read" group="crud">
			<doc>
				<short>Get a summary of the competition. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/competition_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The Key for competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified competition
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_create_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Create a new round for a competition.</short>
				<full />
			</doc>
			<url>/competition_create_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_update_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Update an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_update_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the specified round.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Delete an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_delete_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete the specified round
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_add_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Adds a name value pair definition for an application.</short>
				<full>This is shared across all campaigns that use this application.</full>
			</doc>
			<url>/application_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_delete_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Deletes a name value pair definition for an application.</short>
				<full>This will delete the name value pair definition and values for all applications across all campaigns that use this applicaton.</full>
			</doc>
			<url>/application_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_get_summary" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Get a summary of the application. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/application_get_summary/</url>
			<param name="api_key">
				<doc>The API key for external application.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified application
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_username" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update username of the member.</short>
				<full>Used to change the username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the password of the member, use ^member_update_password^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_username/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the username of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the username of.</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the username of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_label" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity label of the identity for a member.</short>
				<full>An identity label provides a human readable label for an identity. The 'type' might be 'twitterv2api' but the label would be 'Twitter'</full>
			</doc>
			<url>/member_update_identity_label/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity.</doc>
			</param>
			<param name="label">
				<doc>The identity label that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the identity label for an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="label">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_id" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="id">
				<doc>The identity id that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="id">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Create an identity for this member.</short>
				<full />
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="type">
				<doc>The identity type.</doc>
			</param>
			<param name="id">
				<doc>The identity id.</doc>
			</param>
			<param name="secret">
				<doc>The identity secret.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="type">mobile_email</param>
					<param name="id" />
					<param name="secret">blah</param>
					<expect status="success">
						<param name="api_identity_token">
							<doc>The api identity token - the represents this identity wrt this api key</doc>
						</param>
						<param name="id">
							<doc>The id of the identity</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_delete" runat="server" enabled="true" object="member" operation="delete" group="crud">
			<doc>
				<short>Delete the specified Member.</short>
				<full>Marks a member as deleted - eventualy this member is purged from the database.</full>
			</doc>
			<url>/member_delete/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete this member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_login" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and a username and password pair</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<expect status="success">
						<param name="api_member_token">
							<doc>Anonymous</doc>
						</param>
						<param name="api_member_token">
							<doc>The name of the member</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_login_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and an identity.</short>
				<full>This call takes the type, id and secret of an identity and returns the member that owns this identity. If you want to authenticate against the member credentials use type of 'thumbwhere'.</full>
			</doc>
			<url>/member_login_identity/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="type">
				<doc>The type of identity that you want to login as.</doc>
			</param>
			<param name="id">
				<doc>The id of the identity that you want to login as.</doc>
			</param>
			<param name="secret">
				<doc>The secret of the identity you want to login as. You must prove you are who you say you are by providing the secret.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member in the context of the API key.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API identity token for this Member's identity.</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member using the internal 'thumbwhere' identity.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">thumbwhere</param>
					<param name="id">james</param>
					<param name="secret">james</param>
					<expect status="success">
						<param name="username">
							<doc>The name of the member</doc>
						</param>
						<param name="api_member_token">
							<doc>A unique token that represents this member in the context of the API key.</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_username_available" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Return true if the proposed #username# is available.</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="available">
					<doc>True if the username is available, false if it is not</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<expect status="success">
						<param name="available">
							<doc>True if the username is available, false if it is not</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_credentials" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update credentials of the member.</short>
				<full>Used to change the password and username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update just the username of the member, use ^member_update_username^. If you want to update just the password, use ^member_update_password^.</full>
			</doc>
			<url>/member_update_credentials/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the credentials of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the credentials of..</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update username and password of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<param name="new_password">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update password of the member.</short>
				<full>Used to change the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the password of.</doc>
			</param>
			<param name="password">
				<doc>The current password of the member you want to change the password of.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Adds a member to the application and sets the values of the name value pairs.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_add_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="application_id">
				<doc>he application key for the application that we want to add the member to.</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The api member key for the member for this application.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Removes a member from an application.</short>
				<full />
			</doc>
			<url>/member_remove_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_test_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Tests a Member's subscription to an application</short>
				<full>
					This will perform a test of an application using a Member's name value pairs.
					Eg. For Twitter it will end up calling the 'login' API call provided by Twitter to ensure that the 
					details provided will work.
				</full>
			</doc>
			<url>/member_test_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple test.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_bandwidthusage_create" runat="server" enabled="true" object="campaign" operation="update" group="reporting">
			<doc>
				<short />
				<full />
			</doc>
			<url>/campaign_bandwidthusage_create/</url>
			<param name="api_key">
				<doc />
			</param>
			<param name="api_member_token">
				<doc />
			</param>
			<param name="actor">
				<doc />
			</param>
			<param name="action">
				<doc />
			</param>
			<param name="target">
				<doc />
			</param>
			<param name="magnitide">
				<doc />
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc />
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="actor">Colonel Mustard</param>
					<param name="action">Lead Pipe</param>
					<param name="target">Reverend Green</param>
					<param name="magnitude">11</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_get_summary" runat="server" enabled="true" object="campaign" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>
					The member must be a member of the external application.
					The returned values are encrypted with the applications encryption key if they are specified as encrypted over the wire in the name value pair definitions for this application.
				</full>
			</doc>
			<url>/campaign_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<response>
				<doc />
				<param name="name">
					<doc>
						The name of the campaign
					</doc>
				</param>
				<param name="description">
					<doc>
						 The name of the description						
					</doc>
				</param>
				<param name="apps" array="true" type="app">
					<doc>
						Collection of applications
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
						Request summary for the specified campaign.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the compeitionwinner flag for a competition entry.</short>
				<full>Sets the value for the entry competitionwinner attribute which is used to signify that this entry is the winner of a round.</full>
			</doc>
			<url>/competition_entry_set_competitionwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionwinner.</doc>
			</param>
			<param name="competitionwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure in generic status element.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition winner
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the competitionfinalist flag for a competition entry.</short>
				<full>
                Sets the value for the entry competitionfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_competitionfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionfinalist.</doc>
			</param>
			<param name="competitionfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundwinner flag for a competition entry.</short>
				<full>          
                Sets the value for the entry roundwinner attribute which is used to signify that this entry is the winner of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundwinner.</doc>
			</param>
			<param name="roundwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the round winner.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundfinalist flag for a competition entry.</short>
				<full>              
                Sets the value for the entry roundfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundfinalist.</doc>
			</param>
			<param name="roundfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as round finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_approved" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the approved flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_approved/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="approved">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as approved.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="approved">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_deleted" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the deleted flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_deleted/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="deleted">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as deleted.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="deleted">true</param>
					<expect status="sucess">
						<doc>No data returned - Simple sucess or failure.</doc>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_rejected" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the rejected flag for a competition entry.</short>
				<full>          
                    Marks an entry as rejected.
				</full>
			</doc>
			<url>/competition_entry_set_rejected/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="rejected">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as rejected.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="rejected">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote_confirm" runat="server" enabled="true" object="competition" operation="update" group="vote">
			<doc>
				<short>Confirms a vote on an entry in a competition.</short>
				<full>                      
                    This is normally used via SMS or via an email form as a way og making sure that the vote was made from a real email address or mobile phone.
				</full>
			</doc>
			<url>/competition_vote_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="vote_confirmation_code">
				<doc>The code that can be used to validate a vote..</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm a vote.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="vote_confirmation_code">g1gpwa</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote" runat="server" enabled="true" object="competition" operation="create" group="vote">
			<doc>
				<short>Votes for an entry in a competition.</short>
				<full>                                                  
                    This creates a pending vote for an entry in a competition. A code is returned. The vote will not be counted unless it is confirmed by a call to ^competition_vote_confirm^.
				</full>
			</doc>
			<url>/competition_vote/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>Represents the member doing the voting.</doc>
			</param>
			<param name="code">
				<doc>The code that represnts a vote for an entry in a competition.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Vote for an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">???</param>
					<param name="code">???</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create" runat="server" enabled="true" object="member" operation="create" group="crud">
			<doc>
				<short>Creates a new Member.</short>
				<full>                                                              
                    If a parameter is not provided, then the correponding field is not updated from the defaults. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/member_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="salutation">
				<doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
				</doc>
			</param>
			<param name="username">
				<doc>
                    String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<param name="password">
				<doc>
					String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<response>
				<doc>Returns an API Member Token.</doc>
				<param name="api_member_token">
					<doc>
                        API Member Token that represents this member making this change. This API Member Token is linked to the #api_key# that made this call and will not be valiud when used with a different API Key.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Member Creation
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--action name="member_update" runat="server" enabled="true" object="member" operation="update" group="crud" >
            <doc>   
                <short>Updates a Member's information.</short>
                <full>              
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
                </full>
            </doc>
            <url>/member_update/</url>

            <param name="api_key">
                <doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
            </param>

            <param name="api_member_token"  >
                <doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
                </doc>
            </param>

            <param name="email">
                <doc>
                    String - The email address for the membmer. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="salutation">
                <doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
                </doc>
            </param>            

            <param name="username">
                <doc>
                    String - The display name for the user - We do not check for uniqueness.
                </doc>
            </param>            


            <param name="firstname">
                <doc>
                    String - The first name of the member
                </doc>
            </param>            

            <param name="lastname">
                <doc>
                    String - The last name of the member
                </doc>
            </param>            

            <param name="phonemobile">
                <doc>
                    String - The mobile phone number for the member. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="postalpostcode">
                <doc>
                    String - The postcode for the user for their postal address
                </doc>
            </param>            

            <param name="receiveupdates">
                <doc>
                    Boolean - Wether of not the member wants to recieve updates.
                </doc>
            </param>    

            <response>
                <doc>No data returned - Simple sucess or failure.</doc>
            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Member Update
                    </doc>

                    <param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
                    <param name="api_member_token"/>
                    <param name="email">james@massive.com.au</param>
                    <param name="receiveupdates">false</param>
                    <param name="username">DrMiaow</param>
                    <param name="firstname">James</param>
                    <param name="lastname">Mc Parlane</param>
                    <param name="phonemobile">+1-000-000-000</param>
                    <param name="postalpostcode">2204</param>
                    <param name="postalstate">NSW</param>

                    <expect status="success">                                           
                    </expect>   

                </scenario>             
            </scenarios>

        </action-->
		<action name="member_get_feed" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the url for a Member's feed.</short>
				<full />
			</doc>
			<url>/member_get_feed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					The api member token for the member
				</doc>
			</param>
			<param name="type">
				<doc>
					The type of the feed
				</doc>
			</param>
			<response>
				<doc>
					Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
						The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="type">html</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
						Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_url" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #member# using their member id.</short>
				<full>                                      
                    Returns the URL for the specified #member#

                    This function is in the API for convenience. It is possible to calculate the url for a member.

                    From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                    Then take the member id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                    Then take the member and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                    If you add all these together you end up with 

                    http://core.thumbwhere.com/members/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="member">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_value" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the value from the name value pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned value is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_value" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the value of the name value pair for an member who is a member of an external application.</short>
				<full>                                      
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_error" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the error flag for a member in an application.</short>
				<full>
					This is called by external applications when they want to signify that there has been a error that requires the members attention. Eg. If they change their Twitter password so we can't make posts to Twitter on their behalf any more because the password we have is out of date.
				</full>
			</doc>
			<url>/member_set_application_error/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="error">
				<doc>
					bool - the value of the failed flag.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Set a Member's error flag.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="error">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_values" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_values" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the values of the name values pair for an member who is a member of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_campaign_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member in the campaign
				</doc>
			</param>
			<response>
				<doc />
				<param name="username">
					<doc>
                        The username of the member.
					</doc>
				</param>
				<param name="apps" type="array" class="app">
					<doc>
                        Collection of app element descriptions
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_move_between_members" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Moves a media item from one member to another. It will end up in the 'member' identity in the destination</short>
				<full />
			</doc>
			<url>/mediaitem_move_between_members/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token_from">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="api_member_token_to">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token_from">86f656f8-0bd0-4e87-b947-79f95aa2165f</param>
					<param name="api_member_token_to">0638a6a9-a041-45bd-ace4-eaea85a6c985</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_update" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Updates a MediaItems's information</short>
				<full>          
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/mediaitem_update/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="subject">
				<doc>
                    (optional) The subject text for the media item.
				</doc>
			</param>
			<param name="body">
				<doc>
					(optional) The body text of the media item.
				</doc>
			</param>
			<param name="privacy">
				<doc>
					(optional) 0 = in all feeds, 1 = only in member feeds and identity feeds, 2 = only in identity feeds, 3 or above - not in any feeds
				</doc>
			</param>
			<param name="filter">
				<doc>
					(optional)  If this is true (default is false) then the subject and body will be filtered by the global and campaign specific user generated content filters.
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">This Is A Better Subject</param>
					<param name="body">This is a Beter Body</param>
					<expect status="success" />
				</scenario>
				<scenario name="simple">
					<doc>
						Only update privacy
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="privacy">0</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_get_url" runat="server" enabled="true" object="mediaitem" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #mediaitem#</short>
				<full>

                        This function is in for convenience. It is possible to calculate the url for a media item.

                        From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                        Then take the mediaitem id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                        Then take the mediaitem and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                        If you add all these together you end up with 

                        http://core.thumbwhere.com/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/mediaitem_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the mediaitem. If #redirect# is true, then this will actually redirect you to the Media Item's XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_list_transformations" runat="server" enabled="true" object="mediaitem" operation="enumerate" group="transformation_id">
			<doc>
				<short>Returns a list of all the transformations for a media item</short>
				<full />
			</doc>
			<url>/mediaitem_list_transformations/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to get all the transformations for
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_add_transformation" runat="server" enabled="true" object="mediaitem" operation="create" group="transformation_id">
			<doc>
				<short>Adds a transformation to a media item</short>
				<full>
                    All newly added transformations get added to the end. A transformation consists of two strings a #type# and an optional #argument#. 
				</full>
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to add the translation to.
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Adds a 'rotate left' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Adds a 'mirror' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Adds a 'caption bottom' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_transformation" runat="server" enabled="true" object="mediaitem" operation="update" group="transformation_id">
			<doc>
				<short>Sets the type and argument of the specified translation.</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to update the transformation for.
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
                    long - The transformation we want to update
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_transformation" runat="server" enabled="true" object="mediaitem" operation="delete" group="transformation_id">
			<doc>
				<short>Deletes a transformation for a specified media item</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to delete the transformation from
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
                    long - The transformation we want to delete
				</doc>
			</param>
			<response>
				<doc>
                    Simple success or failure.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_rate" runat="server" enabled="true" object="mediaitem" group="ratings" operation="update">
			<doc>
				<short>Adds a rating to a MediaItem</short>
				<full>When called this returns the latest calculated rating of the media item.</full>
			</doc>
			<url>/mediaitem_rate/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    Optional API Member Token that represents the member making this rating. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="score">
				<doc>
                    The rating score. If the rating was 3 out of 5 stars, then this valur would be 3.
				</doc>
			</param>
			<param name="maxscore">
				<doc>
                    The rating maxscore. What the rating is "out of" If the rating was 3 out of 5 stars, then this value would be 5. 
				</doc>
			</param>
			<param name="ipaddress">
				<doc>
                    The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie">
				<doc>
                    A unique identifier. We ignore any ratings for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason">
				<doc>
                    A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the newly calculated rating for the media item.
				</doc>
				<param name="rating">
					<doc>
                        The actual rating for this media item.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="score">1</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
                        Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="score">3</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_viewed" runat="server" enabled="true" object="mediaitem" group="metrics" operation="update">
			<doc>
				<short>Increments the viewcount for a #mediaitem#</short>
			</doc>
			<url>/mediaitem_viewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are incrementing
				</doc>
			</param>
			<response>
				<doc>
					Returns the latest tally of views of the media item.
				</doc>
				<param name="mediaitem_id">
					<doc>The mediaitem that we incremented.</doc>
				</param>
				<param name="views">
					<doc>The latest number of views.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Increment numer of views
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="views" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_complain" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Adds a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_complain/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					Optional API Member Token that represents the member making this complaint. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="ipaddress" optional="true">
				<doc>
					The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie" optional="true">
				<doc>
					A unique identifier. We ignore any complaints for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason" optional="true">
				<doc>
					A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
					Returns the newly calculated rating for the media item.
				</doc>
				<param name="complaint_id">
					<doc>
						The id of the complaint created
					</doc>
				</param>
				<param name="complaints">
					<doc>
						The current number of complaints for this mediaitem
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reason">Offends my value system</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
						Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="reason">This bird wets it's nest</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_complaint" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Deletes a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_delete_complaint/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="mediaitemcomplaint_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="mediaitemcomplaint_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_censored" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'censored' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_censored/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the censored flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="censored">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_reviewed" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'reviewed' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_reviewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the 'reviewed' flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reviewed">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_create" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>Creates a single use ticket that can be used to upload content directly into thumbwhere. </short>
				<full>
                        This create an upload ticket that can be used with ^mediaitem_upload_push^.
				</full>
			</doc>
			<url>/mediaitem_upload_push_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
				</doc>
			</param>
			<param name="api_identity_token">
				<doc>
                    API Identity Token that we want the newly created media item to appear to be submitted by (eg. The mobile phone identity, or the Flikr identity).
				</doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<param name="maxsize" optional="true" default="10485760">
				<doc>The maximum size in bytes of file that we are allowed to upload.</doc>
			</param>
			<response>
				<doc>The upload ticket.</doc>
				<param name="ticket">
					<doc>The upload push ticket</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token" />
					<param name="api_identity_token" />
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">testdata</param>
					<param name="privacy">0</param>
					<param name="license">-1</param>
					<param name="maxsize">10485760</param>
					<expect status="success">
						<param name="ticket" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>
                    Uploads a media item directly into ThumbWhere
				</short>
				<full>
                        Allows you to peform a HTTP POST file upload directly into ThumbWhere. The media item that is created is based on the meta-data 
                        supplied in the call to ^mediaitem_upload_push_create^.
				</full>
			</doc>
			<url>/mediaitem_upload_push/</url>
			<param name="ticket">
				<doc />
			</param>
			<param name="file" upload="true">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="ticket" />
					<param name="file" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_query" runat="server" enabled="true" object="mediaitem" operation="read" group="upload">
			<doc>
				<short>Queries the status of an upload push in progress.</short>
				<full>Returns the status, number of bytes uploaded so far and the data rate.</full>
			</doc>
			<url>/mediaitem_upload_push_query/</url>
			<param name="ticket">
				<doc />
			</param>
			<response>
				<doc>Returns the status, number of bytes uploaded so far and the data rate.</doc>
				<param name="api_member_token">
					<doc>The API Member token of the member that has uploaded this media item.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API Identity token that was used to upload this media item.</doc>
				</param>
				<param name="member">
					<doc>The ID of the member that has uploaded this media item.</doc>
				</param>
				<param name="member_url">
					<doc>XML to the members XML feed.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was created when this file was uploaded.</doc>
				</param>
				<param name="size">
					<doc>The number of bytes that have been uploaded..</doc>
				</param>
				<param name="started">
					<doc>The time at which this upload started.</doc>
				</param>
				<param name="completed">
					<doc>The time at which this upload was completed..</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Query - Requires valid ticket
					</doc>
					<param name="ticket" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_confirm" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Confirms a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_query" runat="server" enabled="true" object="competition" operation="read" group="entry">
			<doc>
				<short>Queries a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_query/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Query a pending competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_create" runat="server" enabled="true" object="competition" operation="create" group="entry">
			<doc>
				<short>Creates an competition entry</short>
				<full>Takes a media item and enters it into a competition.</full>
			</doc>
			<url>/competition_entry_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.</doc>
			</param>
			<param name="round">
				<doc>The id of the competition round that we are adding this media item to</doc>
			</param>
			<param name="mediaitem_id">
				<doc>The id of the mediaitem being entered into the competition</doc>
			</param>
			<param name="approved">
				<doc>If this is true then the entry is created as approved. If you leave this parameter out the entry will be by default unapproved.</doc>
			</param>
			<response>
				<doc>Returns the code needed to approve/reject and vote for the entry..</doc>
				<param name="votecode">
					<doc>The code that is used to approve and vote for this entry.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Create a competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">89b4e3cb-38da-4907-aefa-316f99baf4f4</param>
					<param name="round">2</param>
					<param name="mediaitem_id">77</param>
					<expect status="success">
						<param name="votecode" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_login" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Login using an #api_key#/#api_member_token# pair.</short>
				<full>This is used to provide the same response as a normal username/password login (using ^member_login^ and ^member_login_identity^) from just the #api_member_token#</full>
			</doc>
			<url>/api_member_token_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API Member Token that we want to login as.</doc>
			</param>
			<response>
				<doc>The name of the Member and a direct url to their XML feed.</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="feedurl">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Login as member using the saved member token
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">d6029931-d37a-4dd2-8075-e6a41f4d5187</param>
					<expect status="success">
						<param name="username">
							<doc>Anonymous</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="invite" runat="server" enabled="true" object="application" operation="write" group="invite">
			<doc>
				<short>Creates an invitation that can be sent out to the provided #email#.</short>
				<full>Invitations are associated with the provided #api_key#</full>
			</doc>
			<url>/invite/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="email">
				<doc>The email adddress to add the invitation to.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure..</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Invite james to use the application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="email">james@massive.com.au</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_validate" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Validates #api_identity_token# and returns its current state.</short>
				<full>An API Identity Token or an API Key can be 'revoked' due to abuse.</full>
			</doc>
			<url>/api_identity_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Identity Token to validate.</doc>
			</param>
			<response>
				<doc>Returns the state of the API Identity Token.</doc>
				<param name="state">
					<doc>The state of the API Identity Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Identity Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_query" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API identity token request.</short>
				<full>
                This should be performed after a call to ^api_identity_token_request^ and should pass in the code returned by that call. 
                 The api identity_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_identity_token_request^.
				</full>
			</doc>
			<url>/api_identity_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>
                        Returns the status of the request, its expiry time in seconds and if it has been completed, the API Identity Token itself.
				</doc>
				<param name="request">
					<doc>If the API Identity Token is ready for use, this will be 'ready' and the #api_identity_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Identity Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Requests an API Identity Token.</short>
				<full>
                        After making the request, you need complete the request with a call to ^api_identity_token_request_authenticate^. This call should only be made if you are satisfed that the identity 
                        has been proven to belong to the person asserting that they own it.         
                        If this identity is a mobile phone, you have the option to SMS or MMS #code# to #number# to complete the request.
                        Once the request is completed, make a call to ^api_identity_token_request_query^ with the returned #code# as a parameter to get the #api_identity_token# and the #api_member_token#.
				</full>
			</doc>
			<url>/api_identity_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="api_member_token">
				<doc>Member that this identity will be added to. If this is blank and this is not a pre-existing member then a new member will be created after this request is completed</doc>
			</param>
			<param name="id">
				<doc>The identity id - eg email address or mobile phone number.</doc>
			</param>
			<param name="type">
				<doc>The identity type</doc>
			</param>
			<response>
				<doc>If #type# is 'mobile' it will return with the #code# that needs to be SMSed to the provided #number#.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_identity_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_identity_token_request_query^ should return the new API identity_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Assert that you own the email address drmiaow@gmail.com
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">eb21b2a8-3f3c-49ba-8c5a-f0f9d511f68b</param>
					<param name="id">drmiaow@gmail.com</param>
					<param name="type">email</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_authenticate" runat="server" enabled="true" object="identity" operation="create" group="tokens">
			<doc>
				<short>Authenticates an API Identity Token Request made by a previous call to ^api_identity_token_request^.</short>
				<full>This enables an application to vouch for the validity of an Identity.</full>
			</doc>
			<url>/api_identity_token_request_authenticate/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>Returns with the api_identity_token that has been created for the corresponding member represented by the api_member_token</doc>
				<param name="api_identity_token">
					<doc>This is the api identity token that was created or found matching the original request..</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This be the same as the one supplied to ^api_identity_token_request^, or if one was supplied, it will be a be for a newly created Member.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_validate" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Validates #api_member_token# and returns its current state. An API Member Token or an API Key can be 'revoked' due to abuse. </short>
			</doc>
			<url>/api_member_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Member Token to validate.</doc>
			</param>
			<response>
				<doc>The state of the API Member Token.</doc>
				<param name="state">
					<doc>The state of the API Member Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Member Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request_query" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API request.</short>
				<full>
                    This should be performed after a call to ^api_member_token_request^ and should pass in the code returned by that call. 
                    The api member_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_member_token_request^.
				</full>
			</doc>
			<url>/api_member_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Member Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_member_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_member_token_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the current API Member Token request</doc>
				<param name="request">
					<doc>If the API Member Token is ready for use, this will be 'ready' and the #api_member_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Member Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Member Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Member Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Requests an API Member Token.</short>
				<full>After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_member_token_request_query^ with the returned #code# as a parameter.</full>
			</doc>
			<url>/api_member_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number that it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_member_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_member_token_request_query^ should return the new API member_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_validate" runat="server" enabled="true" object="application" operation="read" group="key">
			<doc>
				<short>Validates #api_key# and returns its current state</short>
				<full>An API key can be 'revoked' due to abuse. </full>
			</doc>
			<url>/api_key_validate/</url>
			<param name="api_key">
				<doc>
                    API Key for the registered application that is calling this method. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.
				</doc>
			</param>
			<response>
				<doc>Returns the state of the API Key.</doc>
				<param name="state">
					<doc>The state of the API Key.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Key
					</doc>
					<param name="api_key">27aba919-ac95-46f2-ad7d-e55c0373a7c1</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request_query" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Queries the state of an API Key request.</short>
				<full>              
                    This is a back end API call - this is not part of the public API. 

					This should be performed after a call to ^api_key_request^ and should pass in the code returned by that call. 
                    The api key details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_key_request^.
				</full>
			</doc>
			<url>/api_key_request_query/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_key_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_key_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the request and the number of seconds remaining.</doc>
				<param name="request">
					<doc>If the API Key is ready for use, this will be 'ready' and the #api_key# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Key request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_key">
					<doc>The API Key returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Key that will not exist
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="code">mamapda</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Requests an API Key for an external application. This will register the external application against the specified user.</short>
				<full>
						After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_key_request_query^ with the returned #code# as a parameter. 
						If the name and the URL is for an existing application then the api_key for that pre-existing application will be returned.
				</full>
			</doc>
			<url>/api_key_request/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="name">
				<doc>The name of the application to be registered.</doc>
			</param>
			<param name="url">
				<doc>The url of the application to be registsted.</doc>
			</param>
			<param name="description">
				<doc>A description for the application to be registered.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_key_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_key_request_query^ should return the new API key</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Test Application</param>
					<param name="url">http://app.thumbwhere.com.au/test</param>
					<param name="description">Test Application</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="location_get_identity_ad" runat="server" enabled="true" object="location" operation="read" group="advertising">
			<doc>
				<short>For the specified location and individial, return an ad tailored to that individual at that location.</short>
			</doc>
			<url>/location_get_identity_ad/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="location_type">
				<doc>The location type for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="location_id">
				<doc>The location id for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_type">
				<doc>The identity type for the identity of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_id">
				<doc>The identity id for the identity of the individual this ad is targeted at.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Return a location aware add targeted at an individual by an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="location_type">meter</param>
					<param name="location_id">1234</param>
					<param name="identity_type">verus</param>
					<param name="identity_id">567</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<!--
        <action name="track_message" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/track_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Mobile number of the user
                </doc>
            </param>


            <response>              
                <param name="tracking_id">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>             
            </response>


            <scenarios>             
                <scenario>
                    <doc>
                        Basic test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="mobile">61407909186</param>

                </scenario>
            </scenarios>



        </action>


        <action name="message_tracking_status" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/message_tracking_status/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="tracking_id">
                <doc>
                    your tracking id for this submission
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>     
--><!--

        <action name="incoming_feed" runat="server" enabled="false">
            <doc>
                Tells the server to start performing a bulk import of media from the specified url.
            </doc>

            <url>/incoming_feed/</url>

            <param name="provider_id">
                <doc>
                    The provider key
                </doc>
            </param>

            <param name="url">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <param name="build_date">
                <doc>
                    Date and time that this feed was constucted.
                </doc>
            </param>

            <param name="digest">
                <doc>
                    MD5 fingerprint for the entire feed
                </doc>
            </param>





            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>


        <action name="verify_user" runat="server" enabled="false">
            <doc>
                verify that a user has the following mobile number.
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>  

        <action name="login_member" runat="server" enabled="false">
            <doc>
                Login as a member
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="username">
                <doc>
                    Username of member
                </doc>
            </param>

            <param name="session">
                <doc>
                    the session id
                </doc>
            </param>            

            <param name="password">
                <doc>
                    MD5 password of user
                </doc>
            </param>

            <response>              
                <param name="username">
                    <doc>
                        The user name passed in
                    </doc>
                </param>             

                <param name="session">
                    <doc>
                        A session id for this user
                    </doc>
                </param>             

                <param name="id">
                    <doc>
                        The id of the user
                    </doc>
                </param>             

                <param name="api_member_token">
                    <doc>
                        An API token for this user
                    </doc>
                </param>             

            </response>


            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Login test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                    <param name="username">guest</param>
                    <param name="password">guest</param>

                    <expect status="error">                 
                        <param name="username">james</param>
                        <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                        <param name="id">-1</param>
                        <param name="api_member_token"/>
                    </expect>                   
                </scenario>             
            </scenarios>

        </action>                    

        <action name="new_member" runat="server" enabled="false">
            <doc>Creates a new member and assigns to a new campaign</doc>
            <url>/new_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="campaign_id">
                <doc>the session campaign to assign this member to</doc>
            </param>            
            <param name="username">
                <doc>Username of member</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|the pk_mediaitem of the users profile pic</doc>
            </param>            
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>

            <response />
        </action>   

        <action name="update_member" runat="server" enabled="false">
            <doc>Update a member</doc>
            <url>/update_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>       
            <response />
        </action>

        <action name="update_member_optional" runat="server" enabled="false">
            <doc>Update a member by optionally only giving the fields you want to update</doc>
            <url>/update_member_optional/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>      

            <param name="showbirthday" >
                <doc/>
            </param>
            <param name="occupation" >
                <doc/>
            </param>
            <param name="imhandle" >
                <doc/>
            </param>
            <param name="imname" >
                <doc/>
            </param>
            <param name="interestsgeneral" >
                <doc/>
            </param>
            <param name="interestsmusic" >
                <doc/>
            </param>
            <param name="interestsmovies" >
                <doc/>
            </param>
            <param name="intereststvshows" >
                <doc/>
            </param>
            <param name="interestsbooks" >
                <doc/>
            </param>
            <param name="aboutme" >
                <doc/>
            </param>


            <response />
        </action>

        <action name="member_send_message" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_send_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_write_whiteboard" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_write_whiteboard/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="body">
                <doc>the message body</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_message_mark_read" runat="server" enabled="false">
            <doc>mark a message as read</doc>
            <url>/member_message_mark_read/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="membermembermessage">
                <doc>the pk of the message to mark as read</doc>
            </param>            
            <response />
        </action>

        <action name="update_member_profile_picture" runat="server" enabled="false">
            <doc>Update a members profile picture</doc>
            <url>/update_member_profile_picture/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>the members ID</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|an ID</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign key</doc>
            </param>
        </action>
--><action name="mediaitem_upload_pull" runat="server" enabled="true" object="mediaitem" operation="create" group="upload">
			<doc>
				<short>Ingests a new media item into the server.</short>
				<full>
					Requires the media to be publicly accessible via the internet so that thumbwhere can download it.
					One of the paramaters supplied needs to be an md5 digest of the file you are uploading.
					This action will wait until the media item is uploaded before it returns. 
					This delay will depend on the network connection between the source and thumbwhere cloud.
				</full>
			</doc>
			<url>/mediaitem_upload_pull/</url>
			<param name="api_key">
				<doc>
                    API key for the registered application that is calling this method. An API key is provided to developers who have registered a campaign or a campaign application.
				</doc>
			</param>
			<param name="url">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested. This url must be publicy available. In the background, after this call returns, transcoding and feed generation for the media item will commence. </doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="campaign_id">
				<doc>The campaign that we want this item added to.</doc>
			</param>
			<param name="identity_key" optional="true">
				<doc>The identity key of the member uploading the file.</doc>
			</param>
			<param name="digest">
				<doc>An MD5 checksum to validate against. See the MetaWrap.Utility.MD5FileHash(string p_file_path) C# function.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<response>
				<param name="mediaitem_id">
					<doc>id of the license in use</doc>
				</param>
				<param name="url">
					<doc>The url of the xml feed to the new media item. It may be a few seconds before this is published. There are ways of being notified that a media item is fully injested via application callbacks.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple jpeg">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="url">http://www.massive.com.au/projects/333/panasonic.jpg</param>
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">This is a test message</param>
					<param name="digest">73CDCAF793B4FE85D10CB717DC261F65</param>
					<param name="privacy">2</param>
					<param name="license">6</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="video">
					<doc>
						Basic JPG Upload (Example for AFF)
					</doc>
					<param name="api_key">4d17e52d-b5ef-4b29-b459-e5a01aef6283</param>
					<param name="url">http://www.movly.com/Content/Movies/Savage_Grace/Trailers/Savage_Grace_mp4_movie_trailer/MP4/savage-grace-trailer-.mp4</param>
					<param name="subject">Savage Grace Movie Trailer</param>
					<param name="body">The true story of the beautiful and charismatic Barbara Daly, who married above her class to Brooks Baekeland, heir to the Bakelite plastics fortune. Their only child is a failure in his father's eyes, and as he matures and becomes increasingly close to his lonely mother, the seeds for tragedy are sown..</param>
					<param name="digest">B8A7551DEAB8E5B02359221156263111</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_create_clone" runat="server" enabled="true" object="campaign" operation="create" group="create">
			<doc>
				<short>Create a campaign based on an existing campaign.</short>
				<full>The will clone the campaign details, the deployment servers and the media definitions for a specified campaign.</full>
			</doc>
			<url>/campaign_create_clone/</url>
			<param name="master_key">
				<doc>The master key for this instance of ThumbWhere</doc>
			</param>
			<param name="campaign_id">
				<doc>The Campaign Key for the campaign that you want to clone.</doc>
			</param>
			<response>
				<param name="campaign_id">
					<doc />
				</param>
				<param name="api_key">
					<doc />
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>	
						Example of cloning an existing campaign.
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Name Of Campaign</param>
					<param name="description">Description of Campaign</param>
					<expect status="success">
						<param name="campaign_id" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--

        <action name="verify_number" runat="server" enabled="false">
            <doc>Verifies that a number is known to the ThumbWhere</doc>
            <url>/verify_number/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
                </doc>
            </param>

            <param name="number">
                <doc>The phone number that we want to find out about.</doc>
            </param>


            <response>
                <param name="exists">
                    <doc>If there is an identity/member pair for this number then this is true.</doc>
                </param>

                <param name="identity">
                    <doc>id of the identity that has this number</doc>
                </param>

                <param name="member">
                    <doc>id of the member id of the identity that has this number</doc>
                </param>

            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Do I exist?
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="number">+61-123-456</param>

                    <expect status="success">                   
                        <param name="identity"/>
                        <param name="member"/>
                    </expect>   

                </scenario>             
            </scenarios>


        </action>   
--><!--
        <action name="media_item_add_comment" runat="server" enabled="false">
            <doc>Comment on a media item</doc>
            <url>/media_item_add_comment/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member">
                <doc>the member uploading the file</doc>
            </param>            
            <param name="mediaitem">
                <doc>the member item we are commenting on</doc>
            </param>            
            <response />
        </action>

        <action name="update_media_item" runat="server" enabled="false">
            <doc>Update the description fields of a media item</doc>
            <url>/update_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
            <param name="subject">
                <doc>the title of the file</doc>
            </param>
            <param name="body">
                <doc>a description of the file</doc>
            </param>
            <param name="tags">
                <doc>any additional tags</doc>
            </param>            
            <param name="privacy">
                <doc>the privacy level 0 = public, 1 = friends, 2 = identity(s)</doc>
            </param>
            <param name="license">
                <doc>id of the license in use</doc>
            </param>
        </action>

        <action name="update_media_item_increment_view_count" runat="server" enabled="false">
            <doc>Update the view count of a media item by 1</doc>
            <url>/update_media_item_increment_view_count/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
        </action>

        <action name="delete_media_item" runat="server" enabled="false">
            <doc>Delete a media file</doc>
            <url>/delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item to delete</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_identity" runat="server" enabled="false">
            <doc>Adds a link between a media item and identity</doc>
            <url>/media_item_add_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_delete_identity" runat="server" enabled="false">
            <doc>Removes the link between a media item and identity</doc>
            <url>/media_item_delete_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_rating" runat="server" enabled="false">
            <doc>Give a rating to a media item</doc>
            <url>/media_item_add_rating/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>Media item this is a rating of</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign this rating belongs to</doc>
            </param>
            <param name="member">
                <doc>member who made this rating</doc>
            </param>
            <param name="ipaddress">
                <doc>ip address that posted the rating</doc>
            </param>
            <param name="cookie">
                <doc>cookie name?</doc>
            </param>
            <param name="reason">
                <doc>a description of the rating</doc>
            </param>
            <param name="score">
                <doc>the score this rating received</doc>
            </param>
            <param name="maxscore">
                <doc>the maximum score that could have been awarded for this rating</doc>
            </param>
            <response />
        </action>

        <action name="member_add_friend" runat="server" enabled="false">
            <doc>Allows a member to add a friend</doc>
            <url>/member_add_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to be-friend</doc>
            </param>
            <response />
        </action>

        <action name="member_delete_friend" runat="server" enabled="false">
            <doc>Allows a member to delete a friend or a friend request</doc>
            <url>/member_delete_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to de-friend</doc>
            </param>
            <response />
        </action>

        <action name="new_member_group" runat="server" enabled="false">
            <doc>Allows a member to add a new group</doc>
            <url>/new_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="founder">
                <doc>ID of the member creating the group</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for this group</doc>
            </param>
            <response />
        </action>

        <action name="update_member_group" runat="server" enabled="false">
            <doc>Allows a member group to be updated</doc>
            <url>/update_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>id of the group to be deleted</doc>
            </param>
            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for the group</doc>
            </param>
            <response />
        </action>

        <action name="delete_member_group" runat="server" enabled="false">
            <doc>Deletes an entire member group</doc>
            <url>/delete_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the member group to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign to remove the group from</doc>
            </param>
            <response />
        </action>

        <action name="member_join_group" runat="server" enabled="false">
            <doc>Allows a member to join a group</doc>
            <url>/member_join_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to join</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="member_leave_group" runat="server" enabled="false">
            <doc>Allows a member to leave a group</doc>
            <url>/member_leave_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to leave</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="new_media_item_collection" runat="server" enabled="false">
            <doc>Create a media item collection</doc>
            <url>/new_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>collection title/name</doc>
            </param>
            <param name="media">
                <doc>the media type. if this is empty this collection can handle any media type. 
                     valid values are wallpaper,video,message,audio</doc>
            </param>
            <param name="description">
                <doc>a description</doc>
            </param>
            <param name="member">
                <doc>member id of the collection creator</doc>
            </param>
            <param name="public">
                <doc>True|False</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="delete_media_item_collection" runat="server" enabled="false">
            <doc>Deletes a media item collection</doc>
            <url>/delete_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>Id of the media item collection to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_add_media_item" runat="server" enabled="false">
            <doc>Adds a media item to a media item collection</doc>
            <url>/media_item_collection_add_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item</doc>
            </param>
            <param name="displayorder">
                <doc>order within the collection</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_delete_media_item" runat="server" enabled="false">
            <doc>Removes a media item from a media item collection</doc>
            <url>/media_item_collection_delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item to remove</doc>
            </param>
            <response />
        </action>
--></actions>
	<actions version="V0.0" service="ThumbWhere">
		<action name="member_add_mediaitem_comment" runat="server" enabled="true" object="member" operation="write" group="mediaitems">
			<doc>
				<short>Add a comment to an existing media item.</short>
				<full />
			</doc>
			<url>/member_add_mediaitem_comment/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="mediaitem_id">
				<doc>Ths id of the mediaitem that we are adding this comemnt to</doc>
			</param>
			<param name="subject">
				<doc>The subject of the comment</doc>
			</param>
			<param name="body">
				<doc>The body of the comment</doc>
			</param>
			<response>
				<doc />
				<param name="mediaitem_id">
					<doc>
						The created comment
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add Comment
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">Hello</param>
					<param name="body">Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Add a friend.</short>
				<full />
			</doc>
			<url>/member_add_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to add.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_friend">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Remove a friend.</short>
				<full />
			</doc>
			<url>/member_remove_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to remove.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_member_token_friend">5B36AAC5-B600-4A89-85AF-5F5F4BDA103F</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Add a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_add_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to trust.</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<param name="proxy">
				<doc>If true then this trusted member can act as a proxy for the trusting member</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<param name="proxy">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Remove a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_remove_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to remove from a trusted relationship</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Reset password of the member.</short>
				<full>Used to reset the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_reset_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_reset_identity_secret^. If you want to reset both id and secret at the same time, use ^member_reset_identity_credentials^.</full>
			</doc>
			<url>/member_reset_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Get a summary of the member.</short>
				<full />
			</doc>
			<url>/member_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or application</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for the memer we want a summary of</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code_by_identity_id" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code_by_identity_id/</url>
			<param name="master_key">
				<doc>Master key for this instance of ThumbWhere</doc>
			</param>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="id">
				<doc>
					Identity id
				</doc>
			</param>
			<param name="type">
				<doc>
					Identity type
				</doc>
			</param>
			<param name="alphabet">
				<doc>
					string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
					integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
						The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
						Request code for a member token based on an identity id
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">member</param>
					<param name="id">drmiaow</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member token that you want turned into a lookup code
				</doc>
			</param>
			<param name="alphabet">
				<doc>
                    string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
                    integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_lookup_code" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Returns an #api_member_token# associated with a lookup #code#</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_lookup_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to lookup.
				</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_revoke_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>If the supplied #code# exists, it is deleted.</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_revoke_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to revoke.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_value" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the value from the name value pair collection for the competition specified by #key".</short>
				<full />
			</doc>
			<url>/competition_get_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_value" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the value of the name value pair for a competition.</short>
				<full />
			</doc>
			<url>/competition_set_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the value of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_values" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the values from the name values pair for the competitions external application.</short>
				<full>                                      
					   The competition must be a competition of the external application.
					   The returned values is encrypted with the cruds encryption key.
				</full>
			</doc>
			<url>/competition_get_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_values" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the values of the name values pair for an competition who is a competition of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The competition must be a competition of the external application.					   
				</full>
			</doc>
			<url>/competition_set_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="moon">james2</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_add_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Adds a name value pair definition to a competition.</short>
				<full>This is shared across all competitions for this campaign.</full>
			</doc>
			<url>/competition_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Deletes a name value pair definition for a competition.</short>
				<full>This will delete the name value pair definition called #name# and all values of #name# across all competitions for this campaign.</full>
			</doc>
			<url>/competition_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_summary" runat="server" enabled="true" object="competition" operation="read" group="crud">
			<doc>
				<short>Get a summary of the competition. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/competition_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The Key for competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified competition
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_create_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Create a new round for a competition.</short>
				<full />
			</doc>
			<url>/competition_create_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_update_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Update an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_update_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the specified round.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Delete an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_delete_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete the specified round
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_add_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Adds a name value pair definition for an application.</short>
				<full>This is shared across all campaigns that use this application.</full>
			</doc>
			<url>/application_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_delete_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Deletes a name value pair definition for an application.</short>
				<full>This will delete the name value pair definition and values for all applications across all campaigns that use this applicaton.</full>
			</doc>
			<url>/application_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_get_summary" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Get a summary of the application. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/application_get_summary/</url>
			<param name="api_key">
				<doc>The API key for external application.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified application
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_username" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update username of the member.</short>
				<full>Used to change the username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the password of the member, use ^member_update_password^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_username/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the username of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the username of.</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the username of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_label" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity label of the identity for a member.</short>
				<full>An identity label provides a human readable label for an identity. The 'type' might be 'twitterv2api' but the label would be 'Twitter'</full>
			</doc>
			<url>/member_update_identity_label/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity.</doc>
			</param>
			<param name="label">
				<doc>The identity label that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the identity label for an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="label">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_id" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="id">
				<doc>The identity id that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="id">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Create an identity for this member.</short>
				<full />
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="type">
				<doc>The identity type.</doc>
			</param>
			<param name="id">
				<doc>The identity id.</doc>
			</param>
			<param name="secret">
				<doc>The identity secret.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="type">mobile_email</param>
					<param name="id" />
					<param name="secret">blah</param>
					<expect status="success">
						<param name="api_identity_token">
							<doc>The api identity token - the represents this identity wrt this api key</doc>
						</param>
						<param name="id">
							<doc>The id of the identity</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_delete" runat="server" enabled="true" object="member" operation="delete" group="crud">
			<doc>
				<short>Delete the specified Member.</short>
				<full>Marks a member as deleted - eventualy this member is purged from the database.</full>
			</doc>
			<url>/member_delete/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete this member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_login" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and a username and password pair</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<expect status="success">
						<param name="api_member_token">
							<doc>Anonymous</doc>
						</param>
						<param name="api_member_token">
							<doc>The name of the member</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_login_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and an identity.</short>
				<full>This call takes the type, id and secret of an identity and returns the member that owns this identity. If you want to authenticate against the member credentials use type of 'thumbwhere'.</full>
			</doc>
			<url>/member_login_identity/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="type">
				<doc>The type of identity that you want to login as.</doc>
			</param>
			<param name="id">
				<doc>The id of the identity that you want to login as.</doc>
			</param>
			<param name="secret">
				<doc>The secret of the identity you want to login as. You must prove you are who you say you are by providing the secret.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member in the context of the API key.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API identity token for this Member's identity.</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member using the internal 'thumbwhere' identity.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">thumbwhere</param>
					<param name="id">james</param>
					<param name="secret">james</param>
					<expect status="success">
						<param name="username">
							<doc>The name of the member</doc>
						</param>
						<param name="api_member_token">
							<doc>A unique token that represents this member in the context of the API key.</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_username_available" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Return true if the proposed #username# is available.</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="available">
					<doc>True if the username is available, false if it is not</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<expect status="success">
						<param name="available">
							<doc>True if the username is available, false if it is not</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_credentials" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update credentials of the member.</short>
				<full>Used to change the password and username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update just the username of the member, use ^member_update_username^. If you want to update just the password, use ^member_update_password^.</full>
			</doc>
			<url>/member_update_credentials/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the credentials of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the credentials of..</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update username and password of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<param name="new_password">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update password of the member.</short>
				<full>Used to change the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the password of.</doc>
			</param>
			<param name="password">
				<doc>The current password of the member you want to change the password of.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Adds a member to the application and sets the values of the name value pairs.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_add_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="application_id">
				<doc>he application key for the application that we want to add the member to.</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The api member key for the member for this application.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Removes a member from an application.</short>
				<full />
			</doc>
			<url>/member_remove_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_test_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Tests a Member's subscription to an application</short>
				<full>
					This will perform a test of an application using a Member's name value pairs.
					Eg. For Twitter it will end up calling the 'login' API call provided by Twitter to ensure that the 
					details provided will work.
				</full>
			</doc>
			<url>/member_test_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple test.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_get_summary" runat="server" enabled="true" object="campaign" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>
					The member must be a member of the external application.
					The returned values are encrypted with the applications encryption key if they are specified as encrypted over the wire in the name value pair definitions for this application.
				</full>
			</doc>
			<url>/campaign_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<response>
				<doc />
				<param name="name">
					<doc>
						The name of the campaign
					</doc>
				</param>
				<param name="description">
					<doc>
						 The name of the description						
					</doc>
				</param>
				<param name="apps" array="true" type="app">
					<doc>
						Collection of applications
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
						Request summary for the specified campaign.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the compeitionwinner flag for a competition entry.</short>
				<full>Sets the value for the entry competitionwinner attribute which is used to signify that this entry is the winner of a round.</full>
			</doc>
			<url>/competition_entry_set_competitionwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionwinner.</doc>
			</param>
			<param name="competitionwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure in generic status element.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition winner
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the competitionfinalist flag for a competition entry.</short>
				<full>
                Sets the value for the entry competitionfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_competitionfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionfinalist.</doc>
			</param>
			<param name="competitionfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundwinner flag for a competition entry.</short>
				<full>          
                Sets the value for the entry roundwinner attribute which is used to signify that this entry is the winner of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundwinner.</doc>
			</param>
			<param name="roundwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the round winner.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundfinalist flag for a competition entry.</short>
				<full>              
                Sets the value for the entry roundfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundfinalist.</doc>
			</param>
			<param name="roundfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as round finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_approved" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the approved flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_approved/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="approved">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as approved.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="approved">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_deleted" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the deleted flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_deleted/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="deleted">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as deleted.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="deleted">true</param>
					<expect status="sucess">
						<doc>No data returned - Simple sucess or failure.</doc>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_rejected" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the rejected flag for a competition entry.</short>
				<full>          
                    Marks an entry as rejected.
				</full>
			</doc>
			<url>/competition_entry_set_rejected/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="rejected">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as rejected.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="rejected">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote_confirm" runat="server" enabled="true" object="competition" operation="update" group="vote">
			<doc>
				<short>Confirms a vote on an entry in a competition.</short>
				<full>                      
                    This is normally used via SMS or via an email form as a way og making sure that the vote was made from a real email address or mobile phone.
				</full>
			</doc>
			<url>/competition_vote_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="vote_confirmation_code">
				<doc>The code that can be used to validate a vote..</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm a vote.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="vote_confirmation_code">g1gpwa</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote" runat="server" enabled="true" object="competition" operation="create" group="vote">
			<doc>
				<short>Votes for an entry in a competition.</short>
				<full>                                                  
                    This creates a pending vote for an entry in a competition. A code is returned. The vote will not be counted unless it is confirmed by a call to ^competition_vote_confirm^.
				</full>
			</doc>
			<url>/competition_vote/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>Represents the member doing the voting.</doc>
			</param>
			<param name="code">
				<doc>The code that represnts a vote for an entry in a competition.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Vote for an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">???</param>
					<param name="code">???</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create" runat="server" enabled="true" object="member" operation="create" group="crud">
			<doc>
				<short>Creates a new Member.</short>
				<full>                                                              
                    If a parameter is not provided, then the correponding field is not updated from the defaults. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/member_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="salutation">
				<doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
				</doc>
			</param>
			<param name="username">
				<doc>
                    String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<param name="password">
				<doc>
					String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<response>
				<doc>Returns an API Member Token.</doc>
				<param name="api_member_token">
					<doc>
                        API Member Token that represents this member making this change. This API Member Token is linked to the #api_key# that made this call and will not be valiud when used with a different API Key.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Member Creation
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--action name="member_update" runat="server" enabled="true" object="member" operation="update" group="crud" >
            <doc>   
                <short>Updates a Member's information.</short>
                <full>              
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
                </full>
            </doc>
            <url>/member_update/</url>

            <param name="api_key">
                <doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
            </param>

            <param name="api_member_token"  >
                <doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
                </doc>
            </param>

            <param name="email">
                <doc>
                    String - The email address for the membmer. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="salutation">
                <doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
                </doc>
            </param>            

            <param name="username">
                <doc>
                    String - The display name for the user - We do not check for uniqueness.
                </doc>
            </param>            


            <param name="firstname">
                <doc>
                    String - The first name of the member
                </doc>
            </param>            

            <param name="lastname">
                <doc>
                    String - The last name of the member
                </doc>
            </param>            

            <param name="phonemobile">
                <doc>
                    String - The mobile phone number for the member. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="postalpostcode">
                <doc>
                    String - The postcode for the user for their postal address
                </doc>
            </param>            

            <param name="receiveupdates">
                <doc>
                    Boolean - Wether of not the member wants to recieve updates.
                </doc>
            </param>    

            <response>
                <doc>No data returned - Simple sucess or failure.</doc>
            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Member Update
                    </doc>

                    <param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
                    <param name="api_member_token"/>
                    <param name="email">james@massive.com.au</param>
                    <param name="receiveupdates">false</param>
                    <param name="username">DrMiaow</param>
                    <param name="firstname">James</param>
                    <param name="lastname">Mc Parlane</param>
                    <param name="phonemobile">+1-000-000-000</param>
                    <param name="postalpostcode">2204</param>
                    <param name="postalstate">NSW</param>

                    <expect status="success">                                           
                    </expect>   

                </scenario>             
            </scenarios>

        </action-->
		<action name="member_get_feed" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the url for a Member's feed.</short>
				<full />
			</doc>
			<url>/member_get_feed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					The api member token for the member
				</doc>
			</param>
			<param name="type">
				<doc>
					The type of the feed
				</doc>
			</param>
			<response>
				<doc>
					Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
						The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="type">html</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
						Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_url" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #member# using their member id.</short>
				<full>                                      
                    Returns the URL for the specified #member#

                    This function is in the API for convenience. It is possible to calculate the url for a member.

                    From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                    Then take the member id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                    Then take the member and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                    If you add all these together you end up with 

                    http://core.thumbwhere.com/members/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="member">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_value" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the value from the name value pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned value is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_value" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the value of the name value pair for an member who is a member of an external application.</short>
				<full>                                      
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_error" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the error flag for a member in an application.</short>
				<full>
					This is called by external applications when they want to signify that there has been a error that requires the members attention. Eg. If they change their Twitter password so we can't make posts to Twitter on their behalf any more because the password we have is out of date.
				</full>
			</doc>
			<url>/member_set_application_error/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="error">
				<doc>
					bool - the value of the failed flag.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Set a Member's error flag.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="error">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_values" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_values" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the values of the name values pair for an member who is a member of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_campaign_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member in the campaign
				</doc>
			</param>
			<response>
				<doc />
				<param name="username">
					<doc>
                        The username of the member.
					</doc>
				</param>
				<param name="apps" type="array" class="app">
					<doc>
                        Collection of app element descriptions
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_move_between_members" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Moves a media item from one member to another. It will end up in the 'member' identity in the destination</short>
				<full />
			</doc>
			<url>/mediaitem_move_between_members/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token_from">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="api_member_token_to">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token_from">86f656f8-0bd0-4e87-b947-79f95aa2165f</param>
					<param name="api_member_token_to">0638a6a9-a041-45bd-ace4-eaea85a6c985</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_update" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Updates a MediaItems's information</short>
				<full>          
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/mediaitem_update/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="subject">
				<doc>
                    (optional) The subject text for the media item.
				</doc>
			</param>
			<param name="body">
				<doc>
					(optional) The body text of the media item.
				</doc>
			</param>
			<param name="privacy">
				<doc>
					(optional) 0 = in all feeds, 1 = only in member feeds and identity feeds, 2 = only in identity feeds, 3 or above - not in any feeds
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">This Is A Better Subject</param>
					<param name="body">This is a Beter Body</param>
					<expect status="success" />
				</scenario>
				<scenario name="simple">
					<doc>
						Only update privacy
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="privacy">0</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_get_url" runat="server" enabled="true" object="mediaitem" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #mediaitem#</short>
				<full>

                        This function is in for convenience. It is possible to calculate the url for a media item.

                        From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                        Then take the mediaitem id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                        Then take the mediaitem and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                        If you add all these together you end up with 

                        http://core.thumbwhere.com/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/mediaitem_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the mediaitem. If #redirect# is true, then this will actually redirect you to the Media Item's XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_list_transformations" runat="server" enabled="true" object="mediaitem" operation="enumerate" group="transformation">
			<doc>
				<short>Returns a list of all the transformations for a media item</short>
				<full />
			</doc>
			<url>/mediaitem_list_transformations/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to get all the transformations for
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_add_transformation" runat="server" enabled="true" object="mediaitem" operation="create" group="transformation">
			<doc>
				<short>Adds a transformation to a media item</short>
				<full>
                    All newly added transformations get added to the end. A transformation consists of two strings a #type# and an optional #argument#. 
				</full>
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to add the translation to.
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Adds a 'rotate left' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Adds a 'mirror' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Adds a 'caption bottom' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_transformation" runat="server" enabled="true" object="mediaitem" operation="update" group="transformation">
			<doc>
				<short>Sets the type and argument of the specified translation.</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to update the transformation for.
				</doc>
			</param>
			<param name="transformation">
				<doc>
                    long - The transformation we want to update
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation" />
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation" />
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation" />
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_transformation" runat="server" enabled="true" object="mediaitem" operation="delete" group="transformation">
			<doc>
				<short>Deletes a transformation for a specified media item</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to delete the transformation from
				</doc>
			</param>
			<param name="transformation">
				<doc>
                    long - The transformation we want to delete
				</doc>
			</param>
			<response>
				<doc>
                    Simple success or failure.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_rate" runat="server" enabled="true" object="mediaitem" group="ratings" operation="update">
			<doc>
				<short>Adds a rating to a MediaItem</short>
				<full>When called this returns the latest calculated rating of the media item.</full>
			</doc>
			<url>/mediaitem_rate/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    Optional API Member Token that represents the member making this rating. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="score">
				<doc>
                    The rating score. If the rating was 3 out of 5 stars, then this valur would be 3.
				</doc>
			</param>
			<param name="maxscore">
				<doc>
                    The rating maxscore. What the rating is "out of" If the rating was 3 out of 5 stars, then this value would be 5. 
				</doc>
			</param>
			<param name="ipaddress">
				<doc>
                    The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie">
				<doc>
                    A unique identifier. We ignore any ratings for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason">
				<doc>
                    A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the newly calculated rating for the media item.
				</doc>
				<param name="rating">
					<doc>
                        The actual rating for this media item.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="score">1</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
                        Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="score">3</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_viewed" runat="server" enabled="true" object="mediaitem" group="metrics" operation="update">
			<doc>
				<short>Increments the viewcount for a #mediaitem#</short>
			</doc>
			<url>/mediaitem_viewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are incrementing
				</doc>
			</param>
			<response>
				<doc>
					Returns the latest tally of views of the media item.
				</doc>
				<param name="mediaitem_id">
					<doc>The mediaitem that we incremented.</doc>
				</param>
				<param name="views">
					<doc>The latest number of views.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Increment numer of views
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="views" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_complain" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Adds a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_complain/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					Optional API Member Token that represents the member making this complaint. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="ipaddress" optional="true">
				<doc>
					The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie" optional="true">
				<doc>
					A unique identifier. We ignore any complaints for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason" optional="true">
				<doc>
					A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
					Returns the newly calculated rating for the media item.
				</doc>
				<param name="complaint_id">
					<doc>
						The id of the complaint created
					</doc>
				</param>
				<param name="complaints">
					<doc>
						The current number of complaints for this mediaitem
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reason">Offends my value system</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
						Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="reason">This bird wets it's nest</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_complaint" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Deletes a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_delete_complaint/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="mediaitemcomplaint_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="mediaitemcomplaint_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_censored" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'censored' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_censored/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the censored flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="censored">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_reviewed" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'reviewed' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_reviewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the 'reviewed' flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reviewed">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_create" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>Creates a single use ticket that can be used to upload content directly into thumbwhere. </short>
				<full>
                        This create an upload ticket that can be used with ^mediaitem_upload_push^.
				</full>
			</doc>
			<url>/mediaitem_upload_push_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
				</doc>
			</param>
			<param name="api_identity_token">
				<doc>
                    API Identity Token that we want the newly created media item to appear to be submitted by (eg. The mobile phone identity, or the Flikr identity).
				</doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<param name="maxsize" optional="true" default="10485760">
				<doc>The maximum size in bytes of file that we are allowed to upload.</doc>
			</param>
			<response>
				<doc>The upload ticket.</doc>
				<param name="ticket">
					<doc>The upload push ticket</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token" />
					<param name="api_identity_token" />
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">testdata</param>
					<param name="privacy">0</param>
					<param name="license">-1</param>
					<param name="maxsize">10485760</param>
					<expect status="success">
						<param name="ticket" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>
                    Uploads a media item directly into ThumbWhere
				</short>
				<full>
                        Allows you to peform a HTTP POST file upload directly into ThumbWhere. The media item that is created is based on the meta-data 
                        supplied in the call to ^mediaitem_upload_push_create^.
				</full>
			</doc>
			<url>/mediaitem_upload_push/</url>
			<param name="ticket">
				<doc />
			</param>
			<param name="file" upload="true">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="ticket" />
					<param name="file" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_query" runat="server" enabled="true" object="mediaitem" operation="read" group="upload">
			<doc>
				<short>Queries the status of an upload push in progress.</short>
				<full>Returns the status, number of bytes uploaded so far and the data rate.</full>
			</doc>
			<url>/mediaitem_upload_push_query/</url>
			<param name="ticket">
				<doc />
			</param>
			<response>
				<doc>Returns the status, number of bytes uploaded so far and the data rate.</doc>
				<param name="api_member_token">
					<doc>The API Member token of the member that has uploaded this media item.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API Identity token that was used to upload this media item.</doc>
				</param>
				<param name="member">
					<doc>The ID of the member that has uploaded this media item.</doc>
				</param>
				<param name="member_url">
					<doc>XML to the members XML feed.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was created when this file was uploaded.</doc>
				</param>
				<param name="size">
					<doc>The number of bytes that have been uploaded..</doc>
				</param>
				<param name="started">
					<doc>The time at which this upload started.</doc>
				</param>
				<param name="completed">
					<doc>The time at which this upload was completed..</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Query - Requires valid ticket
					</doc>
					<param name="ticket" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_confirm" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Confirms a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_query" runat="server" enabled="true" object="competition" operation="read" group="entry">
			<doc>
				<short>Queries a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_query/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Query a pending competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_create" runat="server" enabled="true" object="competition" operation="create" group="entry">
			<doc>
				<short>Creates an competition entry</short>
				<full>Takes a media item and enters it into a competition.</full>
			</doc>
			<url>/competition_entry_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.</doc>
			</param>
			<param name="round">
				<doc>The id of the competition round that we are adding this media item to</doc>
			</param>
			<param name="mediaitem_id">
				<doc>The id of the mediaitem being entered into the competition</doc>
			</param>
			<param name="approved">
				<doc>If this is true then the entry is created as approved. If you leave this parameter out the entry will be by default unapproved.</doc>
			</param>
			<response>
				<doc>Returns the code needed to approve/reject and vote for the entry..</doc>
				<param name="votecode">
					<doc>The code that is used to approve and vote for this entry.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Create a competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">89b4e3cb-38da-4907-aefa-316f99baf4f4</param>
					<param name="round">2</param>
					<param name="mediaitem_id">77</param>
					<expect status="success">
						<param name="votecode" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_login" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Login using an #api_key#/#api_member_token# pair.</short>
				<full>This is used to provide the same response as a normal username/password login (using ^member_login^ and ^member_login_identity^) from just the #api_member_token#</full>
			</doc>
			<url>/api_member_token_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API Member Token that we want to login as.</doc>
			</param>
			<response>
				<doc>The name of the Member and a direct url to their XML feed.</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="feedurl">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Login as member using the saved member token
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">d6029931-d37a-4dd2-8075-e6a41f4d5187</param>
					<expect status="success">
						<param name="username">
							<doc>Anonymous</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="invite" runat="server" enabled="true" object="application" operation="write" group="invite">
			<doc>
				<short>Creates an invitation that can be sent out to the provided #email#.</short>
				<full>Invitations are associated with the provided #api_key#</full>
			</doc>
			<url>/invite/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="email">
				<doc>The email adddress to add the invitation to.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure..</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Invite james to use the application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="email">james@massive.com.au</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_validate" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Validates #api_identity_token# and returns its current state.</short>
				<full>An API Identity Token or an API Key can be 'revoked' due to abuse.</full>
			</doc>
			<url>/api_identity_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Identity Token to validate.</doc>
			</param>
			<response>
				<doc>Returns the state of the API Identity Token.</doc>
				<param name="state">
					<doc>The state of the API Identity Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Identity Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_query" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API identity token request.</short>
				<full>
                This should be performed after a call to ^api_identity_token_request^ and should pass in the code returned by that call. 
                 The api identity_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_identity_token_request^.
				</full>
			</doc>
			<url>/api_identity_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>
                        Returns the status of the request, its expiry time in seconds and if it has been completed, the API Identity Token itself.
				</doc>
				<param name="request">
					<doc>If the API Identity Token is ready for use, this will be 'ready' and the #api_identity_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Identity Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Requests an API Identity Token.</short>
				<full>
                        After making the request, you need complete the request with a call to ^api_identity_token_request_authenticate^. This call should only be made if you are satisfed that the identity 
                        has been proven to belong to the person asserting that they own it.         
                        If this identity is a mobile phone, you have the option to SMS or MMS #code# to #number# to complete the request.
                        Once the request is completed, make a call to ^api_identity_token_request_query^ with the returned #code# as a parameter to get the #api_identity_token# and the #api_member_token#.
				</full>
			</doc>
			<url>/api_identity_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="api_member_token">
				<doc>Member that this identity will be added to. If this is blank and this is not a pre-existing member then a new member will be created after this request is completed</doc>
			</param>
			<param name="id">
				<doc>The identity id - eg email address or mobile phone number.</doc>
			</param>
			<param name="type">
				<doc>The identity type</doc>
			</param>
			<response>
				<doc>If #type# is 'mobile' it will return with the #code# that needs to be SMSed to the provided #number#.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_identity_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_identity_token_request_query^ should return the new API identity_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Assert that you own the email address drmiaow@gmail.com
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">eb21b2a8-3f3c-49ba-8c5a-f0f9d511f68b</param>
					<param name="id">drmiaow@gmail.com</param>
					<param name="type">email</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_authenticate" runat="server" enabled="true" object="identity" operation="create" group="tokens">
			<doc>
				<short>Authenticates an API Identity Token Request made by a previous call to ^api_identity_token_request^.</short>
				<full>This enables an application to vouch for the validity of an Identity.</full>
			</doc>
			<url>/api_identity_token_request_authenticate/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>Returns with the api_identity_token that has been created for the corresponding member represented by the api_member_token</doc>
				<param name="api_identity_token">
					<doc>This is the api identity token that was created or found matching the original request..</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This be the same as the one supplied to ^api_identity_token_request^, or if one was supplied, it will be a be for a newly created Member.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_validate" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Validates #api_member_token# and returns its current state. An API Member Token or an API Key can be 'revoked' due to abuse. </short>
			</doc>
			<url>/api_member_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Member Token to validate.</doc>
			</param>
			<response>
				<doc>The state of the API Member Token.</doc>
				<param name="state">
					<doc>The state of the API Member Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Member Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request_query" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API request.</short>
				<full>
                    This should be performed after a call to ^api_member_token_request^ and should pass in the code returned by that call. 
                    The api member_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_member_token_request^.
				</full>
			</doc>
			<url>/api_member_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Member Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_member_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_member_token_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the current API Member Token request</doc>
				<param name="request">
					<doc>If the API Member Token is ready for use, this will be 'ready' and the #api_member_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Member Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Member Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Member Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Requests an API Member Token.</short>
				<full>After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_member_token_request_query^ with the returned #code# as a parameter.</full>
			</doc>
			<url>/api_member_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number that it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_member_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_member_token_request_query^ should return the new API member_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_validate" runat="server" enabled="true" object="application" operation="read" group="key">
			<doc>
				<short>Validates #api_key# and returns its current state</short>
				<full>An API key can be 'revoked' due to abuse. </full>
			</doc>
			<url>/api_key_validate/</url>
			<param name="api_key">
				<doc>
                    API Key for the registered application that is calling this method. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.
				</doc>
			</param>
			<response>
				<doc>Returns the state of the API Key.</doc>
				<param name="state">
					<doc>The state of the API Key.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Key
					</doc>
					<param name="api_key">27aba919-ac95-46f2-ad7d-e55c0373a7c1</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request_query" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Queries the state of an API Key request.</short>
				<full>              
                    This is a back end API call - this is not part of the public API. 

					This should be performed after a call to ^api_key_request^ and should pass in the code returned by that call. 
                    The api key details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_key_request^.
				</full>
			</doc>
			<url>/api_key_request_query/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_key_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_key_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the request and the number of seconds remaining.</doc>
				<param name="request">
					<doc>If the API Key is ready for use, this will be 'ready' and the #api_key# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Key request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_key">
					<doc>The API Key returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Key that will not exist
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="code">mamapda</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Requests an API Key for an external application. This will register the external application against the specified user.</short>
				<full>
						After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_key_request_query^ with the returned #code# as a parameter. 
						If the name and the URL is for an existing application then the api_key for that pre-existing application will be returned.
				</full>
			</doc>
			<url>/api_key_request/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="name">
				<doc>The name of the application to be registered.</doc>
			</param>
			<param name="url">
				<doc>The url of the application to be registsted.</doc>
			</param>
			<param name="description">
				<doc>A description for the application to be registered.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_key_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_key_request_query^ should return the new API key</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Test Application</param>
					<param name="url">http://app.thumbwhere.com.au/test</param>
					<param name="description">Test Application</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="location_get_identity_ad" runat="server" enabled="true" object="location" operation="read" group="advertising">
			<doc>
				<short>For the specified location and individial, return an ad tailored to that individual at that location.</short>
			</doc>
			<url>/location_get_identity_ad/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="location_type">
				<doc>The location type for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="location_id">
				<doc>The location id for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_type">
				<doc>The identity type for the identity of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_id">
				<doc>The identity id for the identity of the individual this ad is targeted at.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Return a location aware add targeted at an individual by an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="location_type">meter</param>
					<param name="location_id">1234</param>
					<param name="identity_type">verus</param>
					<param name="identity_id">567</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<!--
        <action name="track_message" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/track_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Mobile number of the user
                </doc>
            </param>


            <response>              
                <param name="tracking_id">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>             
            </response>


            <scenarios>             
                <scenario>
                    <doc>
                        Basic test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="mobile">61407909186</param>

                </scenario>
            </scenarios>



        </action>


        <action name="message_tracking_status" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/message_tracking_status/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="tracking_id">
                <doc>
                    your tracking id for this submission
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>     
--><!--

        <action name="incoming_feed" runat="server" enabled="false">
            <doc>
                Tells the server to start performing a bulk import of media from the specified url.
            </doc>

            <url>/incoming_feed/</url>

            <param name="provider_id">
                <doc>
                    The provider key
                </doc>
            </param>

            <param name="url">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <param name="build_date">
                <doc>
                    Date and time that this feed was constucted.
                </doc>
            </param>

            <param name="digest">
                <doc>
                    MD5 fingerprint for the entire feed
                </doc>
            </param>





            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>


        <action name="verify_user" runat="server" enabled="false">
            <doc>
                verify that a user has the following mobile number.
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>  

        <action name="login_member" runat="server" enabled="false">
            <doc>
                Login as a member
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="username">
                <doc>
                    Username of member
                </doc>
            </param>

            <param name="session">
                <doc>
                    the session id
                </doc>
            </param>            

            <param name="password">
                <doc>
                    MD5 password of user
                </doc>
            </param>

            <response>              
                <param name="username">
                    <doc>
                        The user name passed in
                    </doc>
                </param>             

                <param name="session">
                    <doc>
                        A session id for this user
                    </doc>
                </param>             

                <param name="id">
                    <doc>
                        The id of the user
                    </doc>
                </param>             

                <param name="api_member_token">
                    <doc>
                        An API token for this user
                    </doc>
                </param>             

            </response>


            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Login test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                    <param name="username">guest</param>
                    <param name="password">guest</param>

                    <expect status="error">                 
                        <param name="username">james</param>
                        <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                        <param name="id">-1</param>
                        <param name="api_member_token"/>
                    </expect>                   
                </scenario>             
            </scenarios>

        </action>                    

        <action name="new_member" runat="server" enabled="false">
            <doc>Creates a new member and assigns to a new campaign</doc>
            <url>/new_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="campaign_id">
                <doc>the session campaign to assign this member to</doc>
            </param>            
            <param name="username">
                <doc>Username of member</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|the pk_mediaitem of the users profile pic</doc>
            </param>            
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>

            <response />
        </action>   

        <action name="update_member" runat="server" enabled="false">
            <doc>Update a member</doc>
            <url>/update_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>       
            <response />
        </action>

        <action name="update_member_optional" runat="server" enabled="false">
            <doc>Update a member by optionally only giving the fields you want to update</doc>
            <url>/update_member_optional/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>      

            <param name="showbirthday" >
                <doc/>
            </param>
            <param name="occupation" >
                <doc/>
            </param>
            <param name="imhandle" >
                <doc/>
            </param>
            <param name="imname" >
                <doc/>
            </param>
            <param name="interestsgeneral" >
                <doc/>
            </param>
            <param name="interestsmusic" >
                <doc/>
            </param>
            <param name="interestsmovies" >
                <doc/>
            </param>
            <param name="intereststvshows" >
                <doc/>
            </param>
            <param name="interestsbooks" >
                <doc/>
            </param>
            <param name="aboutme" >
                <doc/>
            </param>


            <response />
        </action>

        <action name="member_send_message" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_send_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_write_whiteboard" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_write_whiteboard/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="body">
                <doc>the message body</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_message_mark_read" runat="server" enabled="false">
            <doc>mark a message as read</doc>
            <url>/member_message_mark_read/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="membermembermessage">
                <doc>the pk of the message to mark as read</doc>
            </param>            
            <response />
        </action>

        <action name="update_member_profile_picture" runat="server" enabled="false">
            <doc>Update a members profile picture</doc>
            <url>/update_member_profile_picture/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>the members ID</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|an ID</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign key</doc>
            </param>
        </action>
--><action name="mediaitem_upload_pull" runat="server" enabled="true" object="mediaitem" operation="create" group="upload">
			<doc>
				<short>Ingests a new media item into the server.</short>
				<full>
					Requires the media to be publicly accessible via the internet so that thumbwhere can download it.
					One of the paramaters supplied needs to be an md5 digest of the file you are uploading.
					This action will wait until the media item is uploaded before it returns. 
					This delay will depend on the network connection between the source and thumbwhere cloud.
				</full>
			</doc>
			<url>/mediaitem_upload_pull/</url>
			<param name="api_key">
				<doc>
                    API key for the registered application that is calling this method. An API key is provided to developers who have registered a campaign or a campaign application.
				</doc>
			</param>
			<param name="url">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested. This url must be publicy available. In the background, after this call returns, transcoding and feed generation for the media item will commence. </doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="campaign_id">
				<doc>The campaign that we want this item added to.</doc>
			</param>
			<param name="identity_key" optional="true">
				<doc>The identity key of the member uploading the file.</doc>
			</param>
			<param name="digest">
				<doc>An MD5 checksum to validate against. See the MetaWrap.Utility.MD5FileHash(string p_file_path) C# function.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<response>
				<param name="mediaitem_id">
					<doc>id of the license in use</doc>
				</param>
				<param name="url">
					<doc>The url of the xml feed to the new media item. It may be a few seconds before this is published. There are ways of being notified that a media item is fully injested via application callbacks.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple jpeg">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="url">http://www.massive.com.au/projects/333/panasonic.jpg</param>
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">This is a test message</param>
					<param name="digest">73CDCAF793B4FE85D10CB717DC261F65</param>
					<param name="privacy">2</param>
					<param name="license">6</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="video">
					<doc>
						Basic JPG Upload (Example for AFF)
					</doc>
					<param name="api_key">4d17e52d-b5ef-4b29-b459-e5a01aef6283</param>
					<param name="url">http://www.movly.com/Content/Movies/Savage_Grace/Trailers/Savage_Grace_mp4_movie_trailer/MP4/savage-grace-trailer-.mp4</param>
					<param name="subject">Savage Grace Movie Trailer</param>
					<param name="body">The true story of the beautiful and charismatic Barbara Daly, who married above her class to Brooks Baekeland, heir to the Bakelite plastics fortune. Their only child is a failure in his father's eyes, and as he matures and becomes increasingly close to his lonely mother, the seeds for tragedy are sown..</param>
					<param name="digest">B8A7551DEAB8E5B02359221156263111</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_create_clone" runat="server" enabled="true" object="campaign" operation="create" group="create">
			<doc>
				<short>Create a campaign based on an existing campaign.</short>
				<full>The will clone the campaign details, the deployment servers and the media definitions for a specified campaign.</full>
			</doc>
			<url>/campaign_create_clone/</url>
			<param name="master_key">
				<doc>The master key for this instance of ThumbWhere</doc>
			</param>
			<param name="campaign_id">
				<doc>The Campaign Key for the campaign that you want to clone.</doc>
			</param>
			<response>
				<param name="campaign_id">
					<doc />
				</param>
				<param name="api_key">
					<doc />
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>	
						Example of cloning an existing campaign.
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Name Of Campaign</param>
					<param name="description">Description of Campaign</param>
					<expect status="success">
						<param name="campaign_id" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--

        <action name="verify_number" runat="server" enabled="false">
            <doc>Verifies that a number is known to the ThumbWhere</doc>
            <url>/verify_number/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
                </doc>
            </param>

            <param name="number">
                <doc>The phone number that we want to find out about.</doc>
            </param>


            <response>
                <param name="exists">
                    <doc>If there is an identity/member pair for this number then this is true.</doc>
                </param>

                <param name="identity">
                    <doc>id of the identity that has this number</doc>
                </param>

                <param name="member">
                    <doc>id of the member id of the identity that has this number</doc>
                </param>

            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Do I exist?
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="number">+61-123-456</param>

                    <expect status="success">                   
                        <param name="identity"/>
                        <param name="member"/>
                    </expect>   

                </scenario>             
            </scenarios>


        </action>   
--><!--
        <action name="media_item_add_comment" runat="server" enabled="false">
            <doc>Comment on a media item</doc>
            <url>/media_item_add_comment/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member">
                <doc>the member uploading the file</doc>
            </param>            
            <param name="mediaitem">
                <doc>the member item we are commenting on</doc>
            </param>            
            <response />
        </action>

        <action name="update_media_item" runat="server" enabled="false">
            <doc>Update the description fields of a media item</doc>
            <url>/update_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
            <param name="subject">
                <doc>the title of the file</doc>
            </param>
            <param name="body">
                <doc>a description of the file</doc>
            </param>
            <param name="tags">
                <doc>any additional tags</doc>
            </param>            
            <param name="privacy">
                <doc>the privacy level 0 = public, 1 = friends, 2 = identity(s)</doc>
            </param>
            <param name="license">
                <doc>id of the license in use</doc>
            </param>
        </action>

        <action name="update_media_item_increment_view_count" runat="server" enabled="false">
            <doc>Update the view count of a media item by 1</doc>
            <url>/update_media_item_increment_view_count/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
        </action>

        <action name="delete_media_item" runat="server" enabled="false">
            <doc>Delete a media file</doc>
            <url>/delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item to delete</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_identity" runat="server" enabled="false">
            <doc>Adds a link between a media item and identity</doc>
            <url>/media_item_add_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_delete_identity" runat="server" enabled="false">
            <doc>Removes the link between a media item and identity</doc>
            <url>/media_item_delete_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_rating" runat="server" enabled="false">
            <doc>Give a rating to a media item</doc>
            <url>/media_item_add_rating/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>Media item this is a rating of</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign this rating belongs to</doc>
            </param>
            <param name="member">
                <doc>member who made this rating</doc>
            </param>
            <param name="ipaddress">
                <doc>ip address that posted the rating</doc>
            </param>
            <param name="cookie">
                <doc>cookie name?</doc>
            </param>
            <param name="reason">
                <doc>a description of the rating</doc>
            </param>
            <param name="score">
                <doc>the score this rating received</doc>
            </param>
            <param name="maxscore">
                <doc>the maximum score that could have been awarded for this rating</doc>
            </param>
            <response />
        </action>

        <action name="member_add_friend" runat="server" enabled="false">
            <doc>Allows a member to add a friend</doc>
            <url>/member_add_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to be-friend</doc>
            </param>
            <response />
        </action>

        <action name="member_delete_friend" runat="server" enabled="false">
            <doc>Allows a member to delete a friend or a friend request</doc>
            <url>/member_delete_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to de-friend</doc>
            </param>
            <response />
        </action>

        <action name="new_member_group" runat="server" enabled="false">
            <doc>Allows a member to add a new group</doc>
            <url>/new_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="founder">
                <doc>ID of the member creating the group</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for this group</doc>
            </param>
            <response />
        </action>

        <action name="update_member_group" runat="server" enabled="false">
            <doc>Allows a member group to be updated</doc>
            <url>/update_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>id of the group to be deleted</doc>
            </param>
            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for the group</doc>
            </param>
            <response />
        </action>

        <action name="delete_member_group" runat="server" enabled="false">
            <doc>Deletes an entire member group</doc>
            <url>/delete_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the member group to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign to remove the group from</doc>
            </param>
            <response />
        </action>

        <action name="member_join_group" runat="server" enabled="false">
            <doc>Allows a member to join a group</doc>
            <url>/member_join_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to join</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="member_leave_group" runat="server" enabled="false">
            <doc>Allows a member to leave a group</doc>
            <url>/member_leave_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to leave</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="new_media_item_collection" runat="server" enabled="false">
            <doc>Create a media item collection</doc>
            <url>/new_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>collection title/name</doc>
            </param>
            <param name="media">
                <doc>the media type. if this is empty this collection can handle any media type. 
                     valid values are wallpaper,video,message,audio</doc>
            </param>
            <param name="description">
                <doc>a description</doc>
            </param>
            <param name="member">
                <doc>member id of the collection creator</doc>
            </param>
            <param name="public">
                <doc>True|False</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="delete_media_item_collection" runat="server" enabled="false">
            <doc>Deletes a media item collection</doc>
            <url>/delete_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>Id of the media item collection to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_add_media_item" runat="server" enabled="false">
            <doc>Adds a media item to a media item collection</doc>
            <url>/media_item_collection_add_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item</doc>
            </param>
            <param name="displayorder">
                <doc>order within the collection</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_delete_media_item" runat="server" enabled="false">
            <doc>Removes a media item from a media item collection</doc>
            <url>/media_item_collection_delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item to remove</doc>
            </param>
            <response />
        </action>
--></actions>
	<actions version="V1.0" service="ThumbWhere">
		<action name="member_update_mediaitem" runat="server" enabled="true" object="member" operation="update" group="mediaitems">
			<doc>
				<short>Updates a MediaItems's information</short>
				<full>
					If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/member_update_mediaitem/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member making this change. This member must own this media item to make the change.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="subject">
				<doc>
					(optional) The subject text for the media item.
				</doc>
			</param>
			<param name="body">
				<doc>
					(optional) The body text of the media item.
				</doc>
			</param>
			<param name="privacy">
				<doc>
					(optional) 0 = in all feeds, 1 = only in member feeds and identity feeds, 2 = only in identity feeds, 3 or above - not in any feeds
				</doc>
			</param>
			<param name="filter">
				<doc>
					(optional)  If this is true (default is false) then the subject and body will be filtered by the global and campaign specific user generated content filters.
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">This Is A Better Subject</param>
					<param name="body">This is a Beter Body</param>
					<expect status="success" />
				</scenario>
				<scenario name="simple">
					<doc>
						Only update privacy
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="privacy">0</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_list_mediaitem_transformations" runat="server" enabled="true" object="member" operation="enumerate" group="mediaitems">
			<doc>
				<short>Returns a list of all the transformations for a media item</short>
				<full />
			</doc>
			<url>/member_list_mediaitem_transformations/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					long - The media item we want to get all the transformations for
				</doc>
			</param>
			<response>
				<doc>
					A list of all the transformations for a media item
				</doc>
				<param name="url">
					<doc>
						The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_mediaitem_transformation" runat="server" enabled="true" object="member" operation="create" group="mediaitems">
			<doc>
				<short>Adds a transformation to a media item</short>
				<full>
					All newly added transformations get added to the end. A transformation consists of two strings a #type# and an optional #argument#.
				</full>
			</doc>
			<url>/member_add_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					long - The media item we want to add the translation to.
				</doc>
			</param>
			<param name="type">
				<doc>
					string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
					string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Adds a 'rotate left' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Adds a 'mirror' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Adds a 'caption bottom' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_mediaitem_transformation" runat="server" enabled="true" object="member" operation="update" group="mediaitems">
			<doc>
				<short>Sets the type and argument of the specified translation.</short>
				<full />
			</doc>
			<url>/member_set_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the member who owns this mediaitem that the transformation is being added to.
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
					long - The transformation we want to update
				</doc>
			</param>
			<param name="type">
				<doc>
					string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
					string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc>
					A list of all the transformations for a media item
				</doc>
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_delete_mediaitem_transformation" runat="server" enabled="true" object="member" operation="delete" group="mediaitems">
			<doc>
				<short>Deletes a transformation for a specified media item</short>
				<full />
			</doc>
			<url>/member_delete_mediaitem_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token for the memner who owns this mediaitem
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
					long - The transformation we want to delete
				</doc>
			</param>
			<response>
				<doc>
					Simple success or failure.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="transformation_id" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_mediaitem_comment" runat="server" enabled="true" object="member" operation="write" group="mediaitems">
			<doc>
				<short>Add a comment to an existing media item.</short>
				<full />
			</doc>
			<url>/member_add_mediaitem_comment/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="mediaitem_id">
				<doc>Ths id of the mediaitem that we are adding this comemnt to</doc>
			</param>
			<param name="subject">
				<doc>The subject of the comment</doc>
			</param>
			<param name="body">
				<doc>The body of the comment</doc>
			</param>
			<response>
				<doc />
				<param name="mediaitem_id">
					<doc>
						The created comment
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add Comment
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">Hello</param>
					<param name="body">Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Add a friend.</short>
				<full />
			</doc>
			<url>/member_add_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to add.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_friend">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_friend" runat="server" enabled="true" object="member" operation="read" group="friends">
			<doc>
				<short>Remove a friend.</short>
				<full />
			</doc>
			<url>/member_remove_friend/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_friend">
				<doc>The API member token for the friend we want to remove.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_member_token_friend">5B36AAC5-B600-4A89-85AF-5F5F4BDA103F</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Add a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_add_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to trust.</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<param name="proxy">
				<doc>If true then this trusted member can act as a proxy for the trusting member</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<param name="proxy">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_trustrelationship" runat="server" enabled="true" object="member" operation="read" group="trustrelationships">
			<doc>
				<short>Remove a trustrelationship.</short>
				<full />
			</doc>
			<url>/member_remove_trustrelationship/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_member_token_trusted">
				<doc>The API member token for the member we want to remove from a trusted relationship</doc>
			</param>
			<param name="type">
				<doc>The type of the trust relationship</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Friend
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<param name="api_member_token_trusted">bf84b33d-1bb6-4073-b3a5-25a0f2242ee6</param>
					<param name="type">parent</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Reset password of the member.</short>
				<full>Used to reset the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_reset_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_reset_identity_secret" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_reset_identity_secret^. If you want to reset both id and secret at the same time, use ^member_reset_identity_credentials^.</full>
			</doc>
			<url>/member_reset_identity_secret/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="secret">
				<doc>The identity secret that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="secret">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Get a summary of the member.</short>
				<full />
			</doc>
			<url>/member_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or application</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for the memer we want a summary of</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code_by_identity_id" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code_by_identity_id/</url>
			<param name="master_key">
				<doc>Master key for this instance of ThumbWhere</doc>
			</param>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="id">
				<doc>
					Identity id
				</doc>
			</param>
			<param name="type">
				<doc>
					Identity type
				</doc>
			</param>
			<param name="alphabet">
				<doc>
					string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
					integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
						The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
						Request code for a member token based on an identity id
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">member</param>
					<param name="id">drmiaow</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_create_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>Creates a lookup #code# that can be exchanged in the future for the specified api_member_token</short>
				<full />
			</doc>
			<url>/api_member_token_create_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member token that you want turned into a lookup code
				</doc>
			</param>
			<param name="alphabet">
				<doc>
                    string - The dictionary that you want to use to construct the code
				</doc>
			</param>
			<param name="length">
				<doc>
                    integer - The length of the code you want to construct
				</doc>
			</param>
			<response>
				<doc />
				<param name="code">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">1FFFB28C-6B2C-4584-B2F7-37F481FB84D6</param>
					<param name="alphabet">abcdefhkpqrwxyz2348</param>
					<param name="length">5</param>
					<expect status="success">
						<param name="code" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_lookup_code" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Returns an #api_member_token# associated with a lookup #code#</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_lookup_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to lookup.
				</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The created code
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_revoke_code" runat="server" enabled="true" object="member" operation="write" group="tokens">
			<doc>
				<short>If the supplied #code# exists, it is deleted.</short>
				<full>
					To create a code, make a call to ^api_member_token_create_code^ with the #api_member_token# that you want to create.
				</full>
			</doc>
			<url>/api_member_token_revoke_code/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>
                    The code you want to revoke.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Simple code lookup
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">fykwt</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_value" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the value from the name value pair collection for the competition specified by #key".</short>
				<full />
			</doc>
			<url>/competition_get_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_value" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the value of the name value pair for a competition.</short>
				<full />
			</doc>
			<url>/competition_set_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the value of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">moon</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_values" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Returns the values from the name values pair for the competitions external application.</short>
				<full>                                      
					   The competition must be a competition of the external application.
					   The returned values is encrypted with the cruds encryption key.
				</full>
			</doc>
			<url>/competition_get_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_set_values" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Sets the values of the name values pair for an competition who is a competition of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The competition must be a competition of the external application.					   
				</full>
			</doc>
			<url>/competition_set_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="competition_id">
				<doc>
                    Competition Key that represents the competition
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="something">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="moon">james2</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_add_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="write" group="namevaluepairs">
			<doc>
				<short>Adds a name value pair definition to a competition.</short>
				<full>This is shared across all competitions for this campaign.</full>
			</doc>
			<url>/competition_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_namevaluepairdefinition" runat="server" enabled="true" object="competition" operation="read" group="namevaluepairs">
			<doc>
				<short>Deletes a name value pair definition for a competition.</short>
				<full>This will delete the name value pair definition called #name# and all values of #name# across all competitions for this campaign.</full>
			</doc>
			<url>/competition_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_get_summary" runat="server" enabled="true" object="competition" operation="read" group="crud">
			<doc>
				<short>Get a summary of the competition. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/competition_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The Key for competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified competition
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">A267E264-595C-11DE-A476-CD7E56D89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_create_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Create a new round for a competition.</short>
				<full />
			</doc>
			<url>/competition_create_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition.</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this competition.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_update_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Update an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_update_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<param name="name">
				<doc>The name of the round.</doc>
			</param>
			<param name="description">
				<doc>The description of the round.</doc>
			</param>
			<param name="submit_start" type="DateTime">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="submit_end" type="DateTime">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<param name="vote_start" type="DateTime" optional="true">
				<doc>Start time for votes to the competition.</doc>
			</param>
			<param name="vote_end" type="DateTime" optional="true">
				<doc>End time for votes to the competition.</doc>
			</param>
			<param name="vote_confirm_start" type="DateTime" optional="true">
				<doc>Start time for submissions to the competition.</doc>
			</param>
			<param name="vote_confirm_end" type="DateTime" optional="true">
				<doc>End time for submissions to the competition.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the specified round.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<param name="name">cheese</param>
					<param name="description">is good</param>
					<param name="submit_start">2009-06-20T00:00:00</param>
					<param name="submit_end">2009-07-19T23:59:59</param>
					<param name="vote_start">2009-06-20T00:00:00</param>
					<param name="vote_end">2009-07-19T23:59:59</param>
					<param name="vote_confirm_start">2009-06-20T00:00:00</param>
					<param name="vote_confirm_end">2009-07-19T23:59:59</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_delete_round" runat="server" enabled="true" object="competition" operation="read" group="round">
			<doc>
				<short>Delete an existing round for a competition.</short>
				<full />
			</doc>
			<url>/competition_delete_round/</url>
			<param name="api_key">
				<doc>The API key for the campaign.</doc>
			</param>
			<param name="competition_id">
				<doc>The id  for the competition that contains the round</doc>
			</param>
			<param name="round_id">
				<doc>The id  for the round to be updated</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete the specified round
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="competition_id">5ff87d60-2757-47ad-be23-28fb4b526b0c</param>
					<param name="round_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_add_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Adds a name value pair definition for an application.</short>
				<full>This is shared across all campaigns that use this application.</full>
			</doc>
			<url>/application_add_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name value pair.</doc>
			</param>
			<param name="type">
				<doc>The type of the name value pair eg. 'string','integer','parsecs etc.'.</doc>
			</param>
			<param name="encrypted">
				<doc>If this is true then the name value pair is encrypted in feeds and when transported accross the net.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add a new name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<param name="type">string</param>
					<param name="encrypted">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_delete_namevaluepairdefinition" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Deletes a name value pair definition for an application.</short>
				<full>This will delete the name value pair definition and values for all applications across all campaigns that use this applicaton.</full>
			</doc>
			<url>/application_delete_namevaluepairdefinition/</url>
			<param name="api_key">
				<doc>The API key for the external application.</doc>
			</param>
			<param name="name">
				<doc>The name of the name valie pair to be deleted.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete a name value pair definition for this application.
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<param name="name">cheese</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="application_get_summary" runat="server" enabled="true" object="application" operation="read" group="crud">
			<doc>
				<short>Get a summary of the application. Its url and its name value pair definitions.</short>
				<full />
			</doc>
			<url>/application_get_summary/</url>
			<param name="api_key">
				<doc>The API key for external application.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Get a summary of the specified application
					</doc>
					<param name="api_key">1259d917-3dea-4f50-b22c-5c5a1ef47ca6</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_username" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update username of the member.</short>
				<full>Used to change the username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the password of the member, use ^member_update_password^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_username/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the username of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the username of.</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the username of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_label" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity label of the identity for a member.</short>
				<full>An identity label provides a human readable label for an identity. The 'type' might be 'twitterv2api' but the label would be 'Twitter'</full>
			</doc>
			<url>/member_update_identity_label/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity.</doc>
			</param>
			<param name="label">
				<doc>The identity label that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update the identity label for an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="label">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_identity_id" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update identity id of an identity for a specified member.</short>
				<full>In an indentity, the 'id' is the equivalent of the username for the identity. If you want to change the secret (password) for the identity, use ^member_update_identity_secret^. If you want to update both id and secret at the same time, use ^member_update_identity_credentials^.</full>
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="api_identity_token">
				<doc>The API identity token for this Member's identity</doc>
			</param>
			<param name="id">
				<doc>The identity id that we want to change to.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change id of the specified identity for the specified member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="api_identity_token">12a754c8-0307-4971-bb6e-7e700d9d4384</param>
					<param name="id">blah</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Create an identity for this member.</short>
				<full />
			</doc>
			<url>/member_update_identity_id/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="type">
				<doc>The identity type.</doc>
			</param>
			<param name="id">
				<doc>The identity id.</doc>
			</param>
			<param name="secret">
				<doc>The identity secret.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="type">mobile_email</param>
					<param name="id" />
					<param name="secret">blah</param>
					<expect status="success">
						<param name="api_identity_token">
							<doc>The api identity token - the represents this identity wrt this api key</doc>
						</param>
						<param name="id">
							<doc>The id of the identity</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_delete" runat="server" enabled="true" object="member" operation="delete" group="crud">
			<doc>
				<short>Delete the specified Member.</short>
				<full>Marks a member as deleted - eventualy this member is purged from the database.</full>
			</doc>
			<url>/member_delete/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Delete this member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_login" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and a username and password pair</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<expect status="success">
						<param name="api_member_token">
							<doc>Anonymous</doc>
						</param>
						<param name="api_member_token">
							<doc>The name of the member</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_login_identity" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Login using an #api_key# and an identity.</short>
				<full>This call takes the type, id and secret of an identity and returns the member that owns this identity. If you want to authenticate against the member credentials use type of 'thumbwhere'.</full>
			</doc>
			<url>/member_login_identity/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="type">
				<doc>The type of identity that you want to login as.</doc>
			</param>
			<param name="id">
				<doc>The id of the identity that you want to login as.</doc>
			</param>
			<param name="secret">
				<doc>The secret of the identity you want to login as. You must prove you are who you say you are by providing the secret.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="api_member_token">
					<doc>A unique token that represents this member in the context of the API key.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API identity token for this Member's identity.</doc>
				</param>
				<param name="url">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member using the internal 'thumbwhere' identity.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="type">thumbwhere</param>
					<param name="id">james</param>
					<param name="secret">james</param>
					<expect status="success">
						<param name="username">
							<doc>The name of the member</doc>
						</param>
						<param name="api_member_token">
							<doc>A unique token that represents this member in the context of the API key.</doc>
						</param>
						<param name="url">
							<doc>URL to the XML feed that describes this member</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_username_available" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Return true if the proposed #username# is available.</short>
				<full />
			</doc>
			<url>/member_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to login as.</doc>
			</param>
			<response>
				<doc>Returns with the API Member token and the direct URL to the members xml feed,</doc>
				<param name="available">
					<doc>True if the username is available, false if it is not</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Login as a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">james</param>
					<expect status="success">
						<param name="available">
							<doc>True if the username is available, false if it is not</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_credentials" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update credentials of the member.</short>
				<full>Used to change the password and username of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update just the username of the member, use ^member_update_username^. If you want to update just the password, use ^member_update_password^.</full>
			</doc>
			<url>/member_update_credentials/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the credentials of.</doc>
			</param>
			<param name="password">
				<doc>The password of the member you want to change the credentials of..</doc>
			</param>
			<param name="new_username">
				<doc>The new username of the member.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Update username and password of a member.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">james</param>
					<param name="password">james</param>
					<param name="new_username">james</param>
					<param name="new_password">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_update_password" runat="server" enabled="true" object="member" operation="read" group="security">
			<doc>
				<short>Update password of the member.</short>
				<full>Used to change the password of the member. This maps into an internal identity of type 'thumbwhere'. If you want to update the username of the member, use ^member_update_username^. If you want to update both the username and the password, use ^member_update_credentials^.</full>
			</doc>
			<url>/member_update_password/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API member token for this member.</doc>
			</param>
			<param name="username">
				<doc>The username of the member you want to change the password of.</doc>
			</param>
			<param name="password">
				<doc>The current password of the member you want to change the password of.</doc>
			</param>
			<param name="new_password">
				<doc>The new password of the member.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Change password of member
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<param name="new_password">ilovebees</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_add_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Adds a member to the application and sets the values of the name value pairs.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_add_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="application_id">
				<doc>he application key for the application that we want to add the member to.</doc>
			</param>
			<response>
				<doc />
				<param name="api_member_token">
					<doc>
                        The api member key for the member for this application.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_remove_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Removes a member from an application.</short>
				<full />
			</doc>
			<url>/member_remove_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Add member to application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_test_application" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Tests a Member's subscription to an application</short>
				<full>
					This will perform a test of an application using a Member's name value pairs.
					Eg. For Twitter it will end up calling the 'login' API call provided by Twitter to ensure that the 
					details provided will work.
				</full>
			</doc>
			<url>/member_test_application/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member.
				</doc>
			</param>
			<param name="application_id">
				<doc>The application key for the application that we want to remove the member from.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple test.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="application_id">3360f14e-f0ed-11dd-b12a-605456d89593</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_bandwidthusage_create" runat="server" enabled="true" object="campaign" operation="update" group="reporting">
			<doc>
				<short />
				<full />
			</doc>
			<url>/campaign_bandwidthusage_create/</url>
			<param name="api_key">
				<doc />
			</param>
			<param name="api_member_token">
				<doc />
			</param>
			<param name="actor">
				<doc />
			</param>
			<param name="action">
				<doc />
			</param>
			<param name="target">
				<doc />
			</param>
			<param name="magnitide">
				<doc />
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc />
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">7baa8386-1543-45fb-bcd2-85bcba74df02</param>
					<param name="actor">Colonel Mustard</param>
					<param name="action">Lead Pipe</param>
					<param name="target">Reverend Green</param>
					<param name="magnitude">11</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_get_summary" runat="server" enabled="true" object="campaign" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>
					The member must be a member of the external application.
					The returned values are encrypted with the applications encryption key if they are specified as encrypted over the wire in the name value pair definitions for this application.
				</full>
			</doc>
			<url>/campaign_get_summary/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<response>
				<doc />
				<param name="name">
					<doc>
						The name of the campaign
					</doc>
				</param>
				<param name="description">
					<doc>
						 The name of the description						
					</doc>
				</param>
				<param name="apps" array="true" type="app">
					<doc>
						Collection of applications
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
						Request summary for the specified campaign.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the compeitionwinner flag for a competition entry.</short>
				<full>Sets the value for the entry competitionwinner attribute which is used to signify that this entry is the winner of a round.</full>
			</doc>
			<url>/competition_entry_set_competitionwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionwinner.</doc>
			</param>
			<param name="competitionwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure in generic status element.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition winner
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_competitionfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the competitionfinalist flag for a competition entry.</short>
				<full>
                Sets the value for the entry competitionfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_competitionfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a competitionfinalist.</doc>
			</param>
			<param name="competitionfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the competition finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="competitionfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundwinner" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundwinner flag for a competition entry.</short>
				<full>          
                Sets the value for the entry roundwinner attribute which is used to signify that this entry is the winner of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundwinner/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundwinner.</doc>
			</param>
			<param name="roundwinner">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set the round winner.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundwinner">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_roundfinalist" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the roundfinalist flag for a competition entry.</short>
				<full>              
                Sets the value for the entry roundfinalist attribute which is used to signify that this entry is the finalist of a round.
				</full>
			</doc>
			<url>/competition_entry_set_roundfinalist/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to set as a roundfinalist.</doc>
			</param>
			<param name="roundfinalist">
				<doc>true or false - if this is not incuded in the action call then this will be defaulted to true </doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as round finalist.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="roundfinalist">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_approved" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the approved flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_approved/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="approved">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as approved.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="approved">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_deleted" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the deleted flag for a competition entry.</short>
				<full>          
                Approves an entry. After approval this entry will be available in the competitions.xml manifest file.
				</full>
			</doc>
			<url>/competition_entry_set_deleted/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="deleted">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as deleted.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="deleted">true</param>
					<expect status="sucess">
						<doc>No data returned - Simple sucess or failure.</doc>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_set_rejected" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Sets the rejected flag for a competition entry.</short>
				<full>          
                    Marks an entry as rejected.
				</full>
			</doc>
			<url>/competition_entry_set_rejected/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="votecode">
				<doc>The code that can be used to identify the entry that we want to approve. We use the same code for voting as for approval.</doc>
			</param>
			<param name="rejected">
				<doc>True or False - this is the value that will be set 0 by default its set to true</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Set as rejected.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="votecode">ama1da</param>
					<param name="rejected">true</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote_confirm" runat="server" enabled="true" object="competition" operation="update" group="vote">
			<doc>
				<short>Confirms a vote on an entry in a competition.</short>
				<full>                      
                    This is normally used via SMS or via an email form as a way og making sure that the vote was made from a real email address or mobile phone.
				</full>
			</doc>
			<url>/competition_vote_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="vote_confirmation_code">
				<doc>The code that can be used to validate a vote..</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm a vote.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="vote_confirmation_code">g1gpwa</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_vote" runat="server" enabled="true" object="competition" operation="create" group="vote">
			<doc>
				<short>Votes for an entry in a competition.</short>
				<full>                                                  
                    This creates a pending vote for an entry in a competition. A code is returned. The vote will not be counted unless it is confirmed by a call to ^competition_vote_confirm^.
				</full>
			</doc>
			<url>/competition_vote/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>Represents the member doing the voting.</doc>
			</param>
			<param name="code">
				<doc>The code that represnts a vote for an entry in a competition.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Vote for an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">???</param>
					<param name="code">???</param>
					<expect status="sucess" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_create" runat="server" enabled="true" object="member" operation="create" group="crud">
			<doc>
				<short>Creates a new Member.</short>
				<full>                                                              
                    If a parameter is not provided, then the correponding field is not updated from the defaults. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/member_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="salutation">
				<doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
				</doc>
			</param>
			<param name="username">
				<doc>
                    String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<param name="password">
				<doc>
					String - The display name for the user - We do not check for uniqueness.
				</doc>
			</param>
			<response>
				<doc>Returns an API Member Token.</doc>
				<param name="api_member_token">
					<doc>
                        API Member Token that represents this member making this change. This API Member Token is linked to the #api_key# that made this call and will not be valiud when used with a different API Key.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Member Creation
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="username">DrMiaow</param>
					<param name="password">ilovebees</param>
					<expect status="success">
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--action name="member_update" runat="server" enabled="true" object="member" operation="update" group="crud" >
            <doc>   
                <short>Updates a Member's information.</short>
                <full>              
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
                </full>
            </doc>
            <url>/member_update/</url>

            <param name="api_key">
                <doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
            </param>

            <param name="api_member_token"  >
                <doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
                </doc>
            </param>

            <param name="email">
                <doc>
                    String - The email address for the membmer. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="salutation">
                <doc>
                    String - The salutation for the member. Eg Mr, Mrs, Miss, Pope, Miss Pope.. etc..
                </doc>
            </param>            

            <param name="username">
                <doc>
                    String - The display name for the user - We do not check for uniqueness.
                </doc>
            </param>            


            <param name="firstname">
                <doc>
                    String - The first name of the member
                </doc>
            </param>            

            <param name="lastname">
                <doc>
                    String - The last name of the member
                </doc>
            </param>            

            <param name="phonemobile">
                <doc>
                    String - The mobile phone number for the member. This is not mapped into an Identity.
                </doc>
            </param>            

            <param name="postalpostcode">
                <doc>
                    String - The postcode for the user for their postal address
                </doc>
            </param>            

            <param name="receiveupdates">
                <doc>
                    Boolean - Wether of not the member wants to recieve updates.
                </doc>
            </param>    

            <response>
                <doc>No data returned - Simple sucess or failure.</doc>
            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Member Update
                    </doc>

                    <param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
                    <param name="api_member_token"/>
                    <param name="email">james@massive.com.au</param>
                    <param name="receiveupdates">false</param>
                    <param name="username">DrMiaow</param>
                    <param name="firstname">James</param>
                    <param name="lastname">Mc Parlane</param>
                    <param name="phonemobile">+1-000-000-000</param>
                    <param name="postalpostcode">2204</param>
                    <param name="postalstate">NSW</param>

                    <expect status="success">                                           
                    </expect>   

                </scenario>             
            </scenarios>

        </action-->
		<action name="member_get_feed" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the url for a Member's feed.</short>
				<full />
			</doc>
			<url>/member_get_feed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					The api member token for the member
				</doc>
			</param>
			<param name="type">
				<doc>
					The type of the feed
				</doc>
			</param>
			<response>
				<doc>
					Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
						The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="type">html</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
						Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_url" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #member# using their member id.</short>
				<full>                                      
                    Returns the URL for the specified #member#

                    This function is in the API for convenience. It is possible to calculate the url for a member.

                    From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                    Then take the member id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                    Then take the member and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                    If you add all these together you end up with 

                    http://core.thumbwhere.com/members/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="member">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the member. If #redirect# is true, then this will actually redirect you to the Members XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="member">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_value" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the value from the name value pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned value is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are reading.
				</doc>
			</param>
			<response>
				<doc />
				<param name="encrypted">
					<doc>
                        If this is true then the value returned is encrypted.
					</doc>
				</param>
				<param name="name">
					<doc>
                        The name of the value requested
					</doc>
				</param>
				<param name="value">
					<doc>
                        The value returned
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<expect status="success">
						<param name="encrypted" />
						<param name="name" />
						<param name="value" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_value" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the value of the name value pair for an member who is a member of an external application.</short>
				<full>                                      
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_value/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<param name="name">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<param name="value">
				<doc>
                    string - the name of the value we are setting.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="name">username</param>
					<param name="value">james</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_error" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the error flag for a member in an application.</short>
				<full>
					This is called by external applications when they want to signify that there has been a error that requires the members attention. Eg. If they change their Twitter password so we can't make posts to Twitter on their behalf any more because the password we have is out of date.
				</full>
			</doc>
			<url>/member_set_application_error/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					API Member Token that represents the member
				</doc>
			</param>
			<param name="error">
				<doc>
					bool - the value of the failed flag.
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Set a Member's error flag.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="error">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_application_values" runat="server" enabled="true" object="member" operation="read" group="application">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_set_application_values" runat="server" enabled="true" object="member" operation="write" group="application">
			<doc>
				<short>Sets the values of the name values pair for an member who is a member of an external application.</short>
				<full>
				       Values are provided as elements. 
					   The member must be a member of the external application.					   
				</full>
			</doc>
			<url>/member_set_application_values/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">e2a02989-70ae-40b6-a623-2e6a818b7065</param>
					<param name="username">james</param>
					<param name="password">its a secret</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="member_get_campaign_summary" runat="server" enabled="true" object="member" operation="read" group="crud">
			<doc>
				<short>Returns the values from the name values pair for the members external application.</short>
				<full>                                      
					   The member must be a member of the external application.
					   The returned values is encrypted with the applications encryption key.
				</full>
			</doc>
			<url>/member_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member in the campaign
				</doc>
			</param>
			<response>
				<doc />
				<param name="username">
					<doc>
                        The username of the member.
					</doc>
				</param>
				<param name="apps" type="array" class="app">
					<doc>
                        Collection of app element descriptions
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="main application">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">c2883980-73b9-43ce-8d8e-21e9588cb8dd</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_move_between_members" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Moves a media item from one member to another. It will end up in the 'member' identity in the destination</short>
				<full />
			</doc>
			<url>/mediaitem_move_between_members/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token_from">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="api_member_token_to">
				<doc>
					API Member Token that represents the member we are moving the media from
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token_from">86f656f8-0bd0-4e87-b947-79f95aa2165f</param>
					<param name="api_member_token_to">0638a6a9-a041-45bd-ace4-eaea85a6c985</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_update" runat="server" enabled="true" object="mediaitem" operation="update" group="crud">
			<doc>
				<short>Updates a MediaItems's information</short>
				<full>          
                    If parameters are not provided, then the correponding field is not updated. If the parameter is empty, then the field is set to blank.
				</full>
			</doc>
			<url>/mediaitem_update/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token that represents the member making this change. This member must own this media item to make the change.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="subject">
				<doc>
                    (optional) The subject text for the media item.
				</doc>
			</param>
			<param name="body">
				<doc>
					(optional) The body text of the media item.
				</doc>
			</param>
			<param name="privacy">
				<doc>
					(optional) 0 = in all feeds, 1 = only in member feeds and identity feeds, 2 = only in identity feeds, 3 or above - not in any feeds
				</doc>
			</param>
			<param name="filter">
				<doc>
					(optional)  If this is true (default is false) then the subject and body will be filtered by the global and campaign specific user generated content filters.
				</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Media Item Update
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="subject">This Is A Better Subject</param>
					<param name="body">This is a Beter Body</param>
					<expect status="success" />
				</scenario>
				<scenario name="simple">
					<doc>
						Only update privacy
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">8005907b-5d79-4853-9ab0-7c0fec3592ff</param>
					<param name="mediaitem_id">1</param>
					<param name="privacy">0</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_get_url" runat="server" enabled="true" object="mediaitem" operation="read" group="crud">
			<doc>
				<short>Returns the URL for the specified #mediaitem#</short>
				<full>

                        This function is in for convenience. It is possible to calculate the url for a media item.

                        From the campaign xml, grab the campaign/details/core_rooturl value eg http://core.thumbwhere.com/  
                        Then take the mediaitem id and split it up so that there is a / between each digit. So 100 becomes 1/0/0 and 23 becomes 2/3. 7 would just be 7. For this example we will use 1/2/3
                        Then take the mediaitem and put a / at the start of it and add a .xml onto the end of it. eg /123.xml

                        If you add all these together you end up with 

                        http://core.thumbwhere.com/1/2/3/123.xml

                    The folder structure is done this way so that ThumbWhere can server content from dumb (scriptless) storage systems without ending up with thousands of files in the one directory.
				</full>
			</doc>
			<url>/mediaitem_get_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the xml for this media item.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the mediaitem. If #redirect# is true, then this will actually redirect you to the Media Item's XML.
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirect to the XML for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_get_media_url" runat="server" enabled="true" object="mediaitem" operation="read" group="crud">
			<doc>
				<short>Returns the URL to the originally submitted media #mediaitem#</short>
				<full />
			</doc>
			<url>/mediaitem_get_media_url/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we are rating
				</doc>
			</param>
			<param name="redirect">
				<doc>
                    bool - If true then this request will redirect to the actual media. As this is 
				</doc>
			</param>
			<response>
				<doc>
                    Returns the URL which can be used to request the XML for the mediaitem. If #redirect# is true, then this will actually redirect you to the Media Item's XML.
				</doc>
				<param name="url">
					<doc>
                        The url for the original media.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request URL for the original media that was submitted for this mediaitem.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="redirect">
					<doc>
                        Redirects URL to the original media that was submitted for this mediaitem.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="redirect">true</param>
					<expect status="success">
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_list_transformations" runat="server" enabled="true" object="mediaitem" operation="enumerate" group="transformation_id">
			<doc>
				<short>Returns a list of all the transformations for a media item</short>
				<full />
			</doc>
			<url>/mediaitem_list_transformations/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to get all the transformations for
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
				<param name="url">
					<doc>
                        The url where we can retrieve the xml for the media item
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_add_transformation" runat="server" enabled="true" object="mediaitem" operation="create" group="transformation_id">
			<doc>
				<short>Adds a transformation to a media item</short>
				<full>
                    All newly added transformations get added to the end. A transformation consists of two strings a #type# and an optional #argument#. 
				</full>
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to add the translation to.
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
						Adds a 'rotate left' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
						Adds a 'mirror' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
						Adds a 'caption bottom' transformations to a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_transformation" runat="server" enabled="true" object="mediaitem" operation="update" group="transformation_id">
			<doc>
				<short>Sets the type and argument of the specified translation.</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to update the transformation for.
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
                    long - The transformation we want to update
				</doc>
			</param>
			<param name="type">
				<doc>
                    string - The type of transformation eg. 'rotate left' 'rotate right' 'flip' 'mirror' 'caption top' 'caption middle' 'caption bottom'
				</doc>
			</param>
			<param name="argument">
				<doc>
                    string - The argument for the transformation
				</doc>
			</param>
			<response>
				<doc>
                    A list of all the transformations for a media item
				</doc>
			</response>
			<scenarios>
				<scenario name="rotate left">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">rotate left</param>
					<expect status="success" />
				</scenario>
				<scenario name="mirror">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">mirror</param>
					<expect status="success" />
				</scenario>
				<scenario name="caption ">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<param name="type">caption bottom</param>
					<param name="argument">Hello Cruel World</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_transformation" runat="server" enabled="true" object="mediaitem" operation="delete" group="transformation_id">
			<doc>
				<short>Deletes a transformation for a specified media item</short>
				<full />
			</doc>
			<url>/mediaitem_add_transformation/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    long - The media item we want to delete the transformation from
				</doc>
			</param>
			<param name="transformation_id">
				<doc>
                    long - The transformation we want to delete
				</doc>
			</param>
			<response>
				<doc>
                    Simple success or failure.
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request transformations for a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="transformation_id" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_rate" runat="server" enabled="true" object="mediaitem" group="ratings" operation="update">
			<doc>
				<short>Adds a rating to a MediaItem</short>
				<full>When called this returns the latest calculated rating of the media item.</full>
			</doc>
			<url>/mediaitem_rate/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    Optional API Member Token that represents the member making this rating. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
                    The media item count we are rating
				</doc>
			</param>
			<param name="score">
				<doc>
                    The rating score. If the rating was 3 out of 5 stars, then this valur would be 3.
				</doc>
			</param>
			<param name="maxscore">
				<doc>
                    The rating maxscore. What the rating is "out of" If the rating was 3 out of 5 stars, then this value would be 5. 
				</doc>
			</param>
			<param name="ipaddress">
				<doc>
                    The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie">
				<doc>
                    A unique identifier. We ignore any ratings for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason">
				<doc>
                    A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
                    Returns the newly calculated rating for the media item.
				</doc>
				<param name="rating">
					<doc>
                        The actual rating for this media item.
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="score">1</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
                        Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="score">3</param>
					<param name="maxscore">5</param>
					<expect status="success">
						<param name="rating" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_viewed" runat="server" enabled="true" object="mediaitem" group="metrics" operation="update">
			<doc>
				<short>Increments the viewcount for a #mediaitem#</short>
			</doc>
			<url>/mediaitem_viewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are incrementing
				</doc>
			</param>
			<response>
				<doc>
					Returns the latest tally of views of the media item.
				</doc>
				<param name="mediaitem_id">
					<doc>The mediaitem that we incremented.</doc>
				</param>
				<param name="views">
					<doc>The latest number of views.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Increment numer of views
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="views" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_complain" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Adds a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_complain/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
					Optional API Member Token that represents the member making this complaint. If its left blank then the rating is anonymous.
				</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="ipaddress" optional="true">
				<doc>
					The IP address that is making this call. eg 202.12.137.1
				</doc>
			</param>
			<param name="cookie" optional="true">
				<doc>
					A unique identifier. We ignore any complaints for a mediaitem if the cookie is duplicated.
				</doc>
			</param>
			<param name="reason" optional="true">
				<doc>
					A user can give a brief description as to why they have made a rating.
				</doc>
			</param>
			<response>
				<doc>
					Returns the newly calculated rating for the media item.
				</doc>
				<param name="complaint_id">
					<doc>
						The id of the complaint created
					</doc>
				</param>
				<param name="complaints">
					<doc>
						The current number of complaints for this mediaitem
					</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reason">Offends my value system</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
				<scenario name="cookie">
					<doc>
						Rating of a media item with a supplied cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="cookie">cookiemonster</param>
					<param name="reason">This bird wets it's nest</param>
					<expect status="success">
						<param name="complaint_id" />
						<param name="complaints" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_delete_complaint" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Deletes a complaint to a MediaItem</short>
				<full />
			</doc>
			<url>/mediaitem_delete_complaint/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<param name="mediaitemcomplaint_id">
				<doc>
					The media item count we are rating
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple rating of a media item with no cookie
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="mediaitemcomplaint_id">1</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_censored" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'censored' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_censored/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the censored flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="censored">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_set_reviewed" runat="server" enabled="true" object="mediaitem" group="complaints" operation="update">
			<doc>
				<short>Sets the value of the 'reviewed' flag</short>
				<full />
			</doc>
			<url>/mediaitem_set_reviewed/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="mediaitem_id">
				<doc>
					The media item we are setting the 'reviewed' flag on
				</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Simple censoring of a media item
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="mediaitem_id">1</param>
					<param name="reviewed">true</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_create" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>Creates a single use ticket that can be used to upload content directly into thumbwhere. </short>
				<full>
                        This create an upload ticket that can be used with ^mediaitem_upload_push^.
				</full>
			</doc>
			<url>/mediaitem_upload_push_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
				</doc>
			</param>
			<param name="api_identity_token">
				<doc>
                    API Identity Token that we want the newly created media item to appear to be submitted by (eg. The mobile phone identity, or the Flikr identity).
				</doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<param name="maxsize" optional="true" default="10485760">
				<doc>The maximum size in bytes of file that we are allowed to upload.</doc>
			</param>
			<param name="expectedsize" optional="true" default="-1">
				<doc>The size of the file that we should be expecting. This allows any process monitoring the file push to calculate the percentage. </doc>
			</param>
			<response>
				<doc>Returns the upload ticket and some handy other fields.</doc>
				<param name="api_member_token">
					<doc>The API member token that represents this member.  If you didn't supply an api_member_token then this will be the newly created member.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API identity token that represents this member.  If you didn't supply an api_identity_token then this will be the newly created internal identity.</doc>
				</param>
				<param name="member">
					<doc>The id of the member. If you didn't supply an api_member_token then this will be the newly created member.</doc>
				</param>
				<param name="member_url">
					<doc>The url to the members XML feed. If you didn't supply an api_member_token then this will be for the newly created member.</doc>
				</param>
				<param name="ticket">
					<doc>The upload push ticket</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token" />
					<param name="api_identity_token" />
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">testdata</param>
					<param name="privacy">0</param>
					<param name="license">-1</param>
					<param name="maxsize">10485760</param>
					<expect status="success">
						<param name="ticket" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push" runat="server" enabled="true" object="mediaitem" operation="update" group="upload">
			<doc>
				<short>
                    Uploads a media item directly into ThumbWhere
				</short>
				<full>
                        Allows you to peform a HTTP POST file upload directly into ThumbWhere. The media item that is created is based on the meta-data 
                        supplied in the call to ^mediaitem_upload_push_create^.
				</full>
			</doc>
			<url>/mediaitem_upload_push/</url>
			<param name="ticket">
				<doc />
			</param>
			<param name="file" upload="true">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure.</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="ticket" />
					<param name="file" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="mediaitem_upload_push_query" runat="server" enabled="true" object="mediaitem" operation="read" group="upload">
			<doc>
				<short>Queries the status of an upload push in progress.</short>
				<full>Returns the status, number of bytes uploaded so far and the data rate.</full>
			</doc>
			<url>/mediaitem_upload_push_query/</url>
			<param name="ticket">
				<doc />
			</param>
			<response>
				<doc>Returns the status, number of bytes uploaded so far and the data rate.</doc>
				<param name="api_member_token">
					<doc>The API Member token of the member that has uploaded this media item.</doc>
				</param>
				<param name="api_identity_token">
					<doc>The API Identity token that was used to upload this media item.</doc>
				</param>
				<param name="member">
					<doc>The ID of the member that has uploaded this media item.</doc>
				</param>
				<param name="member_url">
					<doc>XML to the members XML feed.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was created when this file was uploaded.</doc>
				</param>
				<param name="size">
					<doc>The number of bytes that have been uploaded..</doc>
				</param>
				<param name="started">
					<doc>The time at which this upload started.</doc>
				</param>
				<param name="completed">
					<doc>The time at which this upload was completed..</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Basic Query - Requires valid ticket
					</doc>
					<param name="ticket" />
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_confirm" runat="server" enabled="true" object="competition" operation="update" group="entry">
			<doc>
				<short>Confirms a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_confirm/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Confirm an entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_query" runat="server" enabled="true" object="competition" operation="read" group="entry">
			<doc>
				<short>Queries a pending competition entry. </short>
				<full>#api_key# is only used to determine that the caller is legitimate. 
                The #code# will have been given to the member who submitted the #mediaitem# to the competition. </full>
			</doc>
			<url>/competition_entry_query/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="code">
				<doc>The code that has been given to the person who submitted this entry..</doc>
			</param>
			<response>
				<doc>Returns information about the media item and the member that has entered the media item into the competition.</doc>
				<param name="member">
					<doc>The ID of the member that made this entry into the compeition.</doc>
				</param>
				<param name="member_url">
					<doc>The URL to the XML that contains the details of the member.</doc>
				</param>
				<param name="mediaitem_id">
					<doc>The ID of the media item that was entered into the competition.</doc>
				</param>
				<param name="mediaitem_url">
					<doc>The URL to the XML feed that contains the details of the mediaitem.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Query a pending competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">1234</param>
					<expect status="error">
						<param name="api_member_token" />
						<param name="member" />
						<param name="member_url" />
						<param name="mediaitem_id" />
						<param name="mediaitem_url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="competition_entry_create" runat="server" enabled="true" object="competition" operation="create" group="entry">
			<doc>
				<short>Creates an competition entry</short>
				<full>Takes a media item and enters it into a competition.</full>
			</doc>
			<url>/competition_entry_create/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.</doc>
			</param>
			<param name="round">
				<doc>The id of the competition round that we are adding this media item to</doc>
			</param>
			<param name="mediaitem_id">
				<doc>The id of the mediaitem being entered into the competition</doc>
			</param>
			<param name="approved">
				<doc>If this is true then the entry is created as approved. If you leave this parameter out the entry will be by default unapproved.</doc>
			</param>
			<response>
				<doc>Returns the code needed to approve/reject and vote for the entry..</doc>
				<param name="votecode">
					<doc>The code that is used to approve and vote for this entry.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Create a competition entry.
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">89b4e3cb-38da-4907-aefa-316f99baf4f4</param>
					<param name="round">2</param>
					<param name="mediaitem_id">77</param>
					<expect status="success">
						<param name="votecode" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_login" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Login using an #api_key#/#api_member_token# pair.</short>
				<full>This is used to provide the same response as a normal username/password login (using ^member_login^ and ^member_login_identity^) from just the #api_member_token#</full>
			</doc>
			<url>/api_member_token_login/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="api_member_token">
				<doc>The API Member Token that we want to login as.</doc>
			</param>
			<response>
				<doc>The name of the Member and a direct url to their XML feed.</doc>
				<param name="username">
					<doc>The name of the member</doc>
				</param>
				<param name="feedurl">
					<doc>URL to the XML feed that describes this member</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Login as member using the saved member token
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">d6029931-d37a-4dd2-8075-e6a41f4d5187</param>
					<expect status="success">
						<param name="username">
							<doc>Anonymous</doc>
						</param>
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="invite" runat="server" enabled="true" object="application" operation="write" group="invite">
			<doc>
				<short>Creates an invitation that can be sent out to the provided #email#.</short>
				<full>Invitations are associated with the provided #api_key#</full>
			</doc>
			<url>/invite/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="email">
				<doc>The email adddress to add the invitation to.</doc>
			</param>
			<response>
				<doc>No data returned - Simple sucess or failure..</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Invite james to use the application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="email">james@massive.com.au</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_validate" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Validates #api_identity_token# and returns its current state.</short>
				<full>An API Identity Token or an API Key can be 'revoked' due to abuse.</full>
			</doc>
			<url>/api_identity_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Identity Token to validate.</doc>
			</param>
			<response>
				<doc>Returns the state of the API Identity Token.</doc>
				<param name="state">
					<doc>The state of the API Identity Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Identity Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_query" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API identity token request.</short>
				<full>
                This should be performed after a call to ^api_identity_token_request^ and should pass in the code returned by that call. 
                 The api identity_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_identity_token_request^.
				</full>
			</doc>
			<url>/api_identity_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>
                        Returns the status of the request, its expiry time in seconds and if it has been completed, the API Identity Token itself.
				</doc>
				<param name="request">
					<doc>If the API Identity Token is ready for use, this will be 'ready' and the #api_identity_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Identity Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request" runat="server" enabled="true" object="identity" operation="read" group="tokens">
			<doc>
				<short>Requests an API Identity Token.</short>
				<full>
                        After making the request, you need complete the request with a call to ^api_identity_token_request_authenticate^. This call should only be made if you are satisfed that the identity 
                        has been proven to belong to the person asserting that they own it.         
                        If this identity is a mobile phone, you have the option to SMS or MMS #code# to #number# to complete the request.
                        Once the request is completed, make a call to ^api_identity_token_request_query^ with the returned #code# as a parameter to get the #api_identity_token# and the #api_member_token#.
				</full>
			</doc>
			<url>/api_identity_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="api_member_token">
				<doc>Member that this identity will be added to. If this is blank and this is not a pre-existing member then a new member will be created after this request is completed</doc>
			</param>
			<param name="id">
				<doc>The identity id - eg email address or mobile phone number.</doc>
			</param>
			<param name="type">
				<doc>The identity type</doc>
			</param>
			<response>
				<doc>If #type# is 'mobile' it will return with the #code# that needs to be SMSed to the provided #number#.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_identity_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_identity_token_request_query^ should return the new API identity_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Assert that you own the email address drmiaow@gmail.com
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="api_member_token">eb21b2a8-3f3c-49ba-8c5a-f0f9d511f68b</param>
					<param name="id">drmiaow@gmail.com</param>
					<param name="type">email</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_identity_token_request_authenticate" runat="server" enabled="true" object="identity" operation="create" group="tokens">
			<doc>
				<short>Authenticates an API Identity Token Request made by a previous call to ^api_identity_token_request^.</short>
				<full>This enables an application to vouch for the validity of an Identity.</full>
			</doc>
			<url>/api_identity_token_request_authenticate/</url>
			<param name="api_key">
				<doc>The API Key that a API Identity Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_identity_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_identity_token_request^.</doc>
			</param>
			<response>
				<doc>Returns with the api_identity_token that has been created for the corresponding member represented by the api_member_token</doc>
				<param name="api_identity_token">
					<doc>This is the api identity token that was created or found matching the original request..</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Identity Token returned. This be the same as the one supplied to ^api_identity_token_request^, or if one was supplied, it will be a be for a newly created Member.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Identity Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_validate" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Validates #api_member_token# and returns its current state. An API Member Token or an API Key can be 'revoked' due to abuse. </short>
			</doc>
			<url>/api_member_token_validate/</url>
			<param name="api_member_token">
				<doc>The API Member Token to validate.</doc>
			</param>
			<response>
				<doc>The state of the API Member Token.</doc>
				<param name="state">
					<doc>The state of the API Member Token.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Member Token
					</doc>
					<param name="api_member_token">1290bbea-0af9-44c1-b928-cf2515ca635f</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request_query" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Query the status of an API request.</short>
				<full>
                    This should be performed after a call to ^api_member_token_request^ and should pass in the code returned by that call. 
                    The api member_token details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_member_token_request^.
				</full>
			</doc>
			<url>/api_member_token_request_query/</url>
			<param name="api_key">
				<doc>The API Key that a API Member Token request has been made against. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_member_token_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_member_token_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the current API Member Token request</doc>
				<param name="request">
					<doc>If the API Member Token is ready for use, this will be 'ready' and the #api_member_token# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Member Token request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_member_token">
					<doc>The API Member Token returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Member Token that will not exist
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="code">agamwa</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_member_token" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_member_token_request" runat="server" enabled="true" object="member" operation="read" group="tokens">
			<doc>
				<short>Requests an API Member Token.</short>
				<full>After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_member_token_request_query^ with the returned #code# as a parameter.</full>
			</doc>
			<url>/api_member_token_request/</url>
			<param name="api_key">
				<doc>If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number that it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_member_token_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_member_token_request_query^ should return the new API member_token</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_validate" runat="server" enabled="true" object="application" operation="read" group="key">
			<doc>
				<short>Validates #api_key# and returns its current state</short>
				<full>An API key can be 'revoked' due to abuse. </full>
			</doc>
			<url>/api_key_validate/</url>
			<param name="api_key">
				<doc>
                    API Key for the registered application that is calling this method. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the API's domain name.
				</doc>
			</param>
			<response>
				<doc>Returns the state of the API Key.</doc>
				<param name="state">
					<doc>The state of the API Key.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        validate an API Key
					</doc>
					<param name="api_key">27aba919-ac95-46f2-ad7d-e55c0373a7c1</param>
					<expect status="success">
						<param name="state" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request_query" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Queries the state of an API Key request.</short>
				<full>              
                    This is a back end API call - this is not part of the public API. 

					This should be performed after a call to ^api_key_request^ and should pass in the code returned by that call. 
                    The api key details will not be returned until the code has been sent by SMS to the mobile number will also have been returned by ^api_key_request^.
				</full>
			</doc>
			<url>/api_key_request_query/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="code">
				<doc>The code that was returned by a previous call to ^api_key_request^. This code should have been sent via SMS or MMS to the number also returned by ^api_key_request^.</doc>
			</param>
			<response>
				<doc>Returns the status of the request and the number of seconds remaining.</doc>
				<param name="request">
					<doc>If the API Key is ready for use, this will be 'ready' and the #api_key# element will be present and populated, else it will be 'waiting' or 'expired' if the request has expired.</doc>
				</param>
				<param name="expiry_seconds">
					<doc>The number of seconds you have before the API Key request expires. Will not show if #request# is 'expired' or 'ready'</doc>
				</param>
				<param name="api_key">
					<doc>The API Key returned. This will only be present if #request# has a value of 'ready'</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Request Status of an API Key that will not exist
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="code">mamapda</param>
					<expect status="success">
						<param name="request" />
						<param name="expiry_seconds" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="api_key_request" runat="server" enabled="true" object="external_application" operation="read" group="key">
			<doc>
				<short>Requests an API Key for an external application. This will register the external application against the specified user.</short>
				<full>
						After making the request, you need to SMS or MMS #code# to #number# and a call to ^api_key_request_query^ with the returned #code# as a parameter. 
						If the name and the URL is for an existing application then the api_key for that pre-existing application will be returned.
				</full>
			</doc>
			<url>/api_key_request/</url>
			<param name="campaign_id">
				<doc>The campaign these API calls will be made against.</doc>
			</param>
			<param name="name">
				<doc>The name of the application to be registered.</doc>
			</param>
			<param name="url">
				<doc>The url of the application to be registsted.</doc>
			</param>
			<param name="description">
				<doc>A description for the application to be registered.</doc>
			</param>
			<response>
				<doc>Returns the code and the mobile number it needs to be SMSed to.</doc>
				<param name="code">
					<doc>The code to be sent via SMS or MMS. This is also used to request a status update on the request by making a call to ^api_key_request_query^.</doc>
				</param>
				<param name="number">
					<doc>The number to send this code to to complete the API registration. #code# should be sent to this number via SMS or MMS. After which a request to ^api_key_request_query^ should return the new API key</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
                        Register A Test Application
					</doc>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Test Application</param>
					<param name="url">http://app.thumbwhere.com.au/test</param>
					<param name="description">Test Application</param>
					<expect status="success">
						<param name="code" />
						<param name="number" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="location_get_identity_ad" runat="server" enabled="true" object="location" operation="read" group="advertising">
			<doc>
				<short>For the specified location and individial, return an ad tailored to that individual at that location.</short>
			</doc>
			<url>/location_get_identity_ad/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="location_type">
				<doc>The location type for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="location_id">
				<doc>The location id for the location of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_type">
				<doc>The identity type for the identity of the individual this ad is targeted at.</doc>
			</param>
			<param name="identity_id">
				<doc>The identity id for the identity of the individual this ad is targeted at.</doc>
			</param>
			<response>
				<doc />
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Return a location aware add targeted at an individual by an identity
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="location_type">meter</param>
					<param name="location_id">1234</param>
					<param name="identity_type">verus</param>
					<param name="identity_id">567</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
		<!--
        <action name="track_message" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/track_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Mobile number of the user
                </doc>
            </param>


            <response>              
                <param name="tracking_id">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>             
            </response>


            <scenarios>             
                <scenario>
                    <doc>
                        Basic test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="mobile">61407909186</param>

                </scenario>
            </scenarios>



        </action>


        <action name="message_tracking_status" runat="server" enabled="false">
            <doc>
                track the next message from this user
            </doc>

            <url>/message_tracking_status/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="tracking_id">
                <doc>
                    your tracking id for this submission
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>     
--><!--

        <action name="incoming_feed" runat="server" enabled="false">
            <doc>
                Tells the server to start performing a bulk import of media from the specified url.
            </doc>

            <url>/incoming_feed/</url>

            <param name="provider_id">
                <doc>
                    The provider key
                </doc>
            </param>

            <param name="url">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <param name="build_date">
                <doc>
                    Date and time that this feed was constucted.
                </doc>
            </param>

            <param name="digest">
                <doc>
                    MD5 fingerprint for the entire feed
                </doc>
            </param>





            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>


        <action name="verify_user" runat="server" enabled="false">
            <doc>
                verify that a user has the following mobile number.
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mobile">
                <doc>
                    Url to the feed
                </doc>
            </param>

            <response>

                <param name="data">
                    <doc>
                        The data returned from the server
                    </doc>
                </param>

            </response>
        </action>  

        <action name="login_member" runat="server" enabled="false">
            <doc>
                Login as a member
            </doc>

            <url>/verify_user/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="username">
                <doc>
                    Username of member
                </doc>
            </param>

            <param name="session">
                <doc>
                    the session id
                </doc>
            </param>            

            <param name="password">
                <doc>
                    MD5 password of user
                </doc>
            </param>

            <response>              
                <param name="username">
                    <doc>
                        The user name passed in
                    </doc>
                </param>             

                <param name="session">
                    <doc>
                        A session id for this user
                    </doc>
                </param>             

                <param name="id">
                    <doc>
                        The id of the user
                    </doc>
                </param>             

                <param name="api_member_token">
                    <doc>
                        An API token for this user
                    </doc>
                </param>             

            </response>


            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Basic Login test
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                    <param name="username">guest</param>
                    <param name="password">guest</param>

                    <expect status="error">                 
                        <param name="username">james</param>
                        <param name="session">4785bff2-70e7-4464-8a71-502c860c116d</param>
                        <param name="id">-1</param>
                        <param name="api_member_token"/>
                    </expect>                   
                </scenario>             
            </scenarios>

        </action>                    

        <action name="new_member" runat="server" enabled="false">
            <doc>Creates a new member and assigns to a new campaign</doc>
            <url>/new_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="campaign_id">
                <doc>the session campaign to assign this member to</doc>
            </param>            
            <param name="username">
                <doc>Username of member</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|the pk_mediaitem of the users profile pic</doc>
            </param>            
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>

            <response />
        </action>   

        <action name="update_member" runat="server" enabled="false">
            <doc>Update a member</doc>
            <url>/update_member/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>       
            <response />
        </action>

        <action name="update_member_optional" runat="server" enabled="false">
            <doc>Update a member by optionally only giving the fields you want to update</doc>
            <url>/update_member_optional/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID</doc>
            </param>
            <param name="gender">
                <doc>Male|Female</doc>
            </param>
            <param name="salutation">
                <doc>Mr, Mrs etc</doc>
            </param>
            <param name="firstname">
                <doc>first name of member</doc>
            </param>
            <param name="lastname">
                <doc>last name of member</doc>
            </param>
            <param name="date_of_birth">
                <doc>DateTime.ToString()</doc>
            </param>
            <param name="url">
                <doc>website </doc>
            </param>
            <param name="email">
                <doc>email address of member</doc>
            </param>

            <param name="phonebusinesshours" >
                <doc/>
            </param>
            <param name="phoneafterhours" >
                <doc/>
            </param>
            <param name="phonemobile" >
                <doc/>
            </param>

            <param name="postaladdress1" >
                <doc/>
            </param>
            <param name="postaladdress2" >
                <doc/>
            </param>
            <param name="postaltown" >
                <doc/>
            </param>
            <param name="postalpostcode" >
                <doc/>
            </param>
            <param name="postalregion" >
                <doc/>
            </param>            
            <param name="postalcountry" >
                <doc/>
            </param>
            <param name="billingaddress1" >
                <doc/>
            </param>
            <param name="billingaddress2" >
                <doc/>
            </param>
            <param name="billingtown" >
                <doc/>
            </param>
            <param name="billingpostcode" >
                <doc/>
            </param>
            <param name="billingregion" >
                <doc/>
            </param>            
            <param name="billingcountry" >
                <doc/>
            </param>      

            <param name="showbirthday" >
                <doc/>
            </param>
            <param name="occupation" >
                <doc/>
            </param>
            <param name="imhandle" >
                <doc/>
            </param>
            <param name="imname" >
                <doc/>
            </param>
            <param name="interestsgeneral" >
                <doc/>
            </param>
            <param name="interestsmusic" >
                <doc/>
            </param>
            <param name="interestsmovies" >
                <doc/>
            </param>
            <param name="intereststvshows" >
                <doc/>
            </param>
            <param name="interestsbooks" >
                <doc/>
            </param>
            <param name="aboutme" >
                <doc/>
            </param>


            <response />
        </action>

        <action name="member_send_message" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_send_message/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_write_whiteboard" runat="server" enabled="false">
            <doc>send a message between 2 members</doc>
            <url>/member_write_whiteboard/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="body">
                <doc>the message body</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member_sender">
                <doc>the sender of the message</doc>
            </param>            
            <param name="member_recipient">
                <doc>receiver of the message</doc>
            </param>            
            <response />
        </action>

        <action name="member_message_mark_read" runat="server" enabled="false">
            <doc>mark a message as read</doc>
            <url>/member_message_mark_read/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="membermembermessage">
                <doc>the pk of the message to mark as read</doc>
            </param>            
            <response />
        </action>

        <action name="update_member_profile_picture" runat="server" enabled="false">
            <doc>Update a members profile picture</doc>
            <url>/update_member_profile_picture/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>the members ID</doc>
            </param>
            <param name="profilepic_mediaitem">
                <doc>-1|an ID</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign key</doc>
            </param>
        </action>
--><action name="mediaitem_upload_pull" runat="server" enabled="true" object="mediaitem" operation="create" group="upload">
			<doc>
				<short>Ingests a new media item into the server.</short>
				<full>
					Requires the media to be publicly accessible via the internet so that thumbwhere can download it.
					One of the paramaters supplied needs to be an md5 digest of the file you are uploading.
					This action will wait until the media item is uploaded before it returns. 
					This delay will depend on the network connection between the source and thumbwhere cloud.
				</full>
			</doc>
			<url>/mediaitem_upload_pull/</url>
			<param name="api_key">
				<doc>
                    API key for the registered application that is calling this method. An API key is provided to developers who have registered a campaign or a campaign application.
				</doc>
			</param>
			<param name="url">
				<doc>Where the file to be ingested is located. This file will be downloaded by thumbwhere.com and then ingested. This url must be publicy available. In the background, after this call returns, transcoding and feed generation for the media item will commence. </doc>
			</param>
			<param name="subject" optional="true">
				<doc>The subject/title for the new media item.</doc>
			</param>
			<param name="body" optional="true">
				<doc>A description of the new media item.</doc>
			</param>
			<param name="tags" optional="true">
				<doc>Any additional tags you want associated with this media item.</doc>
			</param>
			<param name="campaign_id">
				<doc>The campaign that we want this item added to.</doc>
			</param>
			<param name="identity_key" optional="true">
				<doc>The identity key of the member uploading the file.</doc>
			</param>
			<param name="digest">
				<doc>An MD5 checksum to validate against. See the MetaWrap.Utility.MD5FileHash(string p_file_path) C# function.</doc>
			</param>
			<param name="privacy" optional="true" default="0">
				<doc>the privacy level 0 = public, 1 = friends, 2 = private</doc>
			</param>
			<param name="license" optional="true" default="0">
				<doc>id of the license in use 1-6 for Creative Commons Licenses. See the CC license provider feed for more details.</doc>
			</param>
			<response>
				<param name="mediaitem_id">
					<doc>id of the license in use</doc>
				</param>
				<param name="url">
					<doc>The url of the xml feed to the new media item. It may be a few seconds before this is published. There are ways of being notified that a media item is fully injested via application callbacks.</doc>
				</param>
			</response>
			<scenarios>
				<scenario name="simple jpeg">
					<doc>
                        Basic JPG Upload
					</doc>
					<param name="api_key">8e9ff318-3cd7-4593-99de-4c37c0fb335a</param>
					<param name="url">http://www.massive.com.au/projects/333/panasonic.jpg</param>
					<param name="subject">An AirBus A380</param>
					<param name="body">The A380's flight deck introduces the latest technology for pilots, while retaining commonality with the other members of Airbus' fly-by-wire jetliner family. Eight identical large interactive displays on the main instrument panel provide a much larger screen area with clearer presentations, and are augmented by a HUD (head-up display).</param>
					<param name="tags">This is a test message</param>
					<param name="digest">73CDCAF793B4FE85D10CB717DC261F65</param>
					<param name="privacy">2</param>
					<param name="license">6</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
				<scenario name="video">
					<doc>
						Basic JPG Upload (Example for AFF)
					</doc>
					<param name="api_key">4d17e52d-b5ef-4b29-b459-e5a01aef6283</param>
					<param name="url">http://www.movly.com/Content/Movies/Savage_Grace/Trailers/Savage_Grace_mp4_movie_trailer/MP4/savage-grace-trailer-.mp4</param>
					<param name="subject">Savage Grace Movie Trailer</param>
					<param name="body">The true story of the beautiful and charismatic Barbara Daly, who married above her class to Brooks Baekeland, heir to the Bakelite plastics fortune. Their only child is a failure in his father's eyes, and as he matures and becomes increasingly close to his lonely mother, the seeds for tragedy are sown..</param>
					<param name="digest">B8A7551DEAB8E5B02359221156263111</param>
					<expect status="success">
						<param name="mediaitem_id" />
						<param name="url" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<action name="campaign_create_clone" runat="server" enabled="true" object="campaign" operation="create" group="create">
			<doc>
				<short>Create a campaign based on an existing campaign.</short>
				<full>The will clone the campaign details, the deployment servers and the media definitions for a specified campaign.</full>
			</doc>
			<url>/campaign_create_clone/</url>
			<param name="master_key">
				<doc>The master key for this instance of ThumbWhere</doc>
			</param>
			<param name="campaign_id">
				<doc>The Campaign Key for the campaign that you want to clone.</doc>
			</param>
			<response>
				<param name="campaign_id">
					<doc />
				</param>
				<param name="api_key">
					<doc />
				</param>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>	
						Example of cloning an existing campaign.
					</doc>
					<param name="master_key">SOMETHINGSOMETHINGDARKSIDESOMETHINGSOMETHINGDARKSIDE</param>
					<param name="campaign_id">SOMETHINGSOMETHINGDARKSIDE-1</param>
					<param name="name">Name Of Campaign</param>
					<param name="description">Description of Campaign</param>
					<expect status="success">
						<param name="campaign_id" />
						<param name="api_key" />
					</expect>
				</scenario>
			</scenarios>
		</action>
		<!--

        <action name="verify_number" runat="server" enabled="false">
            <doc>Verifies that a number is known to the ThumbWhere</doc>
            <url>/verify_number/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method. An API key is provided to developers on request via the new_api_member_token webservice.
                </doc>
            </param>

            <param name="number">
                <doc>The phone number that we want to find out about.</doc>
            </param>


            <response>
                <param name="exists">
                    <doc>If there is an identity/member pair for this number then this is true.</doc>
                </param>

                <param name="identity">
                    <doc>id of the identity that has this number</doc>
                </param>

                <param name="member">
                    <doc>id of the member id of the identity that has this number</doc>
                </param>

            </response>

            <scenarios>             
                <scenario name="simple">
                    <doc>
                        Do I exist?
                    </doc>

                    <param name="api_member_token">1:1:1</param>
                    <param name="number">+61-123-456</param>

                    <expect status="success">                   
                        <param name="identity"/>
                        <param name="member"/>
                    </expect>   

                </scenario>             
            </scenarios>


        </action>   
--><!--
        <action name="media_item_add_comment" runat="server" enabled="false">
            <doc>Comment on a media item</doc>
            <url>/media_item_add_comment/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="subject">
                <doc>the title of the file</doc>
            </param>            
            <param name="body">
                <doc>a description of the file</doc>
            </param>            
            <param name="campaign_id">
                <doc>the campaign to assign to</doc>
            </param>            
            <param name="member">
                <doc>the member uploading the file</doc>
            </param>            
            <param name="mediaitem">
                <doc>the member item we are commenting on</doc>
            </param>            
            <response />
        </action>

        <action name="update_media_item" runat="server" enabled="false">
            <doc>Update the description fields of a media item</doc>
            <url>/update_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
            <param name="subject">
                <doc>the title of the file</doc>
            </param>
            <param name="body">
                <doc>a description of the file</doc>
            </param>
            <param name="tags">
                <doc>any additional tags</doc>
            </param>            
            <param name="privacy">
                <doc>the privacy level 0 = public, 1 = friends, 2 = identity(s)</doc>
            </param>
            <param name="license">
                <doc>id of the license in use</doc>
            </param>
        </action>

        <action name="update_media_item_increment_view_count" runat="server" enabled="false">
            <doc>Update the view count of a media item by 1</doc>
            <url>/update_media_item_increment_view_count/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>id of the media item to update</doc>
            </param>
        </action>

        <action name="delete_media_item" runat="server" enabled="false">
            <doc>Delete a media file</doc>
            <url>/delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item to delete</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_identity" runat="server" enabled="false">
            <doc>Adds a link between a media item and identity</doc>
            <url>/media_item_add_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_delete_identity" runat="server" enabled="false">
            <doc>Removes the link between a media item and identity</doc>
            <url>/media_item_delete_identity/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>the id of the media item</doc>
            </param>
            <param name="identity">
                <doc>the id of the identity</doc>
            </param>
            <response />
        </action>

        <action name="media_item_add_rating" runat="server" enabled="false">
            <doc>Give a rating to a media item</doc>
            <url>/media_item_add_rating/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitem">
                <doc>Media item this is a rating of</doc>
            </param>
            <param name="campaign_id">
                <doc>campaign this rating belongs to</doc>
            </param>
            <param name="member">
                <doc>member who made this rating</doc>
            </param>
            <param name="ipaddress">
                <doc>ip address that posted the rating</doc>
            </param>
            <param name="cookie">
                <doc>cookie name?</doc>
            </param>
            <param name="reason">
                <doc>a description of the rating</doc>
            </param>
            <param name="score">
                <doc>the score this rating received</doc>
            </param>
            <param name="maxscore">
                <doc>the maximum score that could have been awarded for this rating</doc>
            </param>
            <response />
        </action>

        <action name="member_add_friend" runat="server" enabled="false">
            <doc>Allows a member to add a friend</doc>
            <url>/member_add_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to be-friend</doc>
            </param>
            <response />
        </action>

        <action name="member_delete_friend" runat="server" enabled="false">
            <doc>Allows a member to delete a friend or a friend request</doc>
            <url>/member_delete_friend/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="member_friend">
                <doc>ID of the member to de-friend</doc>
            </param>
            <response />
        </action>

        <action name="new_member_group" runat="server" enabled="false">
            <doc>Allows a member to add a new group</doc>
            <url>/new_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="founder">
                <doc>ID of the member creating the group</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for this group</doc>
            </param>
            <response />
        </action>

        <action name="update_member_group" runat="server" enabled="false">
            <doc>Allows a member group to be updated</doc>
            <url>/update_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>id of the group to be deleted</doc>
            </param>
            <param name="name">
                <doc>group name</doc>
            </param>
            <param name="description">
                <doc>group description</doc>
            </param>
            <param name="public">
                <doc>can anyone access this group?</doc>
            </param>
            <param name="mediaitem_grouppic">
                <doc>a pic for the group</doc>
            </param>
            <response />
        </action>

        <action name="delete_member_group" runat="server" enabled="false">
            <doc>Deletes an entire member group</doc>
            <url>/delete_member_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the member group to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign to remove the group from</doc>
            </param>
            <response />
        </action>

        <action name="member_join_group" runat="server" enabled="false">
            <doc>Allows a member to join a group</doc>
            <url>/member_join_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to join</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="member_leave_group" runat="server" enabled="false">
            <doc>Allows a member to leave a group</doc>
            <url>/member_leave_group/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="member">
                <doc>ID of the member</doc>
            </param>
            <param name="membergroup">
                <doc>ID of the group to leave</doc>
            </param>
            <param name="campaign_id">
                <doc/>
            </param>
            <response />
        </action>

        <action name="new_media_item_collection" runat="server" enabled="false">
            <doc>Create a media item collection</doc>
            <url>/new_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="name">
                <doc>collection title/name</doc>
            </param>
            <param name="media">
                <doc>the media type. if this is empty this collection can handle any media type. 
                     valid values are wallpaper,video,message,audio</doc>
            </param>
            <param name="description">
                <doc>a description</doc>
            </param>
            <param name="member">
                <doc>member id of the collection creator</doc>
            </param>
            <param name="public">
                <doc>True|False</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="delete_media_item_collection" runat="server" enabled="false">
            <doc>Deletes a media item collection</doc>
            <url>/delete_media_item_collection/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>Id of the media item collection to delete</doc>
            </param>
            <param name="campaign_id">
                <doc>the campaign this group is under</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_add_media_item" runat="server" enabled="false">
            <doc>Adds a media item to a media item collection</doc>
            <url>/media_item_collection_add_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item</doc>
            </param>
            <param name="displayorder">
                <doc>order within the collection</doc>
            </param>
            <response />
        </action>

        <action name="media_item_collection_delete_media_item" runat="server" enabled="false">
            <doc>Removes a media item from a media item collection</doc>
            <url>/media_item_collection_delete_media_item/</url>

            <param name="api_member_token">
                <doc>
                    API Member Token for the registered application that is calling this method.
                </doc>
            </param>

            <param name="mediaitemcollection">
                <doc>ID of the media item collection</doc>
            </param>
            <param name="mediaitem">
                <doc>ID of the media item to remove</doc>
            </param>
            <response />
        </action>
--><action name="tag_get_mediaitems" runat="server" enabled="true" object="tag" operation="enumerate" group="mediaitem">
			<doc>
				<short>Returns a list of all the mediaitems tagged by a specified tag.</short>
				<full />
			</doc>
			<url>/tag_get_mediaitems/</url>
			<param name="api_key">
				<doc>The API key for the campaign or external application. If this is blank, the server will assume the API token for the campaign based on the configuration of the API service and the calling domain name</doc>
			</param>
			<param name="tag">
				<doc>
					string - The tag.
				</doc>
			</param>
			<response>
				<doc>
					A list of all the mediaitems tagged by this
				</doc>
			</response>
			<scenarios>
				<scenario name="simple">
					<doc>
						Request transformations for a media item
					</doc>
					<param name="api_key">c26ff0e4-2064-4e7e-b730-ba5275c7cb2e</param>
					<param name="tag">tag123</param>
					<expect status="success" />
				</scenario>
			</scenarios>
		</action>
	</actions>
</metawrap>