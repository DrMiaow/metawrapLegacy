<?xml version="1.0"?>
<!--
    $Id: test_1_state.xml,v 1.22 2004/01/02 01:22:43 james Exp $

    $Log: test_1_state.xml,v $
    Revision 1.22  2004/01/02 01:22:43  james
    State machine renaming

    Revision 1.21  2008/07/21 10:16:17  james
    Added inactive - now just need a better name for it....

    Revision 1.20  2007/05/04 07:59:34  james
    *** empty log message ***

    Revision 1.19  2007/05/04 07:58:22  james
    *** empty log message ***

    Revision 1.18  2007/04/23 12:30:03  james
    Adding testcase for compact format

    Revision 1.17  2007/04/21 06:19:35  james
    Working on state machine

    Revision 1.16  2006/05/18 08:17:53  james
    Schema update to a single global schema

    Revision 1.15  2006/04/26 14:46:29  james
    Adaped old testcase to new schema

    Revision 1.14  2006/02/15 12:07:39  james
    Moved MetaWrap.State.Code namespace to MetaWrap.Code

    Revision 1.6  2006/02/15 11:45:41  james
    *** empty log message ***

    Revision 1.5  2006/01/31 13:21:50  james
    Added state exclusion and state mutex.

    Revision 1.4  2006/01/30 21:33:01  james
    *** empty log message ***

    Revision 1.3  2006/01/30 21:28:41  james
    Latest state fields

    Revision 1.2  2006/01/29 11:43:12  james
    re-enabled transition xml - not currently processing it

    Revision 1.1  2006/01/29 11:28:16  james
    new test for basic state functions

    Revision 1.11  2006/01/29 11:26:57  james
    Added testcases for mw_lib_state.js

    Revision 1.10  2006/01/26 11:14:21  james
    Getting JavaScript version of object model up and running.

    Revision 1.9  2006/01/24 10:58:19  james
    Completed initial instructions and framework - can now start coding library
    Attempting to deal with formatting.

    Revision 1.8  2006/01/23 12:32:56  james
    More work on state

    Revision 1.7  2006/01/19 13:36:59  james
    A few steps closer in the state instruction stylesheet

    Revision 1.6  2006/01/18 11:34:40  james
    Added simple structire for state transformation

    Revision 1.5  2006/01/16 11:49:12  james
    Decided on minimal state

    Revision 1.4  2006/01/15 13:16:40  james
    Working on state schema

    Revision 1.3  2006/01/15 12:33:33  james
    Latest updates

    
    @brief Example XML for state evaluator
    
    processing
        sequence
        flow
                
        switch?
        case?
        while?
        pick?        
    
    execution
        invoke? 
        recieve?
        reply?
        return
    
    manipulation
        compare
            Equal - A comparison for equality. 
            GreaterThan - A comparison for greater than. 
            GreaterThanEqual - A comparison for greater than or equal to. 
            LessThan - A comparison for less than. 
            LessThanEqual - A comparison for less than or equal to. 
            NotEqual - A comparison for inequality
        copy

    FROM BPEL

    The token "activity" can be any of the following:
     <receive>
     <reply>
     <invoke>
     <assign>
     <throw>
     <terminate>
     <wait>
     <empty>
     <sequence>
     <switch>
     <while>
     <pick>
     <flow>
     <scope>
     <compensate>        
    
    
    
    code needs to have a pattern that follows exceptions
 -->
<!-- <?xml-stylesheet type="text/xsl" href="E:\metawrap\javascript\tests\state\state.xsl"?> -->

<!--  XSLT WILL NOT WORK IF xmlns is included -->
<metawrap>
<!--  
<metawrap xmlns="../metawrap/metawrap.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="../metawrap/metawrap.xsd ../metawrap/metawrap.xsd" >
-->
    <states>
        <state name="loggedout">
            <active>
                <condition>                	
                    <code>
                        <body>
                            <!-- declare a variable called 'A'-->
                            <var name="A"/>

                            <!-- declare a variable called 'B'-->
                            <var name="B"/>

                            <!-- declare a variable called 'B'-->
                            <var name="C"/>

                            <!-- test that we can copy a string constant delimited by ' into a var -->
                            <copy from="'hello'" to="B"/>

                            <!-- test that we can copy a string constant delimited by " into a var -->
                            <copy from='"hello"' to="B"/>

                            <!-- test that we can copy a boolean constant into a var -->
                            <copy from="true" to="B"/>

                            <!-- test that we can copy a boolean constant into a var -->
                            <copy from="false" to="B"/>

                            <!-- test that we can copy a numerical constant into a var -->
                            <copy from="0.1" to="B"/>

                            <!-- test that we can copy null into a var -->
                            <copy from="null" to="B"/>

                            <!-- test that we can copy undefined into a var -->
                            <copy from="undefined" to="B"/>

                            <!-- test that we can a var into a var -->
                            <copy from="true" to="X.Y"/>

                            <!-- Read the A into the local variable -->
                            <copy from="X.Y" to="B"/>



                            <!-- Compare the value of A to null -->
                            <compare op="notequal" with="A" to="B" result="C"/>

                            <!-- Compare the value of A to null -->
                            <compare op="notequal" with="A" to="B" result="X.Z"/>

                            <!-- Compare the value of A to null -->
                            <compare op="notequal" with="A" to="true" result="C"/>

                            <!-- Compare the value of A to null -->
                            <compare op="notequal" with="A" to="true" result="X.Z"/>


                            <!-- Compare the value of A to null -->
                            <compare op="notequal" with="true" to="B" result="C"/>

                            <!-- Compare the value of A to null -->
                            <compare op="notequal" with="true" to="B" result="X.Z"/>

                            <!-- Compare the value of A to null -->
                            <compare op="notequal" with="X.X" to="B" result="C"/>

                            <!-- Compare the value of A to null -->
                            <compare op="notequal" with="X.X" to="B" result="X.Z"/>



                            <!-- Compare the value of A to null -->                     
                            <compare op="notequal" with="true" to="true" result="C"/>

                            <!-- Compare the value of A to null -->                     
                            <compare op="notequal" with="true" to="X.Y" result="C"/>

                            <!-- Compare the value of A to null -->                     
                            <compare op="notequal" with="X.X" to="true" result="C"/>

                            <!-- Compare the value of A to null -->                     
                            <compare op="notequal" with="X.X" to="X.Y" result="C"/>


                            <!-- Compare the value of A to null -->                     
                            <compare op="notequal" with="X.X" to="X.Y" result="X.Z"/>

                            <!-- Compare the value of A to null -->                     
                            <compare op="notequal" with="X.X" to="true" result="X.Z"/>

                            <!-- Compare the value of A to null -->                     
                            <compare op="notequal" with="true" to="X.Y" result="X.Z"/>

                            <!-- Compare the value of A to null -->                     
                            <compare op="notequal" with="true" to="true" result="X.Z"/>


                            <!-- declare a variable called 'B'-->
                            <var name="cookie_exists"/>

                            <!-- If the cookie is not true then we are not logged in -->
                            <compare op="notequal" with="Client.Cookies['Test2']" to="true" result="cookie_exists"/>

                            <!-- Return the value of B -->
                            <return with="cookie_exists"/>
                        </body>
                        <fault>
                            <!-- if anything bad happens - then we err on the side of security - we allow this state, which is logged out -->
                            <return with="true"/>
                        </fault>
                    </code>
                </condition>
            </actives>
            <transitions>
                <from>
                    <transition to="start">
                        <code>
                            <body>
                            </body>                 
                        </code>
                    </transition>

                    <transition to="loggedin">
                        <code>
                            <body>
                            </body>                 
                        </code>
                    </transition>               

                </from>
                <to>
                    <transition from="loggedin">
                        <code>
                            <body>
                            </body>
                        </code>
                    </transition>
                </to>
            </transitions>
    	    <!-- If we are logged out then we can't be logged in -->
            <exclude state="loggedin" />
        </state>
        <state name="loggedin">
            <active>
                <!-- List of tests that determine if you are in this state-->
                <condition>
                    <code>
                        <body>
                            <!-- declare a variable called 'A'-->
                            <var name="cookie"/>

                            <!-- If the cookie is true, then we are logged in -->
                            <compare op="equal" with="Client.Cookies['Test2']" to="true" result="cookie"/>

                            <!-- Return the value of A -->
                            <return with="cookie"/>                     
                        </body>
                        <fault>
                            <!-- if anything bad happens - then we err on the side of security - we disallow this state, which is logged in -->
                            <return with="false"/>
                        </fault>
                    </code>
                </condition>
            </actives>
            <transitions>
                <from>
                    <transition to="loggedout">
                        <code>
                            <body>
                            </body>
                        </code>             
                    </transition>
                </from>
                <to>
                    <transition from="loggedout">
                        <code>
                            <body>
                            </body>
                        </code>             
                    </transition>
                </to>
            </transitions>
            <!-- Exclusions  if we are loggedin then we can't be logged out -->
            <exclude state="loggedout" />

            <states>
                <state name="superuser">
                    <active>
                        <!-- List of tests that determine if you are in this state-->
                        <condition>
                            <code>
                                <body>
                                    <!-- Return the value of A -->
                                    <return with="true"/>                       
                                </body>
                                <fault>
                                    <!-- if anything bad happens - then we err on the side of security - we disallow this state, which is logged in -->
                                    <return with="false"/>
                                </fault>
                            </code>
                        </condition>
                    </actives>
                 
                    <transitions>
                        <from>
                            <transition to="superuser">
                                <code>
                                    <body>
                                    </body>
                                </code>             
                            </transition>
                        </from>
                        <to>
                            <transition from="guest">
                                <code>
                                    <body>
                                    </body>
                                </code>             
                            </transition>
                        </to>
                    </transitions>
    
                    <exclude state="guest" />
                </state>
                <state name="guest">
                    <active>
                        <!-- List of tests that determine if you are in this state-->
                        <condition>
                            <code>
                                <body>
                                    <!-- Return the value of A -->
                                    <return with="false"/>                      
                                </body>
                                <fault>
                                    <!-- if anything bad happens - then we err on the side of security - we disallow this state, which is logged in -->
                                    <return with="false"/>
                                </fault>
                            </code>
                        </condition>
                    </actives>
    
                    <transitions>
                        <from>
                            <transition to="superuser">
                                <code>
                                    <body>
                                    </body>
                                </code>             
                            </transition>
                        </from>
                        <to>
                            <transition from="guest">
                                <code>
                                    <body>
                                    </body>
                                </code>             
                            </transition>
                        </to>
                    </transitions>
    
                    <exclude state="superuser" />
                </state>                    
            </states>
        </state>
        <!-- Example external transitions -->

        <transition from="loggedout" to="loggedin" >
            <code>
                <body>
                </body>
            </code>                 
        </transition>

        <transition from="loggedin" to="loggedout" >
            <code>
                <body>
                </body>
            </code>                 
        </transition>

    </states>
</metawrap>